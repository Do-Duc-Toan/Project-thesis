
Line follower.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008fe0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c8  080091b0  080091b0  0000a1b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009578  08009578  0000b1d4  2**0
                  CONTENTS
  4 .ARM          00000008  08009578  08009578  0000a578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009580  08009580  0000b1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009580  08009580  0000a580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009584  08009584  0000a584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08009588  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000358  200001d8  0800975c  0000b1d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000530  0800975c  0000b530  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010d27  00000000  00000000  0000b204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000264c  00000000  00000000  0001bf2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001068  00000000  00000000  0001e578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cd7  00000000  00000000  0001f5e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002347b  00000000  00000000  000202b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013709  00000000  00000000  00043732  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d511b  00000000  00000000  00056e3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012bf56  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005688  00000000  00000000  0012bf9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  00131624  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009198 	.word	0x08009198

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001dc 	.word	0x200001dc
 800020c:	08009198 	.word	0x08009198

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1c:	f000 b96a 	b.w	8000ef4 <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f806 	bl	8000c38 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__udivmoddi4>:
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c3c:	9d08      	ldr	r5, [sp, #32]
 8000c3e:	460c      	mov	r4, r1
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d14e      	bne.n	8000ce2 <__udivmoddi4+0xaa>
 8000c44:	4694      	mov	ip, r2
 8000c46:	458c      	cmp	ip, r1
 8000c48:	4686      	mov	lr, r0
 8000c4a:	fab2 f282 	clz	r2, r2
 8000c4e:	d962      	bls.n	8000d16 <__udivmoddi4+0xde>
 8000c50:	b14a      	cbz	r2, 8000c66 <__udivmoddi4+0x2e>
 8000c52:	f1c2 0320 	rsb	r3, r2, #32
 8000c56:	4091      	lsls	r1, r2
 8000c58:	fa20 f303 	lsr.w	r3, r0, r3
 8000c5c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c60:	4319      	orrs	r1, r3
 8000c62:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c66:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c6a:	fa1f f68c 	uxth.w	r6, ip
 8000c6e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c72:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c76:	fb07 1114 	mls	r1, r7, r4, r1
 8000c7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7e:	fb04 f106 	mul.w	r1, r4, r6
 8000c82:	4299      	cmp	r1, r3
 8000c84:	d90a      	bls.n	8000c9c <__udivmoddi4+0x64>
 8000c86:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c8e:	f080 8112 	bcs.w	8000eb6 <__udivmoddi4+0x27e>
 8000c92:	4299      	cmp	r1, r3
 8000c94:	f240 810f 	bls.w	8000eb6 <__udivmoddi4+0x27e>
 8000c98:	3c02      	subs	r4, #2
 8000c9a:	4463      	add	r3, ip
 8000c9c:	1a59      	subs	r1, r3, r1
 8000c9e:	fa1f f38e 	uxth.w	r3, lr
 8000ca2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ca6:	fb07 1110 	mls	r1, r7, r0, r1
 8000caa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cae:	fb00 f606 	mul.w	r6, r0, r6
 8000cb2:	429e      	cmp	r6, r3
 8000cb4:	d90a      	bls.n	8000ccc <__udivmoddi4+0x94>
 8000cb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cba:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cbe:	f080 80fc 	bcs.w	8000eba <__udivmoddi4+0x282>
 8000cc2:	429e      	cmp	r6, r3
 8000cc4:	f240 80f9 	bls.w	8000eba <__udivmoddi4+0x282>
 8000cc8:	4463      	add	r3, ip
 8000cca:	3802      	subs	r0, #2
 8000ccc:	1b9b      	subs	r3, r3, r6
 8000cce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	b11d      	cbz	r5, 8000cde <__udivmoddi4+0xa6>
 8000cd6:	40d3      	lsrs	r3, r2
 8000cd8:	2200      	movs	r2, #0
 8000cda:	e9c5 3200 	strd	r3, r2, [r5]
 8000cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d905      	bls.n	8000cf2 <__udivmoddi4+0xba>
 8000ce6:	b10d      	cbz	r5, 8000cec <__udivmoddi4+0xb4>
 8000ce8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cec:	2100      	movs	r1, #0
 8000cee:	4608      	mov	r0, r1
 8000cf0:	e7f5      	b.n	8000cde <__udivmoddi4+0xa6>
 8000cf2:	fab3 f183 	clz	r1, r3
 8000cf6:	2900      	cmp	r1, #0
 8000cf8:	d146      	bne.n	8000d88 <__udivmoddi4+0x150>
 8000cfa:	42a3      	cmp	r3, r4
 8000cfc:	d302      	bcc.n	8000d04 <__udivmoddi4+0xcc>
 8000cfe:	4290      	cmp	r0, r2
 8000d00:	f0c0 80f0 	bcc.w	8000ee4 <__udivmoddi4+0x2ac>
 8000d04:	1a86      	subs	r6, r0, r2
 8000d06:	eb64 0303 	sbc.w	r3, r4, r3
 8000d0a:	2001      	movs	r0, #1
 8000d0c:	2d00      	cmp	r5, #0
 8000d0e:	d0e6      	beq.n	8000cde <__udivmoddi4+0xa6>
 8000d10:	e9c5 6300 	strd	r6, r3, [r5]
 8000d14:	e7e3      	b.n	8000cde <__udivmoddi4+0xa6>
 8000d16:	2a00      	cmp	r2, #0
 8000d18:	f040 8090 	bne.w	8000e3c <__udivmoddi4+0x204>
 8000d1c:	eba1 040c 	sub.w	r4, r1, ip
 8000d20:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d24:	fa1f f78c 	uxth.w	r7, ip
 8000d28:	2101      	movs	r1, #1
 8000d2a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d2e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d32:	fb08 4416 	mls	r4, r8, r6, r4
 8000d36:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d3a:	fb07 f006 	mul.w	r0, r7, r6
 8000d3e:	4298      	cmp	r0, r3
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x11c>
 8000d42:	eb1c 0303 	adds.w	r3, ip, r3
 8000d46:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x11a>
 8000d4c:	4298      	cmp	r0, r3
 8000d4e:	f200 80cd 	bhi.w	8000eec <__udivmoddi4+0x2b4>
 8000d52:	4626      	mov	r6, r4
 8000d54:	1a1c      	subs	r4, r3, r0
 8000d56:	fa1f f38e 	uxth.w	r3, lr
 8000d5a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d5e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d66:	fb00 f707 	mul.w	r7, r0, r7
 8000d6a:	429f      	cmp	r7, r3
 8000d6c:	d908      	bls.n	8000d80 <__udivmoddi4+0x148>
 8000d6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d72:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d76:	d202      	bcs.n	8000d7e <__udivmoddi4+0x146>
 8000d78:	429f      	cmp	r7, r3
 8000d7a:	f200 80b0 	bhi.w	8000ede <__udivmoddi4+0x2a6>
 8000d7e:	4620      	mov	r0, r4
 8000d80:	1bdb      	subs	r3, r3, r7
 8000d82:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d86:	e7a5      	b.n	8000cd4 <__udivmoddi4+0x9c>
 8000d88:	f1c1 0620 	rsb	r6, r1, #32
 8000d8c:	408b      	lsls	r3, r1
 8000d8e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d92:	431f      	orrs	r7, r3
 8000d94:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d98:	fa04 f301 	lsl.w	r3, r4, r1
 8000d9c:	ea43 030c 	orr.w	r3, r3, ip
 8000da0:	40f4      	lsrs	r4, r6
 8000da2:	fa00 f801 	lsl.w	r8, r0, r1
 8000da6:	0c38      	lsrs	r0, r7, #16
 8000da8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dac:	fbb4 fef0 	udiv	lr, r4, r0
 8000db0:	fa1f fc87 	uxth.w	ip, r7
 8000db4:	fb00 441e 	mls	r4, r0, lr, r4
 8000db8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dbc:	fb0e f90c 	mul.w	r9, lr, ip
 8000dc0:	45a1      	cmp	r9, r4
 8000dc2:	fa02 f201 	lsl.w	r2, r2, r1
 8000dc6:	d90a      	bls.n	8000dde <__udivmoddi4+0x1a6>
 8000dc8:	193c      	adds	r4, r7, r4
 8000dca:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dce:	f080 8084 	bcs.w	8000eda <__udivmoddi4+0x2a2>
 8000dd2:	45a1      	cmp	r9, r4
 8000dd4:	f240 8081 	bls.w	8000eda <__udivmoddi4+0x2a2>
 8000dd8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ddc:	443c      	add	r4, r7
 8000dde:	eba4 0409 	sub.w	r4, r4, r9
 8000de2:	fa1f f983 	uxth.w	r9, r3
 8000de6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dea:	fb00 4413 	mls	r4, r0, r3, r4
 8000dee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000df2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000df6:	45a4      	cmp	ip, r4
 8000df8:	d907      	bls.n	8000e0a <__udivmoddi4+0x1d2>
 8000dfa:	193c      	adds	r4, r7, r4
 8000dfc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e00:	d267      	bcs.n	8000ed2 <__udivmoddi4+0x29a>
 8000e02:	45a4      	cmp	ip, r4
 8000e04:	d965      	bls.n	8000ed2 <__udivmoddi4+0x29a>
 8000e06:	3b02      	subs	r3, #2
 8000e08:	443c      	add	r4, r7
 8000e0a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e0e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e12:	eba4 040c 	sub.w	r4, r4, ip
 8000e16:	429c      	cmp	r4, r3
 8000e18:	46ce      	mov	lr, r9
 8000e1a:	469c      	mov	ip, r3
 8000e1c:	d351      	bcc.n	8000ec2 <__udivmoddi4+0x28a>
 8000e1e:	d04e      	beq.n	8000ebe <__udivmoddi4+0x286>
 8000e20:	b155      	cbz	r5, 8000e38 <__udivmoddi4+0x200>
 8000e22:	ebb8 030e 	subs.w	r3, r8, lr
 8000e26:	eb64 040c 	sbc.w	r4, r4, ip
 8000e2a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e2e:	40cb      	lsrs	r3, r1
 8000e30:	431e      	orrs	r6, r3
 8000e32:	40cc      	lsrs	r4, r1
 8000e34:	e9c5 6400 	strd	r6, r4, [r5]
 8000e38:	2100      	movs	r1, #0
 8000e3a:	e750      	b.n	8000cde <__udivmoddi4+0xa6>
 8000e3c:	f1c2 0320 	rsb	r3, r2, #32
 8000e40:	fa20 f103 	lsr.w	r1, r0, r3
 8000e44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e48:	fa24 f303 	lsr.w	r3, r4, r3
 8000e4c:	4094      	lsls	r4, r2
 8000e4e:	430c      	orrs	r4, r1
 8000e50:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e54:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e58:	fa1f f78c 	uxth.w	r7, ip
 8000e5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e60:	fb08 3110 	mls	r1, r8, r0, r3
 8000e64:	0c23      	lsrs	r3, r4, #16
 8000e66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e6a:	fb00 f107 	mul.w	r1, r0, r7
 8000e6e:	4299      	cmp	r1, r3
 8000e70:	d908      	bls.n	8000e84 <__udivmoddi4+0x24c>
 8000e72:	eb1c 0303 	adds.w	r3, ip, r3
 8000e76:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e7a:	d22c      	bcs.n	8000ed6 <__udivmoddi4+0x29e>
 8000e7c:	4299      	cmp	r1, r3
 8000e7e:	d92a      	bls.n	8000ed6 <__udivmoddi4+0x29e>
 8000e80:	3802      	subs	r0, #2
 8000e82:	4463      	add	r3, ip
 8000e84:	1a5b      	subs	r3, r3, r1
 8000e86:	b2a4      	uxth	r4, r4
 8000e88:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e8c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e94:	fb01 f307 	mul.w	r3, r1, r7
 8000e98:	42a3      	cmp	r3, r4
 8000e9a:	d908      	bls.n	8000eae <__udivmoddi4+0x276>
 8000e9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ea4:	d213      	bcs.n	8000ece <__udivmoddi4+0x296>
 8000ea6:	42a3      	cmp	r3, r4
 8000ea8:	d911      	bls.n	8000ece <__udivmoddi4+0x296>
 8000eaa:	3902      	subs	r1, #2
 8000eac:	4464      	add	r4, ip
 8000eae:	1ae4      	subs	r4, r4, r3
 8000eb0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000eb4:	e739      	b.n	8000d2a <__udivmoddi4+0xf2>
 8000eb6:	4604      	mov	r4, r0
 8000eb8:	e6f0      	b.n	8000c9c <__udivmoddi4+0x64>
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e706      	b.n	8000ccc <__udivmoddi4+0x94>
 8000ebe:	45c8      	cmp	r8, r9
 8000ec0:	d2ae      	bcs.n	8000e20 <__udivmoddi4+0x1e8>
 8000ec2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ec6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eca:	3801      	subs	r0, #1
 8000ecc:	e7a8      	b.n	8000e20 <__udivmoddi4+0x1e8>
 8000ece:	4631      	mov	r1, r6
 8000ed0:	e7ed      	b.n	8000eae <__udivmoddi4+0x276>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	e799      	b.n	8000e0a <__udivmoddi4+0x1d2>
 8000ed6:	4630      	mov	r0, r6
 8000ed8:	e7d4      	b.n	8000e84 <__udivmoddi4+0x24c>
 8000eda:	46d6      	mov	lr, sl
 8000edc:	e77f      	b.n	8000dde <__udivmoddi4+0x1a6>
 8000ede:	4463      	add	r3, ip
 8000ee0:	3802      	subs	r0, #2
 8000ee2:	e74d      	b.n	8000d80 <__udivmoddi4+0x148>
 8000ee4:	4606      	mov	r6, r0
 8000ee6:	4623      	mov	r3, r4
 8000ee8:	4608      	mov	r0, r1
 8000eea:	e70f      	b.n	8000d0c <__udivmoddi4+0xd4>
 8000eec:	3e02      	subs	r6, #2
 8000eee:	4463      	add	r3, ip
 8000ef0:	e730      	b.n	8000d54 <__udivmoddi4+0x11c>
 8000ef2:	bf00      	nop

08000ef4 <__aeabi_idiv0>:
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop

08000ef8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000efe:	f001 fbd9 	bl	80026b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f02:	f000 fc9b 	bl	800183c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f06:	f000 fe61 	bl	8001bcc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f0a:	f000 fe35 	bl	8001b78 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000f0e:	f000 fd39 	bl	8001984 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000f12:	f000 fddf 	bl	8001ad4 <MX_TIM2_Init>
  MX_SPI1_Init();
 8000f16:	f000 fcff 	bl	8001918 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  	 MFRC522_Init();
 8000f1a:	f000 ffc1 	bl	8001ea0 <MFRC522_Init>
	 HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000f1e:	2100      	movs	r1, #0
 8000f20:	4844      	ldr	r0, [pc, #272]	@ (8001034 <main+0x13c>)
 8000f22:	f003 f915 	bl	8004150 <HAL_TIM_PWM_Start>
	 HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000f26:	2104      	movs	r1, #4
 8000f28:	4842      	ldr	r0, [pc, #264]	@ (8001034 <main+0x13c>)
 8000f2a:	f003 f911 	bl	8004150 <HAL_TIM_PWM_Start>
	 HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000f2e:	2108      	movs	r1, #8
 8000f30:	4840      	ldr	r0, [pc, #256]	@ (8001034 <main+0x13c>)
 8000f32:	f003 f90d 	bl	8004150 <HAL_TIM_PWM_Start>
	 HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000f36:	210c      	movs	r1, #12
 8000f38:	483e      	ldr	r0, [pc, #248]	@ (8001034 <main+0x13c>)
 8000f3a:	f003 f909 	bl	8004150 <HAL_TIM_PWM_Start>
	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8000f3e:	2201      	movs	r2, #1
 8000f40:	2110      	movs	r1, #16
 8000f42:	483d      	ldr	r0, [pc, #244]	@ (8001038 <main+0x140>)
 8000f44:	f001 ff9c 	bl	8002e80 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8000f48:	2201      	movs	r2, #1
 8000f4a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f4e:	483a      	ldr	r0, [pc, #232]	@ (8001038 <main+0x140>)
 8000f50:	f001 ff96 	bl	8002e80 <HAL_GPIO_WritePin>
		TIM1->CCR1 = 0;
 8000f54:	4b39      	ldr	r3, [pc, #228]	@ (800103c <main+0x144>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM1->CCR2 = 0;
 8000f5a:	4b38      	ldr	r3, [pc, #224]	@ (800103c <main+0x144>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM1->CCR3 = 0;
 8000f60:	4b36      	ldr	r3, [pc, #216]	@ (800103c <main+0x144>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM1->CCR4 = 0;
 8000f66:	4b35      	ldr	r3, [pc, #212]	@ (800103c <main+0x144>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	641a      	str	r2, [r3, #64]	@ 0x40
	 HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	4834      	ldr	r0, [pc, #208]	@ (8001040 <main+0x148>)
 8000f70:	f003 fa06 	bl	8004380 <HAL_TIM_IC_Start_IT>
	 HAL_UART_Receive_IT(&huart2, temp, 1);
 8000f74:	2201      	movs	r2, #1
 8000f76:	4933      	ldr	r1, [pc, #204]	@ (8001044 <main+0x14c>)
 8000f78:	4833      	ldr	r0, [pc, #204]	@ (8001048 <main+0x150>)
 8000f7a:	f004 fb4c 	bl	8005616 <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 position_signal();
 8000f7e:	f000 f969 	bl	8001254 <position_signal>

	 HC_SRF05_Read();
 8000f82:	f000 f9d3 	bl	800132c <HC_SRF05_Read>
	 HAL_Delay(5);
 8000f86:	2005      	movs	r0, #5
 8000f88:	f001 fc06 	bl	8002798 <HAL_Delay>
	 if (stop_obstacle == 1) {
 8000f8c:	4b2f      	ldr	r3, [pc, #188]	@ (800104c <main+0x154>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d106      	bne.n	8000fa2 <main+0xaa>
		 Stop();
 8000f94:	f000 fc2e 	bl	80017f4 <Stop>
		 obstacle_stop();
 8000f98:	f000 f9ee 	bl	8001378 <obstacle_stop>
		 real_speed = 0;
 8000f9c:	4b2c      	ldr	r3, [pc, #176]	@ (8001050 <main+0x158>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	701a      	strb	r2, [r3, #0]
	 }
	 if (stop_command == 1) {
 8000fa2:	4b2c      	ldr	r3, [pc, #176]	@ (8001054 <main+0x15c>)
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d104      	bne.n	8000fb4 <main+0xbc>
		 Stop();
 8000faa:	f000 fc23 	bl	80017f4 <Stop>
		 real_speed = 0;
 8000fae:	4b28      	ldr	r3, [pc, #160]	@ (8001050 <main+0x158>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	701a      	strb	r2, [r3, #0]
	 }
	 if(stop_command != 1 && stop_obstacle != 1) {
 8000fb4:	4b27      	ldr	r3, [pc, #156]	@ (8001054 <main+0x15c>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d01c      	beq.n	8000ff6 <main+0xfe>
 8000fbc:	4b23      	ldr	r3, [pc, #140]	@ (800104c <main+0x154>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d018      	beq.n	8000ff6 <main+0xfe>
		 initial_speed = 300;
 8000fc4:	4b24      	ldr	r3, [pc, #144]	@ (8001058 <main+0x160>)
 8000fc6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000fca:	801a      	strh	r2, [r3, #0]
		 real_speed = 60;
 8000fcc:	4b20      	ldr	r3, [pc, #128]	@ (8001050 <main+0x158>)
 8000fce:	223c      	movs	r2, #60	@ 0x3c
 8000fd0:	701a      	strb	r2, [r3, #0]
		 sensor_value = read_sensorvalue();
 8000fd2:	f000 f9f5 	bl	80013c0 <read_sensorvalue>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	461a      	mov	r2, r3
 8000fda:	4b20      	ldr	r3, [pc, #128]	@ (800105c <main+0x164>)
 8000fdc:	701a      	strb	r2, [r3, #0]
		 error();
 8000fde:	f000 fa3b 	bl	8001458 <error>
		 line_follower();
 8000fe2:	f000 fad5 	bl	8001590 <line_follower>
		 running_time();
 8000fe6:	f000 fc1b 	bl	8001820 <running_time>
		 if (location == 3) {
 8000fea:	4b1d      	ldr	r3, [pc, #116]	@ (8001060 <main+0x168>)
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	2b03      	cmp	r3, #3
 8000ff0:	d101      	bne.n	8000ff6 <main+0xfe>
			 Stop();
 8000ff2:	f000 fbff 	bl	80017f4 <Stop>
		 }
	 }
	 sprintf(transmitting_data,"%d / %d / %d / %d\r\n", location, real_speed, obstacle, time_run);
 8000ff6:	4b1a      	ldr	r3, [pc, #104]	@ (8001060 <main+0x168>)
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4b14      	ldr	r3, [pc, #80]	@ (8001050 <main+0x158>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	4618      	mov	r0, r3
 8001002:	4b18      	ldr	r3, [pc, #96]	@ (8001064 <main+0x16c>)
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	461a      	mov	r2, r3
 8001008:	4b17      	ldr	r3, [pc, #92]	@ (8001068 <main+0x170>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	9301      	str	r3, [sp, #4]
 800100e:	9200      	str	r2, [sp, #0]
 8001010:	4603      	mov	r3, r0
 8001012:	460a      	mov	r2, r1
 8001014:	4915      	ldr	r1, [pc, #84]	@ (800106c <main+0x174>)
 8001016:	4816      	ldr	r0, [pc, #88]	@ (8001070 <main+0x178>)
 8001018:	f005 ff92 	bl	8006f40 <siprintf>
	 HAL_UART_Transmit(&huart2, (uint8_t *)transmitting_data, strlen(transmitting_data), HAL_MAX_DELAY);
 800101c:	4814      	ldr	r0, [pc, #80]	@ (8001070 <main+0x178>)
 800101e:	f7ff f957 	bl	80002d0 <strlen>
 8001022:	4603      	mov	r3, r0
 8001024:	b29a      	uxth	r2, r3
 8001026:	f04f 33ff 	mov.w	r3, #4294967295
 800102a:	4911      	ldr	r1, [pc, #68]	@ (8001070 <main+0x178>)
 800102c:	4806      	ldr	r0, [pc, #24]	@ (8001048 <main+0x150>)
 800102e:	f004 fa67 	bl	8005500 <HAL_UART_Transmit>
	 position_signal();
 8001032:	e7a4      	b.n	8000f7e <main+0x86>
 8001034:	2000024c 	.word	0x2000024c
 8001038:	40020400 	.word	0x40020400
 800103c:	40010000 	.word	0x40010000
 8001040:	20000294 	.word	0x20000294
 8001044:	200003d4 	.word	0x200003d4
 8001048:	200002dc 	.word	0x200002dc
 800104c:	20000363 	.word	0x20000363
 8001050:	20000362 	.word	0x20000362
 8001054:	20000366 	.word	0x20000366
 8001058:	20000360 	.word	0x20000360
 800105c:	2000035d 	.word	0x2000035d
 8001060:	20000365 	.word	0x20000365
 8001064:	20000364 	.word	0x20000364
 8001068:	20000368 	.word	0x20000368
 800106c:	080091b0 	.word	0x080091b0
 8001070:	2000036c 	.word	0x2000036c
 8001074:	00000000 	.word	0x00000000

08001078 <HAL_TIM_IC_CaptureCallback>:
  }

}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	7f1b      	ldrb	r3, [r3, #28]
 8001084:	2b01      	cmp	r3, #1
 8001086:	d15d      	bne.n	8001144 <HAL_TIM_IC_CaptureCallback+0xcc>
		if (capture_order == 0) {
 8001088:	4b33      	ldr	r3, [pc, #204]	@ (8001158 <HAL_TIM_IC_CaptureCallback+0xe0>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d10a      	bne.n	80010a6 <HAL_TIM_IC_CaptureCallback+0x2e>
			input_capture[0] = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001090:	2100      	movs	r1, #0
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f003 fcea 	bl	8004a6c <HAL_TIM_ReadCapturedValue>
 8001098:	4603      	mov	r3, r0
 800109a:	4a30      	ldr	r2, [pc, #192]	@ (800115c <HAL_TIM_IC_CaptureCallback+0xe4>)
 800109c:	6013      	str	r3, [r2, #0]
			capture_order = 1;
 800109e:	4b2e      	ldr	r3, [pc, #184]	@ (8001158 <HAL_TIM_IC_CaptureCallback+0xe0>)
 80010a0:	2201      	movs	r2, #1
 80010a2:	701a      	strb	r2, [r3, #0]
			capture_order = 0;

			__HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC1);
		}
	}
}
 80010a4:	e04e      	b.n	8001144 <HAL_TIM_IC_CaptureCallback+0xcc>
		else if (capture_order == 1) {
 80010a6:	4b2c      	ldr	r3, [pc, #176]	@ (8001158 <HAL_TIM_IC_CaptureCallback+0xe0>)
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d14a      	bne.n	8001144 <HAL_TIM_IC_CaptureCallback+0xcc>
			input_capture[1] = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80010ae:	2100      	movs	r1, #0
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f003 fcdb 	bl	8004a6c <HAL_TIM_ReadCapturedValue>
 80010b6:	4603      	mov	r3, r0
 80010b8:	4a28      	ldr	r2, [pc, #160]	@ (800115c <HAL_TIM_IC_CaptureCallback+0xe4>)
 80010ba:	6053      	str	r3, [r2, #4]
			__HAL_TIM_SET_COUNTER(htim, 0);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2200      	movs	r2, #0
 80010c2:	625a      	str	r2, [r3, #36]	@ 0x24
			if (input_capture[1] > input_capture[0]) {
 80010c4:	4b25      	ldr	r3, [pc, #148]	@ (800115c <HAL_TIM_IC_CaptureCallback+0xe4>)
 80010c6:	685a      	ldr	r2, [r3, #4]
 80010c8:	4b24      	ldr	r3, [pc, #144]	@ (800115c <HAL_TIM_IC_CaptureCallback+0xe4>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d907      	bls.n	80010e0 <HAL_TIM_IC_CaptureCallback+0x68>
						  time_differ = input_capture[1] - input_capture[0];
 80010d0:	4b22      	ldr	r3, [pc, #136]	@ (800115c <HAL_TIM_IC_CaptureCallback+0xe4>)
 80010d2:	685a      	ldr	r2, [r3, #4]
 80010d4:	4b21      	ldr	r3, [pc, #132]	@ (800115c <HAL_TIM_IC_CaptureCallback+0xe4>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	4a21      	ldr	r2, [pc, #132]	@ (8001160 <HAL_TIM_IC_CaptureCallback+0xe8>)
 80010dc:	6013      	str	r3, [r2, #0]
 80010de:	e00d      	b.n	80010fc <HAL_TIM_IC_CaptureCallback+0x84>
			else if (input_capture[1] < input_capture[0]) {
 80010e0:	4b1e      	ldr	r3, [pc, #120]	@ (800115c <HAL_TIM_IC_CaptureCallback+0xe4>)
 80010e2:	685a      	ldr	r2, [r3, #4]
 80010e4:	4b1d      	ldr	r3, [pc, #116]	@ (800115c <HAL_TIM_IC_CaptureCallback+0xe4>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d207      	bcs.n	80010fc <HAL_TIM_IC_CaptureCallback+0x84>
						  time_differ = (0xFFFFFFFF - input_capture[0]) + input_capture[1];
 80010ec:	4b1b      	ldr	r3, [pc, #108]	@ (800115c <HAL_TIM_IC_CaptureCallback+0xe4>)
 80010ee:	685a      	ldr	r2, [r3, #4]
 80010f0:	4b1a      	ldr	r3, [pc, #104]	@ (800115c <HAL_TIM_IC_CaptureCallback+0xe4>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	3b01      	subs	r3, #1
 80010f8:	4a19      	ldr	r2, [pc, #100]	@ (8001160 <HAL_TIM_IC_CaptureCallback+0xe8>)
 80010fa:	6013      	str	r3, [r2, #0]
			distance = (time_differ * 0.034)/2;
 80010fc:	4b18      	ldr	r3, [pc, #96]	@ (8001160 <HAL_TIM_IC_CaptureCallback+0xe8>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff fa2f 	bl	8000564 <__aeabi_ui2d>
 8001106:	a312      	add	r3, pc, #72	@ (adr r3, 8001150 <HAL_TIM_IC_CaptureCallback+0xd8>)
 8001108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800110c:	f7ff faa4 	bl	8000658 <__aeabi_dmul>
 8001110:	4602      	mov	r2, r0
 8001112:	460b      	mov	r3, r1
 8001114:	4610      	mov	r0, r2
 8001116:	4619      	mov	r1, r3
 8001118:	f04f 0200 	mov.w	r2, #0
 800111c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001120:	f7ff fbc4 	bl	80008ac <__aeabi_ddiv>
 8001124:	4602      	mov	r2, r0
 8001126:	460b      	mov	r3, r1
 8001128:	490e      	ldr	r1, [pc, #56]	@ (8001164 <HAL_TIM_IC_CaptureCallback+0xec>)
 800112a:	e9c1 2300 	strd	r2, r3, [r1]
			capture_order = 0;
 800112e:	4b0a      	ldr	r3, [pc, #40]	@ (8001158 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8001130:	2200      	movs	r2, #0
 8001132:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC1);
 8001134:	4b0c      	ldr	r3, [pc, #48]	@ (8001168 <HAL_TIM_IC_CaptureCallback+0xf0>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	68da      	ldr	r2, [r3, #12]
 800113a:	4b0b      	ldr	r3, [pc, #44]	@ (8001168 <HAL_TIM_IC_CaptureCallback+0xf0>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f022 0202 	bic.w	r2, r2, #2
 8001142:	60da      	str	r2, [r3, #12]
}
 8001144:	bf00      	nop
 8001146:	3708      	adds	r7, #8
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	f3af 8000 	nop.w
 8001150:	b020c49c 	.word	0xb020c49c
 8001154:	3fa16872 	.word	0x3fa16872
 8001158:	2000033d 	.word	0x2000033d
 800115c:	20000340 	.word	0x20000340
 8001160:	20000348 	.word	0x20000348
 8001164:	20000350 	.word	0x20000350
 8001168:	20000294 	.word	0x20000294

0800116c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a2b      	ldr	r2, [pc, #172]	@ (8001228 <HAL_UART_RxCpltCallback+0xbc>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d14f      	bne.n	800121e <HAL_UART_RxCpltCallback+0xb2>
		if (temp[0] != '\n') {
 800117e:	4b2b      	ldr	r3, [pc, #172]	@ (800122c <HAL_UART_RxCpltCallback+0xc0>)
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	2b0a      	cmp	r3, #10
 8001184:	d008      	beq.n	8001198 <HAL_UART_RxCpltCallback+0x2c>
			memcpy(RxData+indx, temp, 1);
 8001186:	4b2a      	ldr	r3, [pc, #168]	@ (8001230 <HAL_UART_RxCpltCallback+0xc4>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	461a      	mov	r2, r3
 800118c:	4b29      	ldr	r3, [pc, #164]	@ (8001234 <HAL_UART_RxCpltCallback+0xc8>)
 800118e:	4413      	add	r3, r2
 8001190:	4a26      	ldr	r2, [pc, #152]	@ (800122c <HAL_UART_RxCpltCallback+0xc0>)
 8001192:	7812      	ldrb	r2, [r2, #0]
 8001194:	701a      	strb	r2, [r3, #0]
 8001196:	e031      	b.n	80011fc <HAL_UART_RxCpltCallback+0x90>
		}
		else if (temp[0] == '\n') {
 8001198:	4b24      	ldr	r3, [pc, #144]	@ (800122c <HAL_UART_RxCpltCallback+0xc0>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	2b0a      	cmp	r3, #10
 800119e:	d12d      	bne.n	80011fc <HAL_UART_RxCpltCallback+0x90>
			if (strcmp(RxData, "STOP") == 0){
 80011a0:	4925      	ldr	r1, [pc, #148]	@ (8001238 <HAL_UART_RxCpltCallback+0xcc>)
 80011a2:	4824      	ldr	r0, [pc, #144]	@ (8001234 <HAL_UART_RxCpltCallback+0xc8>)
 80011a4:	f7ff f834 	bl	8000210 <strcmp>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d106      	bne.n	80011bc <HAL_UART_RxCpltCallback+0x50>
				stop_command = 1;
 80011ae:	4b23      	ldr	r3, [pc, #140]	@ (800123c <HAL_UART_RxCpltCallback+0xd0>)
 80011b0:	2201      	movs	r2, #1
 80011b2:	701a      	strb	r2, [r3, #0]
				AGV_navigation = 0b0000;
 80011b4:	4b22      	ldr	r3, [pc, #136]	@ (8001240 <HAL_UART_RxCpltCallback+0xd4>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	701a      	strb	r2, [r3, #0]
 80011ba:	e01f      	b.n	80011fc <HAL_UART_RxCpltCallback+0x90>
			}
			else if (strcmp(RxData, "GO STRAIGHT") == 0) {
 80011bc:	4921      	ldr	r1, [pc, #132]	@ (8001244 <HAL_UART_RxCpltCallback+0xd8>)
 80011be:	481d      	ldr	r0, [pc, #116]	@ (8001234 <HAL_UART_RxCpltCallback+0xc8>)
 80011c0:	f7ff f826 	bl	8000210 <strcmp>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d103      	bne.n	80011d2 <HAL_UART_RxCpltCallback+0x66>
				AGV_navigation = 0b0011;
 80011ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001240 <HAL_UART_RxCpltCallback+0xd4>)
 80011cc:	2203      	movs	r2, #3
 80011ce:	701a      	strb	r2, [r3, #0]
 80011d0:	e014      	b.n	80011fc <HAL_UART_RxCpltCallback+0x90>
			}
			else if (strcmp(RxData, "TURN LEFT") == 0) {
 80011d2:	491d      	ldr	r1, [pc, #116]	@ (8001248 <HAL_UART_RxCpltCallback+0xdc>)
 80011d4:	4817      	ldr	r0, [pc, #92]	@ (8001234 <HAL_UART_RxCpltCallback+0xc8>)
 80011d6:	f7ff f81b 	bl	8000210 <strcmp>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d103      	bne.n	80011e8 <HAL_UART_RxCpltCallback+0x7c>
				AGV_navigation = 0b0001;
 80011e0:	4b17      	ldr	r3, [pc, #92]	@ (8001240 <HAL_UART_RxCpltCallback+0xd4>)
 80011e2:	2201      	movs	r2, #1
 80011e4:	701a      	strb	r2, [r3, #0]
 80011e6:	e009      	b.n	80011fc <HAL_UART_RxCpltCallback+0x90>
			}
			else if(strcmp(RxData, "TURN RIGHT") == 0) {
 80011e8:	4918      	ldr	r1, [pc, #96]	@ (800124c <HAL_UART_RxCpltCallback+0xe0>)
 80011ea:	4812      	ldr	r0, [pc, #72]	@ (8001234 <HAL_UART_RxCpltCallback+0xc8>)
 80011ec:	f7ff f810 	bl	8000210 <strcmp>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d102      	bne.n	80011fc <HAL_UART_RxCpltCallback+0x90>
				AGV_navigation = 0b0010;
 80011f6:	4b12      	ldr	r3, [pc, #72]	@ (8001240 <HAL_UART_RxCpltCallback+0xd4>)
 80011f8:	2202      	movs	r2, #2
 80011fa:	701a      	strb	r2, [r3, #0]
			}
		}
		if (++indx >= 20) indx = 0;
 80011fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001230 <HAL_UART_RxCpltCallback+0xc4>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	3301      	adds	r3, #1
 8001202:	4a0b      	ldr	r2, [pc, #44]	@ (8001230 <HAL_UART_RxCpltCallback+0xc4>)
 8001204:	6013      	str	r3, [r2, #0]
 8001206:	4b0a      	ldr	r3, [pc, #40]	@ (8001230 <HAL_UART_RxCpltCallback+0xc4>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	2b13      	cmp	r3, #19
 800120c:	dd02      	ble.n	8001214 <HAL_UART_RxCpltCallback+0xa8>
 800120e:	4b08      	ldr	r3, [pc, #32]	@ (8001230 <HAL_UART_RxCpltCallback+0xc4>)
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, temp, 1);
 8001214:	2201      	movs	r2, #1
 8001216:	4905      	ldr	r1, [pc, #20]	@ (800122c <HAL_UART_RxCpltCallback+0xc0>)
 8001218:	480d      	ldr	r0, [pc, #52]	@ (8001250 <HAL_UART_RxCpltCallback+0xe4>)
 800121a:	f004 f9fc 	bl	8005616 <HAL_UART_Receive_IT>
	}
}
 800121e:	bf00      	nop
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40004400 	.word	0x40004400
 800122c:	200003d4 	.word	0x200003d4
 8001230:	200003d8 	.word	0x200003d8
 8001234:	200003a0 	.word	0x200003a0
 8001238:	080091c4 	.word	0x080091c4
 800123c:	20000366 	.word	0x20000366
 8001240:	20000367 	.word	0x20000367
 8001244:	080091cc 	.word	0x080091cc
 8001248:	080091d8 	.word	0x080091d8
 800124c:	080091e4 	.word	0x080091e4
 8001250:	200002dc 	.word	0x200002dc

08001254 <position_signal>:

void position_signal(){
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
	  status = MFRC522_Request(PICC_REQIDL, str);
 8001258:	4923      	ldr	r1, [pc, #140]	@ (80012e8 <position_signal+0x94>)
 800125a:	2026      	movs	r0, #38	@ 0x26
 800125c:	f000 ff17 	bl	800208e <MFRC522_Request>
 8001260:	4603      	mov	r3, r0
 8001262:	461a      	mov	r2, r3
 8001264:	4b21      	ldr	r3, [pc, #132]	@ (80012ec <position_signal+0x98>)
 8001266:	701a      	strb	r2, [r3, #0]
	  status = MFRC522_Anticoll(str);
 8001268:	481f      	ldr	r0, [pc, #124]	@ (80012e8 <position_signal+0x94>)
 800126a:	f000 ff35 	bl	80020d8 <MFRC522_Anticoll>
 800126e:	4603      	mov	r3, r0
 8001270:	461a      	mov	r2, r3
 8001272:	4b1e      	ldr	r3, [pc, #120]	@ (80012ec <position_signal+0x98>)
 8001274:	701a      	strb	r2, [r3, #0]
	  memcpy(sNum, str, 5);
 8001276:	4b1e      	ldr	r3, [pc, #120]	@ (80012f0 <position_signal+0x9c>)
 8001278:	4a1b      	ldr	r2, [pc, #108]	@ (80012e8 <position_signal+0x94>)
 800127a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800127e:	6018      	str	r0, [r3, #0]
 8001280:	3304      	adds	r3, #4
 8001282:	7019      	strb	r1, [r3, #0]
//		  HAL_Delay(100);
	   if((str[2]==117) && (str[3]==22) && (str[4]==159) )
 8001284:	4b18      	ldr	r3, [pc, #96]	@ (80012e8 <position_signal+0x94>)
 8001286:	789b      	ldrb	r3, [r3, #2]
 8001288:	2b75      	cmp	r3, #117	@ 0x75
 800128a:	d10b      	bne.n	80012a4 <position_signal+0x50>
 800128c:	4b16      	ldr	r3, [pc, #88]	@ (80012e8 <position_signal+0x94>)
 800128e:	78db      	ldrb	r3, [r3, #3]
 8001290:	2b16      	cmp	r3, #22
 8001292:	d107      	bne.n	80012a4 <position_signal+0x50>
 8001294:	4b14      	ldr	r3, [pc, #80]	@ (80012e8 <position_signal+0x94>)
 8001296:	791b      	ldrb	r3, [r3, #4]
 8001298:	2b9f      	cmp	r3, #159	@ 0x9f
 800129a:	d103      	bne.n	80012a4 <position_signal+0x50>
	   {
		   location = 1;
 800129c:	4b15      	ldr	r3, [pc, #84]	@ (80012f4 <position_signal+0xa0>)
 800129e:	2201      	movs	r2, #1
 80012a0:	701a      	strb	r2, [r3, #0]
 80012a2:	e01f      	b.n	80012e4 <position_signal+0x90>
	   }
	   else if((str[2]==179) && (str[3]==115) && (str[4]==149))
 80012a4:	4b10      	ldr	r3, [pc, #64]	@ (80012e8 <position_signal+0x94>)
 80012a6:	789b      	ldrb	r3, [r3, #2]
 80012a8:	2bb3      	cmp	r3, #179	@ 0xb3
 80012aa:	d10b      	bne.n	80012c4 <position_signal+0x70>
 80012ac:	4b0e      	ldr	r3, [pc, #56]	@ (80012e8 <position_signal+0x94>)
 80012ae:	78db      	ldrb	r3, [r3, #3]
 80012b0:	2b73      	cmp	r3, #115	@ 0x73
 80012b2:	d107      	bne.n	80012c4 <position_signal+0x70>
 80012b4:	4b0c      	ldr	r3, [pc, #48]	@ (80012e8 <position_signal+0x94>)
 80012b6:	791b      	ldrb	r3, [r3, #4]
 80012b8:	2b95      	cmp	r3, #149	@ 0x95
 80012ba:	d103      	bne.n	80012c4 <position_signal+0x70>
	   {
		   location = 2;
 80012bc:	4b0d      	ldr	r3, [pc, #52]	@ (80012f4 <position_signal+0xa0>)
 80012be:	2202      	movs	r2, #2
 80012c0:	701a      	strb	r2, [r3, #0]
 80012c2:	e00f      	b.n	80012e4 <position_signal+0x90>
	   }
	   else if ((str[2]==87) && (str[3]==116) && (str[4]==99))
 80012c4:	4b08      	ldr	r3, [pc, #32]	@ (80012e8 <position_signal+0x94>)
 80012c6:	789b      	ldrb	r3, [r3, #2]
 80012c8:	2b57      	cmp	r3, #87	@ 0x57
 80012ca:	d10b      	bne.n	80012e4 <position_signal+0x90>
 80012cc:	4b06      	ldr	r3, [pc, #24]	@ (80012e8 <position_signal+0x94>)
 80012ce:	78db      	ldrb	r3, [r3, #3]
 80012d0:	2b74      	cmp	r3, #116	@ 0x74
 80012d2:	d107      	bne.n	80012e4 <position_signal+0x90>
 80012d4:	4b04      	ldr	r3, [pc, #16]	@ (80012e8 <position_signal+0x94>)
 80012d6:	791b      	ldrb	r3, [r3, #4]
 80012d8:	2b63      	cmp	r3, #99	@ 0x63
 80012da:	d103      	bne.n	80012e4 <position_signal+0x90>
	   {
		   location = 3;
 80012dc:	4b05      	ldr	r3, [pc, #20]	@ (80012f4 <position_signal+0xa0>)
 80012de:	2203      	movs	r2, #3
 80012e0:	701a      	strb	r2, [r3, #0]
	   }
}
 80012e2:	e7ff      	b.n	80012e4 <position_signal+0x90>
 80012e4:	bf00      	nop
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	20000328 	.word	0x20000328
 80012ec:	20000324 	.word	0x20000324
 80012f0:	20000338 	.word	0x20000338
 80012f4:	20000365 	.word	0x20000365

080012f8 <Delay>:

void Delay(uint16_t time)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 8001302:	4b09      	ldr	r3, [pc, #36]	@ (8001328 <Delay+0x30>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2200      	movs	r2, #0
 8001308:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < time);
 800130a:	bf00      	nop
 800130c:	4b06      	ldr	r3, [pc, #24]	@ (8001328 <Delay+0x30>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001312:	88fb      	ldrh	r3, [r7, #6]
 8001314:	429a      	cmp	r2, r3
 8001316:	d3f9      	bcc.n	800130c <Delay+0x14>
}
 8001318:	bf00      	nop
 800131a:	bf00      	nop
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	20000294 	.word	0x20000294

0800132c <HC_SRF05_Read>:

void HC_SRF05_Read()
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001330:	2200      	movs	r2, #0
 8001332:	2102      	movs	r1, #2
 8001334:	480e      	ldr	r0, [pc, #56]	@ (8001370 <HC_SRF05_Read+0x44>)
 8001336:	f001 fda3 	bl	8002e80 <HAL_GPIO_WritePin>
	Delay(3);
 800133a:	2003      	movs	r0, #3
 800133c:	f7ff ffdc 	bl	80012f8 <Delay>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8001340:	2201      	movs	r2, #1
 8001342:	2102      	movs	r1, #2
 8001344:	480a      	ldr	r0, [pc, #40]	@ (8001370 <HC_SRF05_Read+0x44>)
 8001346:	f001 fd9b 	bl	8002e80 <HAL_GPIO_WritePin>
	Delay(10);
 800134a:	200a      	movs	r0, #10
 800134c:	f7ff ffd4 	bl	80012f8 <Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001350:	2200      	movs	r2, #0
 8001352:	2102      	movs	r1, #2
 8001354:	4806      	ldr	r0, [pc, #24]	@ (8001370 <HC_SRF05_Read+0x44>)
 8001356:	f001 fd93 	bl	8002e80 <HAL_GPIO_WritePin>
	__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_CC1);
 800135a:	4b06      	ldr	r3, [pc, #24]	@ (8001374 <HC_SRF05_Read+0x48>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	68da      	ldr	r2, [r3, #12]
 8001360:	4b04      	ldr	r3, [pc, #16]	@ (8001374 <HC_SRF05_Read+0x48>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f042 0202 	orr.w	r2, r2, #2
 8001368:	60da      	str	r2, [r3, #12]
}
 800136a:	bf00      	nop
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	40020000 	.word	0x40020000
 8001374:	20000294 	.word	0x20000294

08001378 <obstacle_stop>:

void obstacle_stop() {
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
	if(distance < 15){
 800137c:	4b0c      	ldr	r3, [pc, #48]	@ (80013b0 <obstacle_stop+0x38>)
 800137e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001382:	f04f 0200 	mov.w	r2, #0
 8001386:	4b0b      	ldr	r3, [pc, #44]	@ (80013b4 <obstacle_stop+0x3c>)
 8001388:	f7ff fbd8 	bl	8000b3c <__aeabi_dcmplt>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d006      	beq.n	80013a0 <obstacle_stop+0x28>
		stop_obstacle = 1;
 8001392:	4b09      	ldr	r3, [pc, #36]	@ (80013b8 <obstacle_stop+0x40>)
 8001394:	2201      	movs	r2, #1
 8001396:	701a      	strb	r2, [r3, #0]
		obstacle = 1;
 8001398:	4b08      	ldr	r3, [pc, #32]	@ (80013bc <obstacle_stop+0x44>)
 800139a:	2201      	movs	r2, #1
 800139c:	701a      	strb	r2, [r3, #0]
	{
		stop_obstacle = 0;
		obstacle = 0;
		//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
	}
}
 800139e:	e005      	b.n	80013ac <obstacle_stop+0x34>
		stop_obstacle = 0;
 80013a0:	4b05      	ldr	r3, [pc, #20]	@ (80013b8 <obstacle_stop+0x40>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	701a      	strb	r2, [r3, #0]
		obstacle = 0;
 80013a6:	4b05      	ldr	r3, [pc, #20]	@ (80013bc <obstacle_stop+0x44>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	701a      	strb	r2, [r3, #0]
}
 80013ac:	bf00      	nop
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	20000350 	.word	0x20000350
 80013b4:	402e0000 	.word	0x402e0000
 80013b8:	20000363 	.word	0x20000363
 80013bc:	20000364 	.word	0x20000364

080013c0 <read_sensorvalue>:

uint8_t read_sensorvalue() {
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
	  e[0] = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9)<<4;
 80013c4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80013c8:	4820      	ldr	r0, [pc, #128]	@ (800144c <read_sensorvalue+0x8c>)
 80013ca:	f001 fd41 	bl	8002e50 <HAL_GPIO_ReadPin>
 80013ce:	4603      	mov	r3, r0
 80013d0:	011b      	lsls	r3, r3, #4
 80013d2:	b2da      	uxtb	r2, r3
 80013d4:	4b1e      	ldr	r3, [pc, #120]	@ (8001450 <read_sensorvalue+0x90>)
 80013d6:	701a      	strb	r2, [r3, #0]
	  e[1] = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8)<<3;
 80013d8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80013dc:	481b      	ldr	r0, [pc, #108]	@ (800144c <read_sensorvalue+0x8c>)
 80013de:	f001 fd37 	bl	8002e50 <HAL_GPIO_ReadPin>
 80013e2:	4603      	mov	r3, r0
 80013e4:	00db      	lsls	r3, r3, #3
 80013e6:	b2da      	uxtb	r2, r3
 80013e8:	4b19      	ldr	r3, [pc, #100]	@ (8001450 <read_sensorvalue+0x90>)
 80013ea:	705a      	strb	r2, [r3, #1]
	  e[2] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8)<<2;
 80013ec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80013f0:	4818      	ldr	r0, [pc, #96]	@ (8001454 <read_sensorvalue+0x94>)
 80013f2:	f001 fd2d 	bl	8002e50 <HAL_GPIO_ReadPin>
 80013f6:	4603      	mov	r3, r0
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	b2da      	uxtb	r2, r3
 80013fc:	4b14      	ldr	r3, [pc, #80]	@ (8001450 <read_sensorvalue+0x90>)
 80013fe:	709a      	strb	r2, [r3, #2]
	  e[3] = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6)<<1;
 8001400:	2140      	movs	r1, #64	@ 0x40
 8001402:	4812      	ldr	r0, [pc, #72]	@ (800144c <read_sensorvalue+0x8c>)
 8001404:	f001 fd24 	bl	8002e50 <HAL_GPIO_ReadPin>
 8001408:	4603      	mov	r3, r0
 800140a:	005b      	lsls	r3, r3, #1
 800140c:	b2da      	uxtb	r2, r3
 800140e:	4b10      	ldr	r3, [pc, #64]	@ (8001450 <read_sensorvalue+0x90>)
 8001410:	70da      	strb	r2, [r3, #3]
	  e[4] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9)<<0;
 8001412:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001416:	480f      	ldr	r0, [pc, #60]	@ (8001454 <read_sensorvalue+0x94>)
 8001418:	f001 fd1a 	bl	8002e50 <HAL_GPIO_ReadPin>
 800141c:	4603      	mov	r3, r0
 800141e:	461a      	mov	r2, r3
 8001420:	4b0b      	ldr	r3, [pc, #44]	@ (8001450 <read_sensorvalue+0x90>)
 8001422:	711a      	strb	r2, [r3, #4]

	  return (e[0] | e[1] | e[2] | e[3] | e[4]);
 8001424:	4b0a      	ldr	r3, [pc, #40]	@ (8001450 <read_sensorvalue+0x90>)
 8001426:	781a      	ldrb	r2, [r3, #0]
 8001428:	4b09      	ldr	r3, [pc, #36]	@ (8001450 <read_sensorvalue+0x90>)
 800142a:	785b      	ldrb	r3, [r3, #1]
 800142c:	4313      	orrs	r3, r2
 800142e:	b2da      	uxtb	r2, r3
 8001430:	4b07      	ldr	r3, [pc, #28]	@ (8001450 <read_sensorvalue+0x90>)
 8001432:	789b      	ldrb	r3, [r3, #2]
 8001434:	4313      	orrs	r3, r2
 8001436:	b2da      	uxtb	r2, r3
 8001438:	4b05      	ldr	r3, [pc, #20]	@ (8001450 <read_sensorvalue+0x90>)
 800143a:	78db      	ldrb	r3, [r3, #3]
 800143c:	4313      	orrs	r3, r2
 800143e:	b2da      	uxtb	r2, r3
 8001440:	4b03      	ldr	r3, [pc, #12]	@ (8001450 <read_sensorvalue+0x90>)
 8001442:	791b      	ldrb	r3, [r3, #4]
 8001444:	4313      	orrs	r3, r2
 8001446:	b2db      	uxtb	r3, r3
}
 8001448:	4618      	mov	r0, r3
 800144a:	bd80      	pop	{r7, pc}
 800144c:	40020800 	.word	0x40020800
 8001450:	20000358 	.word	0x20000358
 8001454:	40020400 	.word	0x40020400

08001458 <error>:

void error() {
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
	if (sensor_value == 0b11011) {
 800145c:	4b4a      	ldr	r3, [pc, #296]	@ (8001588 <error+0x130>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	2b1b      	cmp	r3, #27
 8001462:	d103      	bne.n	800146c <error+0x14>
		error_value = 0;
 8001464:	4b49      	ldr	r3, [pc, #292]	@ (800158c <error+0x134>)
 8001466:	2200      	movs	r2, #0
 8001468:	701a      	strb	r2, [r3, #0]
		}
	}
	else if (sensor_value == 0b00000) {
		error_value = 6;
	}
}
 800146a:	e087      	b.n	800157c <error+0x124>
	else if (sensor_value == 0b10011) {
 800146c:	4b46      	ldr	r3, [pc, #280]	@ (8001588 <error+0x130>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	2b13      	cmp	r3, #19
 8001472:	d103      	bne.n	800147c <error+0x24>
		error_value = -1;
 8001474:	4b45      	ldr	r3, [pc, #276]	@ (800158c <error+0x134>)
 8001476:	22ff      	movs	r2, #255	@ 0xff
 8001478:	701a      	strb	r2, [r3, #0]
}
 800147a:	e07f      	b.n	800157c <error+0x124>
	else if (sensor_value == 0b10111) {
 800147c:	4b42      	ldr	r3, [pc, #264]	@ (8001588 <error+0x130>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	2b17      	cmp	r3, #23
 8001482:	d103      	bne.n	800148c <error+0x34>
		error_value = -2;
 8001484:	4b41      	ldr	r3, [pc, #260]	@ (800158c <error+0x134>)
 8001486:	22fe      	movs	r2, #254	@ 0xfe
 8001488:	701a      	strb	r2, [r3, #0]
}
 800148a:	e077      	b.n	800157c <error+0x124>
	else if (sensor_value == 0b00111 || sensor_value == 0b00011) {
 800148c:	4b3e      	ldr	r3, [pc, #248]	@ (8001588 <error+0x130>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	2b07      	cmp	r3, #7
 8001492:	d003      	beq.n	800149c <error+0x44>
 8001494:	4b3c      	ldr	r3, [pc, #240]	@ (8001588 <error+0x130>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	2b03      	cmp	r3, #3
 800149a:	d103      	bne.n	80014a4 <error+0x4c>
		error_value = -3;
 800149c:	4b3b      	ldr	r3, [pc, #236]	@ (800158c <error+0x134>)
 800149e:	22fd      	movs	r2, #253	@ 0xfd
 80014a0:	701a      	strb	r2, [r3, #0]
 80014a2:	e06b      	b.n	800157c <error+0x124>
	else if (sensor_value == 0b01111) {
 80014a4:	4b38      	ldr	r3, [pc, #224]	@ (8001588 <error+0x130>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	2b0f      	cmp	r3, #15
 80014aa:	d103      	bne.n	80014b4 <error+0x5c>
		error_value = -4;
 80014ac:	4b37      	ldr	r3, [pc, #220]	@ (800158c <error+0x134>)
 80014ae:	22fc      	movs	r2, #252	@ 0xfc
 80014b0:	701a      	strb	r2, [r3, #0]
}
 80014b2:	e063      	b.n	800157c <error+0x124>
	else if (sensor_value == 0b11001) {
 80014b4:	4b34      	ldr	r3, [pc, #208]	@ (8001588 <error+0x130>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	2b19      	cmp	r3, #25
 80014ba:	d103      	bne.n	80014c4 <error+0x6c>
		error_value = 1;
 80014bc:	4b33      	ldr	r3, [pc, #204]	@ (800158c <error+0x134>)
 80014be:	2201      	movs	r2, #1
 80014c0:	701a      	strb	r2, [r3, #0]
}
 80014c2:	e05b      	b.n	800157c <error+0x124>
	else if (sensor_value == 0b11101) {
 80014c4:	4b30      	ldr	r3, [pc, #192]	@ (8001588 <error+0x130>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	2b1d      	cmp	r3, #29
 80014ca:	d103      	bne.n	80014d4 <error+0x7c>
		error_value = 2;
 80014cc:	4b2f      	ldr	r3, [pc, #188]	@ (800158c <error+0x134>)
 80014ce:	2202      	movs	r2, #2
 80014d0:	701a      	strb	r2, [r3, #0]
}
 80014d2:	e053      	b.n	800157c <error+0x124>
	else if (sensor_value == 0b11100 || sensor_value == 0b11000) {
 80014d4:	4b2c      	ldr	r3, [pc, #176]	@ (8001588 <error+0x130>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	2b1c      	cmp	r3, #28
 80014da:	d003      	beq.n	80014e4 <error+0x8c>
 80014dc:	4b2a      	ldr	r3, [pc, #168]	@ (8001588 <error+0x130>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	2b18      	cmp	r3, #24
 80014e2:	d103      	bne.n	80014ec <error+0x94>
		error_value = 3;
 80014e4:	4b29      	ldr	r3, [pc, #164]	@ (800158c <error+0x134>)
 80014e6:	2203      	movs	r2, #3
 80014e8:	701a      	strb	r2, [r3, #0]
 80014ea:	e047      	b.n	800157c <error+0x124>
	else if (sensor_value == 0b11110) {
 80014ec:	4b26      	ldr	r3, [pc, #152]	@ (8001588 <error+0x130>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	2b1e      	cmp	r3, #30
 80014f2:	d103      	bne.n	80014fc <error+0xa4>
		error_value = 4;
 80014f4:	4b25      	ldr	r3, [pc, #148]	@ (800158c <error+0x134>)
 80014f6:	2204      	movs	r2, #4
 80014f8:	701a      	strb	r2, [r3, #0]
}
 80014fa:	e03f      	b.n	800157c <error+0x124>
	else if (sensor_value == 0b11111) {
 80014fc:	4b22      	ldr	r3, [pc, #136]	@ (8001588 <error+0x130>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	2b1f      	cmp	r3, #31
 8001502:	d133      	bne.n	800156c <error+0x114>
		if (error_value == 1|| error_value == 2 || error_value == 3 || error_value == 4) {
 8001504:	4b21      	ldr	r3, [pc, #132]	@ (800158c <error+0x134>)
 8001506:	f993 3000 	ldrsb.w	r3, [r3]
 800150a:	2b01      	cmp	r3, #1
 800150c:	d00e      	beq.n	800152c <error+0xd4>
 800150e:	4b1f      	ldr	r3, [pc, #124]	@ (800158c <error+0x134>)
 8001510:	f993 3000 	ldrsb.w	r3, [r3]
 8001514:	2b02      	cmp	r3, #2
 8001516:	d009      	beq.n	800152c <error+0xd4>
 8001518:	4b1c      	ldr	r3, [pc, #112]	@ (800158c <error+0x134>)
 800151a:	f993 3000 	ldrsb.w	r3, [r3]
 800151e:	2b03      	cmp	r3, #3
 8001520:	d004      	beq.n	800152c <error+0xd4>
 8001522:	4b1a      	ldr	r3, [pc, #104]	@ (800158c <error+0x134>)
 8001524:	f993 3000 	ldrsb.w	r3, [r3]
 8001528:	2b04      	cmp	r3, #4
 800152a:	d103      	bne.n	8001534 <error+0xdc>
			error_value = 5;
 800152c:	4b17      	ldr	r3, [pc, #92]	@ (800158c <error+0x134>)
 800152e:	2205      	movs	r2, #5
 8001530:	701a      	strb	r2, [r3, #0]
 8001532:	e023      	b.n	800157c <error+0x124>
		else if (error_value == -1 || error_value == -2 || error_value == -3 || error_value == -4) {
 8001534:	4b15      	ldr	r3, [pc, #84]	@ (800158c <error+0x134>)
 8001536:	f993 3000 	ldrsb.w	r3, [r3]
 800153a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800153e:	d011      	beq.n	8001564 <error+0x10c>
 8001540:	4b12      	ldr	r3, [pc, #72]	@ (800158c <error+0x134>)
 8001542:	f993 3000 	ldrsb.w	r3, [r3]
 8001546:	f113 0f02 	cmn.w	r3, #2
 800154a:	d00b      	beq.n	8001564 <error+0x10c>
 800154c:	4b0f      	ldr	r3, [pc, #60]	@ (800158c <error+0x134>)
 800154e:	f993 3000 	ldrsb.w	r3, [r3]
 8001552:	f113 0f03 	cmn.w	r3, #3
 8001556:	d005      	beq.n	8001564 <error+0x10c>
 8001558:	4b0c      	ldr	r3, [pc, #48]	@ (800158c <error+0x134>)
 800155a:	f993 3000 	ldrsb.w	r3, [r3]
 800155e:	f113 0f04 	cmn.w	r3, #4
 8001562:	d10b      	bne.n	800157c <error+0x124>
			error_value = -5;
 8001564:	4b09      	ldr	r3, [pc, #36]	@ (800158c <error+0x134>)
 8001566:	22fb      	movs	r2, #251	@ 0xfb
 8001568:	701a      	strb	r2, [r3, #0]
}
 800156a:	e007      	b.n	800157c <error+0x124>
	else if (sensor_value == 0b00000) {
 800156c:	4b06      	ldr	r3, [pc, #24]	@ (8001588 <error+0x130>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d103      	bne.n	800157c <error+0x124>
		error_value = 6;
 8001574:	4b05      	ldr	r3, [pc, #20]	@ (800158c <error+0x134>)
 8001576:	2206      	movs	r2, #6
 8001578:	701a      	strb	r2, [r3, #0]
}
 800157a:	e7ff      	b.n	800157c <error+0x124>
 800157c:	bf00      	nop
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	2000035d 	.word	0x2000035d
 800158c:	2000035e 	.word	0x2000035e

08001590 <line_follower>:

void line_follower() {
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
	//sensor_value = 11011b (middle)
	if (error_value == 0) { //sensor_value == 0b11011
 8001594:	4b94      	ldr	r3, [pc, #592]	@ (80017e8 <line_follower+0x258>)
 8001596:	f993 3000 	ldrsb.w	r3, [r3]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d110      	bne.n	80015c0 <line_follower+0x30>
		TIM1->CCR1 = initial_speed;
 800159e:	4b93      	ldr	r3, [pc, #588]	@ (80017ec <line_follower+0x25c>)
 80015a0:	881a      	ldrh	r2, [r3, #0]
 80015a2:	4b93      	ldr	r3, [pc, #588]	@ (80017f0 <line_follower+0x260>)
 80015a4:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM1->CCR2 = initial_speed;
 80015a6:	4b91      	ldr	r3, [pc, #580]	@ (80017ec <line_follower+0x25c>)
 80015a8:	881a      	ldrh	r2, [r3, #0]
 80015aa:	4b91      	ldr	r3, [pc, #580]	@ (80017f0 <line_follower+0x260>)
 80015ac:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM1->CCR3 = 0;
 80015ae:	4b90      	ldr	r3, [pc, #576]	@ (80017f0 <line_follower+0x260>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM1->CCR4 = 0;
 80015b4:	4b8e      	ldr	r3, [pc, #568]	@ (80017f0 <line_follower+0x260>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	641a      	str	r2, [r3, #64]	@ 0x40
		obstacle_stop();
 80015ba:	f7ff fedd 	bl	8001378 <obstacle_stop>
		TIM1->CCR2 = 0;
		TIM1->CCR3 = 0;
		TIM1->CCR4 = 0;
		obstacle_stop();
	}
}
 80015be:	e111      	b.n	80017e4 <line_follower+0x254>
	else if (error_value == -1) { //sensor_value == 0b10011
 80015c0:	4b89      	ldr	r3, [pc, #548]	@ (80017e8 <line_follower+0x258>)
 80015c2:	f993 3000 	ldrsb.w	r3, [r3]
 80015c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015ca:	d114      	bne.n	80015f6 <line_follower+0x66>
		TIM1->CCR1 = initial_speed - 100; //reduce left-motor speed
 80015cc:	4b87      	ldr	r3, [pc, #540]	@ (80017ec <line_follower+0x25c>)
 80015ce:	881b      	ldrh	r3, [r3, #0]
 80015d0:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 80015d4:	4b86      	ldr	r3, [pc, #536]	@ (80017f0 <line_follower+0x260>)
 80015d6:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM1->CCR2 = initial_speed + 110; //gain right-motor speed
 80015d8:	4b84      	ldr	r3, [pc, #528]	@ (80017ec <line_follower+0x25c>)
 80015da:	881b      	ldrh	r3, [r3, #0]
 80015dc:	f103 026e 	add.w	r2, r3, #110	@ 0x6e
 80015e0:	4b83      	ldr	r3, [pc, #524]	@ (80017f0 <line_follower+0x260>)
 80015e2:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM1->CCR3 = 0;
 80015e4:	4b82      	ldr	r3, [pc, #520]	@ (80017f0 <line_follower+0x260>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM1->CCR4 = 0;
 80015ea:	4b81      	ldr	r3, [pc, #516]	@ (80017f0 <line_follower+0x260>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	641a      	str	r2, [r3, #64]	@ 0x40
		obstacle_stop();
 80015f0:	f7ff fec2 	bl	8001378 <obstacle_stop>
}
 80015f4:	e0f6      	b.n	80017e4 <line_follower+0x254>
	else if (error_value == -2) { //sensor_value == 0b10111
 80015f6:	4b7c      	ldr	r3, [pc, #496]	@ (80017e8 <line_follower+0x258>)
 80015f8:	f993 3000 	ldrsb.w	r3, [r3]
 80015fc:	f113 0f02 	cmn.w	r3, #2
 8001600:	d111      	bne.n	8001626 <line_follower+0x96>
		TIM1->CCR1 = 0; //stop left motor
 8001602:	4b7b      	ldr	r3, [pc, #492]	@ (80017f0 <line_follower+0x260>)
 8001604:	2200      	movs	r2, #0
 8001606:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM1->CCR2 = initial_speed + 120; //gain right-motor speed
 8001608:	4b78      	ldr	r3, [pc, #480]	@ (80017ec <line_follower+0x25c>)
 800160a:	881b      	ldrh	r3, [r3, #0]
 800160c:	f103 0278 	add.w	r2, r3, #120	@ 0x78
 8001610:	4b77      	ldr	r3, [pc, #476]	@ (80017f0 <line_follower+0x260>)
 8001612:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM1->CCR3 = 0;
 8001614:	4b76      	ldr	r3, [pc, #472]	@ (80017f0 <line_follower+0x260>)
 8001616:	2200      	movs	r2, #0
 8001618:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM1->CCR4 = 0;
 800161a:	4b75      	ldr	r3, [pc, #468]	@ (80017f0 <line_follower+0x260>)
 800161c:	2200      	movs	r2, #0
 800161e:	641a      	str	r2, [r3, #64]	@ 0x40
		obstacle_stop();
 8001620:	f7ff feaa 	bl	8001378 <obstacle_stop>
}
 8001624:	e0de      	b.n	80017e4 <line_follower+0x254>
	else if (error_value == -3) {
 8001626:	4b70      	ldr	r3, [pc, #448]	@ (80017e8 <line_follower+0x258>)
 8001628:	f993 3000 	ldrsb.w	r3, [r3]
 800162c:	f113 0f03 	cmn.w	r3, #3
 8001630:	d112      	bne.n	8001658 <line_follower+0xc8>
		TIM1->CCR1 = 0; //Stop left motor
 8001632:	4b6f      	ldr	r3, [pc, #444]	@ (80017f0 <line_follower+0x260>)
 8001634:	2200      	movs	r2, #0
 8001636:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM1->CCR2 = initial_speed + 200; //significantly gain right-motor speed
 8001638:	4b6c      	ldr	r3, [pc, #432]	@ (80017ec <line_follower+0x25c>)
 800163a:	881b      	ldrh	r3, [r3, #0]
 800163c:	f103 02c8 	add.w	r2, r3, #200	@ 0xc8
 8001640:	4b6b      	ldr	r3, [pc, #428]	@ (80017f0 <line_follower+0x260>)
 8001642:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM1->CCR3 = initial_speed;
 8001644:	4b69      	ldr	r3, [pc, #420]	@ (80017ec <line_follower+0x25c>)
 8001646:	881a      	ldrh	r2, [r3, #0]
 8001648:	4b69      	ldr	r3, [pc, #420]	@ (80017f0 <line_follower+0x260>)
 800164a:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM1->CCR4 = 0;
 800164c:	4b68      	ldr	r3, [pc, #416]	@ (80017f0 <line_follower+0x260>)
 800164e:	2200      	movs	r2, #0
 8001650:	641a      	str	r2, [r3, #64]	@ 0x40
		obstacle_stop();
 8001652:	f7ff fe91 	bl	8001378 <obstacle_stop>
}
 8001656:	e0c5      	b.n	80017e4 <line_follower+0x254>
	else if (error_value == -4) {
 8001658:	4b63      	ldr	r3, [pc, #396]	@ (80017e8 <line_follower+0x258>)
 800165a:	f993 3000 	ldrsb.w	r3, [r3]
 800165e:	f113 0f04 	cmn.w	r3, #4
 8001662:	d114      	bne.n	800168e <line_follower+0xfe>
		TIM1->CCR1 = 0;
 8001664:	4b62      	ldr	r3, [pc, #392]	@ (80017f0 <line_follower+0x260>)
 8001666:	2200      	movs	r2, #0
 8001668:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM1->CCR2 = initial_speed + 300;//significantly gain right-motor speed
 800166a:	4b60      	ldr	r3, [pc, #384]	@ (80017ec <line_follower+0x25c>)
 800166c:	881b      	ldrh	r3, [r3, #0]
 800166e:	f503 7296 	add.w	r2, r3, #300	@ 0x12c
 8001672:	4b5f      	ldr	r3, [pc, #380]	@ (80017f0 <line_follower+0x260>)
 8001674:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM1->CCR3 = initial_speed + 150;//reverse the direction of the left motor
 8001676:	4b5d      	ldr	r3, [pc, #372]	@ (80017ec <line_follower+0x25c>)
 8001678:	881b      	ldrh	r3, [r3, #0]
 800167a:	f103 0296 	add.w	r2, r3, #150	@ 0x96
 800167e:	4b5c      	ldr	r3, [pc, #368]	@ (80017f0 <line_follower+0x260>)
 8001680:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM1->CCR4 = 0;
 8001682:	4b5b      	ldr	r3, [pc, #364]	@ (80017f0 <line_follower+0x260>)
 8001684:	2200      	movs	r2, #0
 8001686:	641a      	str	r2, [r3, #64]	@ 0x40
		obstacle_stop();
 8001688:	f7ff fe76 	bl	8001378 <obstacle_stop>
}
 800168c:	e0aa      	b.n	80017e4 <line_follower+0x254>
	else if(error_value == 1) {
 800168e:	4b56      	ldr	r3, [pc, #344]	@ (80017e8 <line_follower+0x258>)
 8001690:	f993 3000 	ldrsb.w	r3, [r3]
 8001694:	2b01      	cmp	r3, #1
 8001696:	d114      	bne.n	80016c2 <line_follower+0x132>
		TIM1->CCR1 = initial_speed + 110;
 8001698:	4b54      	ldr	r3, [pc, #336]	@ (80017ec <line_follower+0x25c>)
 800169a:	881b      	ldrh	r3, [r3, #0]
 800169c:	f103 026e 	add.w	r2, r3, #110	@ 0x6e
 80016a0:	4b53      	ldr	r3, [pc, #332]	@ (80017f0 <line_follower+0x260>)
 80016a2:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM1->CCR2 = initial_speed - 100;
 80016a4:	4b51      	ldr	r3, [pc, #324]	@ (80017ec <line_follower+0x25c>)
 80016a6:	881b      	ldrh	r3, [r3, #0]
 80016a8:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 80016ac:	4b50      	ldr	r3, [pc, #320]	@ (80017f0 <line_follower+0x260>)
 80016ae:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM1->CCR3 = 0;
 80016b0:	4b4f      	ldr	r3, [pc, #316]	@ (80017f0 <line_follower+0x260>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM1->CCR4 = 0;
 80016b6:	4b4e      	ldr	r3, [pc, #312]	@ (80017f0 <line_follower+0x260>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	641a      	str	r2, [r3, #64]	@ 0x40
		obstacle_stop();
 80016bc:	f7ff fe5c 	bl	8001378 <obstacle_stop>
}
 80016c0:	e090      	b.n	80017e4 <line_follower+0x254>
	else if(error_value == 2) {
 80016c2:	4b49      	ldr	r3, [pc, #292]	@ (80017e8 <line_follower+0x258>)
 80016c4:	f993 3000 	ldrsb.w	r3, [r3]
 80016c8:	2b02      	cmp	r3, #2
 80016ca:	d111      	bne.n	80016f0 <line_follower+0x160>
		TIM1->CCR1 = initial_speed + 120;
 80016cc:	4b47      	ldr	r3, [pc, #284]	@ (80017ec <line_follower+0x25c>)
 80016ce:	881b      	ldrh	r3, [r3, #0]
 80016d0:	f103 0278 	add.w	r2, r3, #120	@ 0x78
 80016d4:	4b46      	ldr	r3, [pc, #280]	@ (80017f0 <line_follower+0x260>)
 80016d6:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM1->CCR2 = 0;
 80016d8:	4b45      	ldr	r3, [pc, #276]	@ (80017f0 <line_follower+0x260>)
 80016da:	2200      	movs	r2, #0
 80016dc:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM1->CCR3 = 0;
 80016de:	4b44      	ldr	r3, [pc, #272]	@ (80017f0 <line_follower+0x260>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM1->CCR4 = 0;
 80016e4:	4b42      	ldr	r3, [pc, #264]	@ (80017f0 <line_follower+0x260>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	641a      	str	r2, [r3, #64]	@ 0x40
		obstacle_stop();
 80016ea:	f7ff fe45 	bl	8001378 <obstacle_stop>
}
 80016ee:	e079      	b.n	80017e4 <line_follower+0x254>
	else if (error_value == 3) {
 80016f0:	4b3d      	ldr	r3, [pc, #244]	@ (80017e8 <line_follower+0x258>)
 80016f2:	f993 3000 	ldrsb.w	r3, [r3]
 80016f6:	2b03      	cmp	r3, #3
 80016f8:	d112      	bne.n	8001720 <line_follower+0x190>
		TIM1->CCR1 = initial_speed + 200;
 80016fa:	4b3c      	ldr	r3, [pc, #240]	@ (80017ec <line_follower+0x25c>)
 80016fc:	881b      	ldrh	r3, [r3, #0]
 80016fe:	f103 02c8 	add.w	r2, r3, #200	@ 0xc8
 8001702:	4b3b      	ldr	r3, [pc, #236]	@ (80017f0 <line_follower+0x260>)
 8001704:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM1->CCR2 = 0;
 8001706:	4b3a      	ldr	r3, [pc, #232]	@ (80017f0 <line_follower+0x260>)
 8001708:	2200      	movs	r2, #0
 800170a:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM1->CCR3 = 0;
 800170c:	4b38      	ldr	r3, [pc, #224]	@ (80017f0 <line_follower+0x260>)
 800170e:	2200      	movs	r2, #0
 8001710:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM1->CCR4 = initial_speed;
 8001712:	4b36      	ldr	r3, [pc, #216]	@ (80017ec <line_follower+0x25c>)
 8001714:	881a      	ldrh	r2, [r3, #0]
 8001716:	4b36      	ldr	r3, [pc, #216]	@ (80017f0 <line_follower+0x260>)
 8001718:	641a      	str	r2, [r3, #64]	@ 0x40
		obstacle_stop();
 800171a:	f7ff fe2d 	bl	8001378 <obstacle_stop>
}
 800171e:	e061      	b.n	80017e4 <line_follower+0x254>
	else if (error_value == 4) {
 8001720:	4b31      	ldr	r3, [pc, #196]	@ (80017e8 <line_follower+0x258>)
 8001722:	f993 3000 	ldrsb.w	r3, [r3]
 8001726:	2b04      	cmp	r3, #4
 8001728:	d114      	bne.n	8001754 <line_follower+0x1c4>
		TIM1->CCR1 = initial_speed + 300;
 800172a:	4b30      	ldr	r3, [pc, #192]	@ (80017ec <line_follower+0x25c>)
 800172c:	881b      	ldrh	r3, [r3, #0]
 800172e:	f503 7296 	add.w	r2, r3, #300	@ 0x12c
 8001732:	4b2f      	ldr	r3, [pc, #188]	@ (80017f0 <line_follower+0x260>)
 8001734:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM1->CCR2 = 0;
 8001736:	4b2e      	ldr	r3, [pc, #184]	@ (80017f0 <line_follower+0x260>)
 8001738:	2200      	movs	r2, #0
 800173a:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM1->CCR3 = 0;
 800173c:	4b2c      	ldr	r3, [pc, #176]	@ (80017f0 <line_follower+0x260>)
 800173e:	2200      	movs	r2, #0
 8001740:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM1->CCR4 = initial_speed + 150;
 8001742:	4b2a      	ldr	r3, [pc, #168]	@ (80017ec <line_follower+0x25c>)
 8001744:	881b      	ldrh	r3, [r3, #0]
 8001746:	f103 0296 	add.w	r2, r3, #150	@ 0x96
 800174a:	4b29      	ldr	r3, [pc, #164]	@ (80017f0 <line_follower+0x260>)
 800174c:	641a      	str	r2, [r3, #64]	@ 0x40
		obstacle_stop();
 800174e:	f7ff fe13 	bl	8001378 <obstacle_stop>
}
 8001752:	e047      	b.n	80017e4 <line_follower+0x254>
	else if (error_value == -5) {
 8001754:	4b24      	ldr	r3, [pc, #144]	@ (80017e8 <line_follower+0x258>)
 8001756:	f993 3000 	ldrsb.w	r3, [r3]
 800175a:	f113 0f05 	cmn.w	r3, #5
 800175e:	d114      	bne.n	800178a <line_follower+0x1fa>
		TIM1->CCR1 = 0;
 8001760:	4b23      	ldr	r3, [pc, #140]	@ (80017f0 <line_follower+0x260>)
 8001762:	2200      	movs	r2, #0
 8001764:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM1->CCR2 = initial_speed + 350;//significantly gain right-motor speed
 8001766:	4b21      	ldr	r3, [pc, #132]	@ (80017ec <line_follower+0x25c>)
 8001768:	881b      	ldrh	r3, [r3, #0]
 800176a:	f503 72af 	add.w	r2, r3, #350	@ 0x15e
 800176e:	4b20      	ldr	r3, [pc, #128]	@ (80017f0 <line_follower+0x260>)
 8001770:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM1->CCR3 = initial_speed + 150;//reverse the direction of the left motor
 8001772:	4b1e      	ldr	r3, [pc, #120]	@ (80017ec <line_follower+0x25c>)
 8001774:	881b      	ldrh	r3, [r3, #0]
 8001776:	f103 0296 	add.w	r2, r3, #150	@ 0x96
 800177a:	4b1d      	ldr	r3, [pc, #116]	@ (80017f0 <line_follower+0x260>)
 800177c:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM1->CCR4 = 0;
 800177e:	4b1c      	ldr	r3, [pc, #112]	@ (80017f0 <line_follower+0x260>)
 8001780:	2200      	movs	r2, #0
 8001782:	641a      	str	r2, [r3, #64]	@ 0x40
		obstacle_stop();
 8001784:	f7ff fdf8 	bl	8001378 <obstacle_stop>
}
 8001788:	e02c      	b.n	80017e4 <line_follower+0x254>
	else if (error_value == 5) {
 800178a:	4b17      	ldr	r3, [pc, #92]	@ (80017e8 <line_follower+0x258>)
 800178c:	f993 3000 	ldrsb.w	r3, [r3]
 8001790:	2b05      	cmp	r3, #5
 8001792:	d114      	bne.n	80017be <line_follower+0x22e>
		TIM1->CCR1 = initial_speed + 350;
 8001794:	4b15      	ldr	r3, [pc, #84]	@ (80017ec <line_follower+0x25c>)
 8001796:	881b      	ldrh	r3, [r3, #0]
 8001798:	f503 72af 	add.w	r2, r3, #350	@ 0x15e
 800179c:	4b14      	ldr	r3, [pc, #80]	@ (80017f0 <line_follower+0x260>)
 800179e:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM1->CCR2 = 0;
 80017a0:	4b13      	ldr	r3, [pc, #76]	@ (80017f0 <line_follower+0x260>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM1->CCR3 = 0;
 80017a6:	4b12      	ldr	r3, [pc, #72]	@ (80017f0 <line_follower+0x260>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM1->CCR4 = initial_speed + 150;
 80017ac:	4b0f      	ldr	r3, [pc, #60]	@ (80017ec <line_follower+0x25c>)
 80017ae:	881b      	ldrh	r3, [r3, #0]
 80017b0:	f103 0296 	add.w	r2, r3, #150	@ 0x96
 80017b4:	4b0e      	ldr	r3, [pc, #56]	@ (80017f0 <line_follower+0x260>)
 80017b6:	641a      	str	r2, [r3, #64]	@ 0x40
		obstacle_stop();
 80017b8:	f7ff fdde 	bl	8001378 <obstacle_stop>
}
 80017bc:	e012      	b.n	80017e4 <line_follower+0x254>
	else if (error_value == 6) {
 80017be:	4b0a      	ldr	r3, [pc, #40]	@ (80017e8 <line_follower+0x258>)
 80017c0:	f993 3000 	ldrsb.w	r3, [r3]
 80017c4:	2b06      	cmp	r3, #6
 80017c6:	d10d      	bne.n	80017e4 <line_follower+0x254>
		TIM1->CCR1 = 0;
 80017c8:	4b09      	ldr	r3, [pc, #36]	@ (80017f0 <line_follower+0x260>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM1->CCR2 = 0;
 80017ce:	4b08      	ldr	r3, [pc, #32]	@ (80017f0 <line_follower+0x260>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM1->CCR3 = 0;
 80017d4:	4b06      	ldr	r3, [pc, #24]	@ (80017f0 <line_follower+0x260>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM1->CCR4 = 0;
 80017da:	4b05      	ldr	r3, [pc, #20]	@ (80017f0 <line_follower+0x260>)
 80017dc:	2200      	movs	r2, #0
 80017de:	641a      	str	r2, [r3, #64]	@ 0x40
		obstacle_stop();
 80017e0:	f7ff fdca 	bl	8001378 <obstacle_stop>
}
 80017e4:	bf00      	nop
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	2000035e 	.word	0x2000035e
 80017ec:	20000360 	.word	0x20000360
 80017f0:	40010000 	.word	0x40010000

080017f4 <Stop>:

void Stop() {
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
	TIM1->CCR1 = 0;
 80017f8:	4b08      	ldr	r3, [pc, #32]	@ (800181c <Stop+0x28>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM1->CCR2 = 0;
 80017fe:	4b07      	ldr	r3, [pc, #28]	@ (800181c <Stop+0x28>)
 8001800:	2200      	movs	r2, #0
 8001802:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM1->CCR3 = 0;
 8001804:	4b05      	ldr	r3, [pc, #20]	@ (800181c <Stop+0x28>)
 8001806:	2200      	movs	r2, #0
 8001808:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM1->CCR4 = 0;
 800180a:	4b04      	ldr	r3, [pc, #16]	@ (800181c <Stop+0x28>)
 800180c:	2200      	movs	r2, #0
 800180e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001810:	bf00      	nop
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	40010000 	.word	0x40010000

08001820 <running_time>:

	}
}


void running_time(){
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
	++time_run;
 8001824:	4b04      	ldr	r3, [pc, #16]	@ (8001838 <running_time+0x18>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	3301      	adds	r3, #1
 800182a:	4a03      	ldr	r2, [pc, #12]	@ (8001838 <running_time+0x18>)
 800182c:	6013      	str	r3, [r2, #0]
}
 800182e:	bf00      	nop
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr
 8001838:	20000368 	.word	0x20000368

0800183c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b094      	sub	sp, #80	@ 0x50
 8001840:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001842:	f107 031c 	add.w	r3, r7, #28
 8001846:	2234      	movs	r2, #52	@ 0x34
 8001848:	2100      	movs	r1, #0
 800184a:	4618      	mov	r0, r3
 800184c:	f005 fbdb 	bl	8007006 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001850:	f107 0308 	add.w	r3, r7, #8
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
 8001858:	605a      	str	r2, [r3, #4]
 800185a:	609a      	str	r2, [r3, #8]
 800185c:	60da      	str	r2, [r3, #12]
 800185e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001860:	2300      	movs	r3, #0
 8001862:	607b      	str	r3, [r7, #4]
 8001864:	4b2a      	ldr	r3, [pc, #168]	@ (8001910 <SystemClock_Config+0xd4>)
 8001866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001868:	4a29      	ldr	r2, [pc, #164]	@ (8001910 <SystemClock_Config+0xd4>)
 800186a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800186e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001870:	4b27      	ldr	r3, [pc, #156]	@ (8001910 <SystemClock_Config+0xd4>)
 8001872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001874:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001878:	607b      	str	r3, [r7, #4]
 800187a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800187c:	2300      	movs	r3, #0
 800187e:	603b      	str	r3, [r7, #0]
 8001880:	4b24      	ldr	r3, [pc, #144]	@ (8001914 <SystemClock_Config+0xd8>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001888:	4a22      	ldr	r2, [pc, #136]	@ (8001914 <SystemClock_Config+0xd8>)
 800188a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800188e:	6013      	str	r3, [r2, #0]
 8001890:	4b20      	ldr	r3, [pc, #128]	@ (8001914 <SystemClock_Config+0xd8>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001898:	603b      	str	r3, [r7, #0]
 800189a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800189c:	2302      	movs	r3, #2
 800189e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018a0:	2301      	movs	r3, #1
 80018a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018a4:	2310      	movs	r3, #16
 80018a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018a8:	2302      	movs	r3, #2
 80018aa:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018ac:	2300      	movs	r3, #0
 80018ae:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80018b0:	2310      	movs	r3, #16
 80018b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80018b4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80018b8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80018ba:	2304      	movs	r3, #4
 80018bc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80018be:	2302      	movs	r3, #2
 80018c0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80018c2:	2302      	movs	r3, #2
 80018c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018c6:	f107 031c 	add.w	r3, r7, #28
 80018ca:	4618      	mov	r0, r3
 80018cc:	f001 fe3c 	bl	8003548 <HAL_RCC_OscConfig>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80018d6:	f000 fa2b 	bl	8001d30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018da:	230f      	movs	r3, #15
 80018dc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018de:	2302      	movs	r3, #2
 80018e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018e2:	2300      	movs	r3, #0
 80018e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018ec:	2300      	movs	r3, #0
 80018ee:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80018f0:	f107 0308 	add.w	r3, r7, #8
 80018f4:	2102      	movs	r1, #2
 80018f6:	4618      	mov	r0, r3
 80018f8:	f001 fadc 	bl	8002eb4 <HAL_RCC_ClockConfig>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001902:	f000 fa15 	bl	8001d30 <Error_Handler>
  }
}
 8001906:	bf00      	nop
 8001908:	3750      	adds	r7, #80	@ 0x50
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	40023800 	.word	0x40023800
 8001914:	40007000 	.word	0x40007000

08001918 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800191c:	4b17      	ldr	r3, [pc, #92]	@ (800197c <MX_SPI1_Init+0x64>)
 800191e:	4a18      	ldr	r2, [pc, #96]	@ (8001980 <MX_SPI1_Init+0x68>)
 8001920:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001922:	4b16      	ldr	r3, [pc, #88]	@ (800197c <MX_SPI1_Init+0x64>)
 8001924:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001928:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800192a:	4b14      	ldr	r3, [pc, #80]	@ (800197c <MX_SPI1_Init+0x64>)
 800192c:	2200      	movs	r2, #0
 800192e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001930:	4b12      	ldr	r3, [pc, #72]	@ (800197c <MX_SPI1_Init+0x64>)
 8001932:	2200      	movs	r2, #0
 8001934:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001936:	4b11      	ldr	r3, [pc, #68]	@ (800197c <MX_SPI1_Init+0x64>)
 8001938:	2200      	movs	r2, #0
 800193a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800193c:	4b0f      	ldr	r3, [pc, #60]	@ (800197c <MX_SPI1_Init+0x64>)
 800193e:	2200      	movs	r2, #0
 8001940:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001942:	4b0e      	ldr	r3, [pc, #56]	@ (800197c <MX_SPI1_Init+0x64>)
 8001944:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001948:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800194a:	4b0c      	ldr	r3, [pc, #48]	@ (800197c <MX_SPI1_Init+0x64>)
 800194c:	2210      	movs	r2, #16
 800194e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001950:	4b0a      	ldr	r3, [pc, #40]	@ (800197c <MX_SPI1_Init+0x64>)
 8001952:	2200      	movs	r2, #0
 8001954:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001956:	4b09      	ldr	r3, [pc, #36]	@ (800197c <MX_SPI1_Init+0x64>)
 8001958:	2200      	movs	r2, #0
 800195a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800195c:	4b07      	ldr	r3, [pc, #28]	@ (800197c <MX_SPI1_Init+0x64>)
 800195e:	2200      	movs	r2, #0
 8001960:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001962:	4b06      	ldr	r3, [pc, #24]	@ (800197c <MX_SPI1_Init+0x64>)
 8001964:	220a      	movs	r2, #10
 8001966:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001968:	4804      	ldr	r0, [pc, #16]	@ (800197c <MX_SPI1_Init+0x64>)
 800196a:	f002 f88b 	bl	8003a84 <HAL_SPI_Init>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001974:	f000 f9dc 	bl	8001d30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001978:	bf00      	nop
 800197a:	bd80      	pop	{r7, pc}
 800197c:	200001f4 	.word	0x200001f4
 8001980:	40013000 	.word	0x40013000

08001984 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b092      	sub	sp, #72	@ 0x48
 8001988:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800198a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800198e:	2200      	movs	r2, #0
 8001990:	601a      	str	r2, [r3, #0]
 8001992:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001994:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	605a      	str	r2, [r3, #4]
 800199e:	609a      	str	r2, [r3, #8]
 80019a0:	60da      	str	r2, [r3, #12]
 80019a2:	611a      	str	r2, [r3, #16]
 80019a4:	615a      	str	r2, [r3, #20]
 80019a6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80019a8:	1d3b      	adds	r3, r7, #4
 80019aa:	2220      	movs	r2, #32
 80019ac:	2100      	movs	r1, #0
 80019ae:	4618      	mov	r0, r3
 80019b0:	f005 fb29 	bl	8007006 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80019b4:	4b45      	ldr	r3, [pc, #276]	@ (8001acc <MX_TIM1_Init+0x148>)
 80019b6:	4a46      	ldr	r2, [pc, #280]	@ (8001ad0 <MX_TIM1_Init+0x14c>)
 80019b8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 80019ba:	4b44      	ldr	r3, [pc, #272]	@ (8001acc <MX_TIM1_Init+0x148>)
 80019bc:	2253      	movs	r2, #83	@ 0x53
 80019be:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019c0:	4b42      	ldr	r3, [pc, #264]	@ (8001acc <MX_TIM1_Init+0x148>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80019c6:	4b41      	ldr	r3, [pc, #260]	@ (8001acc <MX_TIM1_Init+0x148>)
 80019c8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80019cc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019ce:	4b3f      	ldr	r3, [pc, #252]	@ (8001acc <MX_TIM1_Init+0x148>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80019d4:	4b3d      	ldr	r3, [pc, #244]	@ (8001acc <MX_TIM1_Init+0x148>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019da:	4b3c      	ldr	r3, [pc, #240]	@ (8001acc <MX_TIM1_Init+0x148>)
 80019dc:	2200      	movs	r2, #0
 80019de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80019e0:	483a      	ldr	r0, [pc, #232]	@ (8001acc <MX_TIM1_Init+0x148>)
 80019e2:	f002 fb65 	bl	80040b0 <HAL_TIM_PWM_Init>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80019ec:	f000 f9a0 	bl	8001d30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019f0:	2300      	movs	r3, #0
 80019f2:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019f4:	2300      	movs	r3, #0
 80019f6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80019f8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80019fc:	4619      	mov	r1, r3
 80019fe:	4833      	ldr	r0, [pc, #204]	@ (8001acc <MX_TIM1_Init+0x148>)
 8001a00:	f003 fc4c 	bl	800529c <HAL_TIMEx_MasterConfigSynchronization>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001a0a:	f000 f991 	bl	8001d30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a0e:	2360      	movs	r3, #96	@ 0x60
 8001a10:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001a12:	2300      	movs	r3, #0
 8001a14:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a16:	2300      	movs	r3, #0
 8001a18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a22:	2300      	movs	r3, #0
 8001a24:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a26:	2300      	movs	r3, #0
 8001a28:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a2e:	2200      	movs	r2, #0
 8001a30:	4619      	mov	r1, r3
 8001a32:	4826      	ldr	r0, [pc, #152]	@ (8001acc <MX_TIM1_Init+0x148>)
 8001a34:	f002 ff58 	bl	80048e8 <HAL_TIM_PWM_ConfigChannel>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8001a3e:	f000 f977 	bl	8001d30 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a46:	2204      	movs	r2, #4
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4820      	ldr	r0, [pc, #128]	@ (8001acc <MX_TIM1_Init+0x148>)
 8001a4c:	f002 ff4c 	bl	80048e8 <HAL_TIM_PWM_ConfigChannel>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001a56:	f000 f96b 	bl	8001d30 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a5e:	2208      	movs	r2, #8
 8001a60:	4619      	mov	r1, r3
 8001a62:	481a      	ldr	r0, [pc, #104]	@ (8001acc <MX_TIM1_Init+0x148>)
 8001a64:	f002 ff40 	bl	80048e8 <HAL_TIM_PWM_ConfigChannel>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8001a6e:	f000 f95f 	bl	8001d30 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a76:	220c      	movs	r2, #12
 8001a78:	4619      	mov	r1, r3
 8001a7a:	4814      	ldr	r0, [pc, #80]	@ (8001acc <MX_TIM1_Init+0x148>)
 8001a7c:	f002 ff34 	bl	80048e8 <HAL_TIM_PWM_ConfigChannel>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8001a86:	f000 f953 	bl	8001d30 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a92:	2300      	movs	r3, #0
 8001a94:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a96:	2300      	movs	r3, #0
 8001a98:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a9e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001aa2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001aa8:	1d3b      	adds	r3, r7, #4
 8001aaa:	4619      	mov	r1, r3
 8001aac:	4807      	ldr	r0, [pc, #28]	@ (8001acc <MX_TIM1_Init+0x148>)
 8001aae:	f003 fc71 	bl	8005394 <HAL_TIMEx_ConfigBreakDeadTime>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8001ab8:	f000 f93a 	bl	8001d30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001abc:	4803      	ldr	r0, [pc, #12]	@ (8001acc <MX_TIM1_Init+0x148>)
 8001abe:	f000 fc29 	bl	8002314 <HAL_TIM_MspPostInit>

}
 8001ac2:	bf00      	nop
 8001ac4:	3748      	adds	r7, #72	@ 0x48
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	2000024c 	.word	0x2000024c
 8001ad0:	40010000 	.word	0x40010000

08001ad4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b086      	sub	sp, #24
 8001ad8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ada:	f107 0310 	add.w	r3, r7, #16
 8001ade:	2200      	movs	r2, #0
 8001ae0:	601a      	str	r2, [r3, #0]
 8001ae2:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001ae4:	463b      	mov	r3, r7
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	601a      	str	r2, [r3, #0]
 8001aea:	605a      	str	r2, [r3, #4]
 8001aec:	609a      	str	r2, [r3, #8]
 8001aee:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001af0:	4b20      	ldr	r3, [pc, #128]	@ (8001b74 <MX_TIM2_Init+0xa0>)
 8001af2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001af6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8001af8:	4b1e      	ldr	r3, [pc, #120]	@ (8001b74 <MX_TIM2_Init+0xa0>)
 8001afa:	2253      	movs	r2, #83	@ 0x53
 8001afc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001afe:	4b1d      	ldr	r3, [pc, #116]	@ (8001b74 <MX_TIM2_Init+0xa0>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001b04:	4b1b      	ldr	r3, [pc, #108]	@ (8001b74 <MX_TIM2_Init+0xa0>)
 8001b06:	f04f 32ff 	mov.w	r2, #4294967295
 8001b0a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b0c:	4b19      	ldr	r3, [pc, #100]	@ (8001b74 <MX_TIM2_Init+0xa0>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b12:	4b18      	ldr	r3, [pc, #96]	@ (8001b74 <MX_TIM2_Init+0xa0>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001b18:	4816      	ldr	r0, [pc, #88]	@ (8001b74 <MX_TIM2_Init+0xa0>)
 8001b1a:	f002 fbe1 	bl	80042e0 <HAL_TIM_IC_Init>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001b24:	f000 f904 	bl	8001d30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b30:	f107 0310 	add.w	r3, r7, #16
 8001b34:	4619      	mov	r1, r3
 8001b36:	480f      	ldr	r0, [pc, #60]	@ (8001b74 <MX_TIM2_Init+0xa0>)
 8001b38:	f003 fbb0 	bl	800529c <HAL_TIMEx_MasterConfigSynchronization>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001b42:	f000 f8f5 	bl	8001d30 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001b46:	230a      	movs	r3, #10
 8001b48:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001b52:	2300      	movs	r3, #0
 8001b54:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001b56:	463b      	mov	r3, r7
 8001b58:	2200      	movs	r2, #0
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4805      	ldr	r0, [pc, #20]	@ (8001b74 <MX_TIM2_Init+0xa0>)
 8001b5e:	f002 fe27 	bl	80047b0 <HAL_TIM_IC_ConfigChannel>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001b68:	f000 f8e2 	bl	8001d30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b6c:	bf00      	nop
 8001b6e:	3718      	adds	r7, #24
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	20000294 	.word	0x20000294

08001b78 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b7c:	4b11      	ldr	r3, [pc, #68]	@ (8001bc4 <MX_USART2_UART_Init+0x4c>)
 8001b7e:	4a12      	ldr	r2, [pc, #72]	@ (8001bc8 <MX_USART2_UART_Init+0x50>)
 8001b80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001b82:	4b10      	ldr	r3, [pc, #64]	@ (8001bc4 <MX_USART2_UART_Init+0x4c>)
 8001b84:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001b88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b8a:	4b0e      	ldr	r3, [pc, #56]	@ (8001bc4 <MX_USART2_UART_Init+0x4c>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b90:	4b0c      	ldr	r3, [pc, #48]	@ (8001bc4 <MX_USART2_UART_Init+0x4c>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b96:	4b0b      	ldr	r3, [pc, #44]	@ (8001bc4 <MX_USART2_UART_Init+0x4c>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b9c:	4b09      	ldr	r3, [pc, #36]	@ (8001bc4 <MX_USART2_UART_Init+0x4c>)
 8001b9e:	220c      	movs	r2, #12
 8001ba0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ba2:	4b08      	ldr	r3, [pc, #32]	@ (8001bc4 <MX_USART2_UART_Init+0x4c>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ba8:	4b06      	ldr	r3, [pc, #24]	@ (8001bc4 <MX_USART2_UART_Init+0x4c>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001bae:	4805      	ldr	r0, [pc, #20]	@ (8001bc4 <MX_USART2_UART_Init+0x4c>)
 8001bb0:	f003 fc56 	bl	8005460 <HAL_UART_Init>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001bba:	f000 f8b9 	bl	8001d30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001bbe:	bf00      	nop
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	200002dc 	.word	0x200002dc
 8001bc8:	40004400 	.word	0x40004400

08001bcc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b08a      	sub	sp, #40	@ 0x28
 8001bd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd2:	f107 0314 	add.w	r3, r7, #20
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	601a      	str	r2, [r3, #0]
 8001bda:	605a      	str	r2, [r3, #4]
 8001bdc:	609a      	str	r2, [r3, #8]
 8001bde:	60da      	str	r2, [r3, #12]
 8001be0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001be2:	2300      	movs	r3, #0
 8001be4:	613b      	str	r3, [r7, #16]
 8001be6:	4b4e      	ldr	r3, [pc, #312]	@ (8001d20 <MX_GPIO_Init+0x154>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bea:	4a4d      	ldr	r2, [pc, #308]	@ (8001d20 <MX_GPIO_Init+0x154>)
 8001bec:	f043 0304 	orr.w	r3, r3, #4
 8001bf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bf2:	4b4b      	ldr	r3, [pc, #300]	@ (8001d20 <MX_GPIO_Init+0x154>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bf6:	f003 0304 	and.w	r3, r3, #4
 8001bfa:	613b      	str	r3, [r7, #16]
 8001bfc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bfe:	2300      	movs	r3, #0
 8001c00:	60fb      	str	r3, [r7, #12]
 8001c02:	4b47      	ldr	r3, [pc, #284]	@ (8001d20 <MX_GPIO_Init+0x154>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c06:	4a46      	ldr	r2, [pc, #280]	@ (8001d20 <MX_GPIO_Init+0x154>)
 8001c08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c0e:	4b44      	ldr	r3, [pc, #272]	@ (8001d20 <MX_GPIO_Init+0x154>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c16:	60fb      	str	r3, [r7, #12]
 8001c18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	60bb      	str	r3, [r7, #8]
 8001c1e:	4b40      	ldr	r3, [pc, #256]	@ (8001d20 <MX_GPIO_Init+0x154>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c22:	4a3f      	ldr	r2, [pc, #252]	@ (8001d20 <MX_GPIO_Init+0x154>)
 8001c24:	f043 0301 	orr.w	r3, r3, #1
 8001c28:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c2a:	4b3d      	ldr	r3, [pc, #244]	@ (8001d20 <MX_GPIO_Init+0x154>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c2e:	f003 0301 	and.w	r3, r3, #1
 8001c32:	60bb      	str	r3, [r7, #8]
 8001c34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c36:	2300      	movs	r3, #0
 8001c38:	607b      	str	r3, [r7, #4]
 8001c3a:	4b39      	ldr	r3, [pc, #228]	@ (8001d20 <MX_GPIO_Init+0x154>)
 8001c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c3e:	4a38      	ldr	r2, [pc, #224]	@ (8001d20 <MX_GPIO_Init+0x154>)
 8001c40:	f043 0302 	orr.w	r3, r3, #2
 8001c44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c46:	4b36      	ldr	r3, [pc, #216]	@ (8001d20 <MX_GPIO_Init+0x154>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c4a:	f003 0302 	and.w	r3, r3, #2
 8001c4e:	607b      	str	r3, [r7, #4]
 8001c50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8001c52:	2200      	movs	r2, #0
 8001c54:	2108      	movs	r1, #8
 8001c56:	4833      	ldr	r0, [pc, #204]	@ (8001d24 <MX_GPIO_Init+0x158>)
 8001c58:	f001 f912 	bl	8002e80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_4, GPIO_PIN_RESET);
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	2112      	movs	r1, #18
 8001c60:	4831      	ldr	r0, [pc, #196]	@ (8001d28 <MX_GPIO_Init+0x15c>)
 8001c62:	f001 f90d 	bl	8002e80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_4, GPIO_PIN_RESET);
 8001c66:	2200      	movs	r2, #0
 8001c68:	f244 4111 	movw	r1, #17425	@ 0x4411
 8001c6c:	482f      	ldr	r0, [pc, #188]	@ (8001d2c <MX_GPIO_Init+0x160>)
 8001c6e:	f001 f907 	bl	8002e80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001c72:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c78:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001c7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001c82:	f107 0314 	add.w	r3, r7, #20
 8001c86:	4619      	mov	r1, r3
 8001c88:	4826      	ldr	r0, [pc, #152]	@ (8001d24 <MX_GPIO_Init+0x158>)
 8001c8a:	f000 ff4d 	bl	8002b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001c8e:	2308      	movs	r3, #8
 8001c90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c92:	2301      	movs	r3, #1
 8001c94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c96:	2300      	movs	r3, #0
 8001c98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c9e:	f107 0314 	add.w	r3, r7, #20
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	481f      	ldr	r0, [pc, #124]	@ (8001d24 <MX_GPIO_Init+0x158>)
 8001ca6:	f000 ff3f 	bl	8002b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 8001caa:	2312      	movs	r3, #18
 8001cac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cba:	f107 0314 	add.w	r3, r7, #20
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	4819      	ldr	r0, [pc, #100]	@ (8001d28 <MX_GPIO_Init+0x15c>)
 8001cc2:	f000 ff31 	bl	8002b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB10 PB14 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_4;
 8001cc6:	f244 4311 	movw	r3, #17425	@ 0x4411
 8001cca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cd8:	f107 0314 	add.w	r3, r7, #20
 8001cdc:	4619      	mov	r1, r3
 8001cde:	4813      	ldr	r0, [pc, #76]	@ (8001d2c <MX_GPIO_Init+0x160>)
 8001ce0:	f000 ff22 	bl	8002b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 8001ce4:	f44f 7350 	mov.w	r3, #832	@ 0x340
 8001ce8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cea:	2300      	movs	r3, #0
 8001cec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cf2:	f107 0314 	add.w	r3, r7, #20
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	480a      	ldr	r0, [pc, #40]	@ (8001d24 <MX_GPIO_Init+0x158>)
 8001cfa:	f000 ff15 	bl	8002b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001cfe:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001d02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d04:	2300      	movs	r3, #0
 8001d06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d0c:	f107 0314 	add.w	r3, r7, #20
 8001d10:	4619      	mov	r1, r3
 8001d12:	4806      	ldr	r0, [pc, #24]	@ (8001d2c <MX_GPIO_Init+0x160>)
 8001d14:	f000 ff08 	bl	8002b28 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d18:	bf00      	nop
 8001d1a:	3728      	adds	r7, #40	@ 0x28
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	40023800 	.word	0x40023800
 8001d24:	40020800 	.word	0x40020800
 8001d28:	40020000 	.word	0x40020000
 8001d2c:	40020400 	.word	0x40020400

08001d30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d34:	b672      	cpsid	i
}
 8001d36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d38:	bf00      	nop
 8001d3a:	e7fd      	b.n	8001d38 <Error_Handler+0x8>

08001d3c <RC522_SPI_Transfer>:
 * Description: A common function used by Write_MFRC522 and Read_MFRC522
 * Input Parameters: data - the value to be written
 * Returns: a byte of data read from the module
 */
uint8_t RC522_SPI_Transfer(uchar data)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b086      	sub	sp, #24
 8001d40:	af02      	add	r7, sp, #8
 8001d42:	4603      	mov	r3, r0
 8001d44:	71fb      	strb	r3, [r7, #7]
	uchar rx_data;
	HAL_SPI_TransmitReceive(HSPI_INSTANCE,&data,&rx_data,1,100);
 8001d46:	f107 020f 	add.w	r2, r7, #15
 8001d4a:	1df9      	adds	r1, r7, #7
 8001d4c:	2364      	movs	r3, #100	@ 0x64
 8001d4e:	9300      	str	r3, [sp, #0]
 8001d50:	2301      	movs	r3, #1
 8001d52:	4804      	ldr	r0, [pc, #16]	@ (8001d64 <RC522_SPI_Transfer+0x28>)
 8001d54:	f001 ff1f 	bl	8003b96 <HAL_SPI_TransmitReceive>

	return rx_data;
 8001d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3710      	adds	r7, #16
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	200001f4 	.word	0x200001f4

08001d68 <Write_MFRC522>:
 * Function Description: To a certain MFRC522 register to write a byte of data
 * Input Parameters: addr - register address; val - the value to be written
 * Return value: None
 */
void Write_MFRC522(uchar addr, uchar val)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	4603      	mov	r3, r0
 8001d70:	460a      	mov	r2, r1
 8001d72:	71fb      	strb	r3, [r7, #7]
 8001d74:	4613      	mov	r3, r2
 8001d76:	71bb      	strb	r3, [r7, #6]
	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 8001d78:	2200      	movs	r2, #0
 8001d7a:	2110      	movs	r1, #16
 8001d7c:	480c      	ldr	r0, [pc, #48]	@ (8001db0 <Write_MFRC522+0x48>)
 8001d7e:	f001 f87f 	bl	8002e80 <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and clear the MSb to indicate a write
	  // - bottom 8 bits are the data bits being sent for that address, we send them
	RC522_SPI_Transfer((addr<<1)&0x7E);
 8001d82:	79fb      	ldrb	r3, [r7, #7]
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7ff ffd4 	bl	8001d3c <RC522_SPI_Transfer>
	RC522_SPI_Transfer(val);
 8001d94:	79bb      	ldrb	r3, [r7, #6]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7ff ffd0 	bl	8001d3c <RC522_SPI_Transfer>

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	2110      	movs	r1, #16
 8001da0:	4803      	ldr	r0, [pc, #12]	@ (8001db0 <Write_MFRC522+0x48>)
 8001da2:	f001 f86d 	bl	8002e80 <HAL_GPIO_WritePin>
}
 8001da6:	bf00      	nop
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	40020000 	.word	0x40020000

08001db4 <Read_MFRC522>:
 * Description: From a certain MFRC522 read a byte of data register
 * Input Parameters: addr - register address
 * Returns: a byte of data read from the module
 */
uchar Read_MFRC522(uchar addr)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	4603      	mov	r3, r0
 8001dbc:	71fb      	strb	r3, [r7, #7]
	uchar val;

	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	2110      	movs	r1, #16
 8001dc2:	480f      	ldr	r0, [pc, #60]	@ (8001e00 <Read_MFRC522+0x4c>)
 8001dc4:	f001 f85c 	bl	8002e80 <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and set the MSb to indicate a read
	  // - bottom 8 bits are all 0s on a read per 8.1.2.1 Table 6
	RC522_SPI_Transfer(((addr<<1)&0x7E) | 0x80);
 8001dc8:	79fb      	ldrb	r3, [r7, #7]
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	b25b      	sxtb	r3, r3
 8001dce:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8001dd2:	b25b      	sxtb	r3, r3
 8001dd4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001dd8:	b25b      	sxtb	r3, r3
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7ff ffad 	bl	8001d3c <RC522_SPI_Transfer>
	val = RC522_SPI_Transfer(0x00);
 8001de2:	2000      	movs	r0, #0
 8001de4:	f7ff ffaa 	bl	8001d3c <RC522_SPI_Transfer>
 8001de8:	4603      	mov	r3, r0
 8001dea:	73fb      	strb	r3, [r7, #15]

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 8001dec:	2201      	movs	r2, #1
 8001dee:	2110      	movs	r1, #16
 8001df0:	4803      	ldr	r0, [pc, #12]	@ (8001e00 <Read_MFRC522+0x4c>)
 8001df2:	f001 f845 	bl	8002e80 <HAL_GPIO_WritePin>

	return val;
 8001df6:	7bfb      	ldrb	r3, [r7, #15]

}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3710      	adds	r7, #16
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	40020000 	.word	0x40020000

08001e04 <SetBitMask>:
 * Description: Set RC522 register bit
 * Input parameters: reg - register address; mask - set value
 * Return value: None
 */
void SetBitMask(uchar reg, uchar mask)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	460a      	mov	r2, r1
 8001e0e:	71fb      	strb	r3, [r7, #7]
 8001e10:	4613      	mov	r3, r2
 8001e12:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 8001e14:	79fb      	ldrb	r3, [r7, #7]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7ff ffcc 	bl	8001db4 <Read_MFRC522>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 8001e20:	7bfa      	ldrb	r2, [r7, #15]
 8001e22:	79bb      	ldrb	r3, [r7, #6]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	b2da      	uxtb	r2, r3
 8001e28:	79fb      	ldrb	r3, [r7, #7]
 8001e2a:	4611      	mov	r1, r2
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7ff ff9b 	bl	8001d68 <Write_MFRC522>
}
 8001e32:	bf00      	nop
 8001e34:	3710      	adds	r7, #16
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <ClearBitMask>:
 * Description: clear RC522 register bit
 * Input parameters: reg - register address; mask - clear bit value
 * Return value: None
*/
void ClearBitMask(uchar reg, uchar mask)
{
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b084      	sub	sp, #16
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	4603      	mov	r3, r0
 8001e42:	460a      	mov	r2, r1
 8001e44:	71fb      	strb	r3, [r7, #7]
 8001e46:	4613      	mov	r3, r2
 8001e48:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 8001e4a:	79fb      	ldrb	r3, [r7, #7]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7ff ffb1 	bl	8001db4 <Read_MFRC522>
 8001e52:	4603      	mov	r3, r0
 8001e54:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 8001e56:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001e5a:	43db      	mvns	r3, r3
 8001e5c:	b25a      	sxtb	r2, r3
 8001e5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e62:	4013      	ands	r3, r2
 8001e64:	b25b      	sxtb	r3, r3
 8001e66:	b2da      	uxtb	r2, r3
 8001e68:	79fb      	ldrb	r3, [r7, #7]
 8001e6a:	4611      	mov	r1, r2
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7ff ff7b 	bl	8001d68 <Write_MFRC522>
}
 8001e72:	bf00      	nop
 8001e74:	3710      	adds	r7, #16
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}

08001e7a <AntennaOn>:
 * Description: Open antennas, each time you start or shut down the natural barrier between the transmitter should be at least 1ms interval
 * Input: None
 * Return value: None
 */
void AntennaOn(void)
{
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	af00      	add	r7, sp, #0

	Read_MFRC522(TxControlReg);
 8001e7e:	2014      	movs	r0, #20
 8001e80:	f7ff ff98 	bl	8001db4 <Read_MFRC522>
	SetBitMask(TxControlReg, 0x03);
 8001e84:	2103      	movs	r1, #3
 8001e86:	2014      	movs	r0, #20
 8001e88:	f7ff ffbc 	bl	8001e04 <SetBitMask>
}
 8001e8c:	bf00      	nop
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <MFRC522_Reset>:
 * Description: Reset RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Reset(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
    Write_MFRC522(CommandReg, PCD_RESETPHASE);
 8001e94:	210f      	movs	r1, #15
 8001e96:	2001      	movs	r0, #1
 8001e98:	f7ff ff66 	bl	8001d68 <Write_MFRC522>
}
 8001e9c:	bf00      	nop
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <MFRC522_Init>:
 * Description: Initialize RC522
 * Input: None
 * Return value: None
*/
void MFRC522_Init(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	2110      	movs	r1, #16
 8001ea8:	4812      	ldr	r0, [pc, #72]	@ (8001ef4 <MFRC522_Init+0x54>)
 8001eaa:	f000 ffe9 	bl	8002e80 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MFRC522_RST_PORT,MFRC522_RST_PIN,GPIO_PIN_SET);
 8001eae:	2201      	movs	r2, #1
 8001eb0:	2101      	movs	r1, #1
 8001eb2:	4811      	ldr	r0, [pc, #68]	@ (8001ef8 <MFRC522_Init+0x58>)
 8001eb4:	f000 ffe4 	bl	8002e80 <HAL_GPIO_WritePin>
	MFRC522_Reset();
 8001eb8:	f7ff ffea 	bl	8001e90 <MFRC522_Reset>

	//Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
	Write_MFRC522(TModeReg, 0x8D);		//Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 8001ebc:	218d      	movs	r1, #141	@ 0x8d
 8001ebe:	202a      	movs	r0, #42	@ 0x2a
 8001ec0:	f7ff ff52 	bl	8001d68 <Write_MFRC522>
	Write_MFRC522(TPrescalerReg, 0x3E);	//TModeReg[3..0] + TPrescalerReg
 8001ec4:	213e      	movs	r1, #62	@ 0x3e
 8001ec6:	202b      	movs	r0, #43	@ 0x2b
 8001ec8:	f7ff ff4e 	bl	8001d68 <Write_MFRC522>
	Write_MFRC522(TReloadRegL, 30);
 8001ecc:	211e      	movs	r1, #30
 8001ece:	202d      	movs	r0, #45	@ 0x2d
 8001ed0:	f7ff ff4a 	bl	8001d68 <Write_MFRC522>
	Write_MFRC522(TReloadRegH, 0);
 8001ed4:	2100      	movs	r1, #0
 8001ed6:	202c      	movs	r0, #44	@ 0x2c
 8001ed8:	f7ff ff46 	bl	8001d68 <Write_MFRC522>

	Write_MFRC522(TxAutoReg, 0x40);		// force 100% ASK modulation
 8001edc:	2140      	movs	r1, #64	@ 0x40
 8001ede:	2015      	movs	r0, #21
 8001ee0:	f7ff ff42 	bl	8001d68 <Write_MFRC522>
	Write_MFRC522(ModeReg, 0x3D);		// CRC Initial value 0x6363
 8001ee4:	213d      	movs	r1, #61	@ 0x3d
 8001ee6:	2011      	movs	r0, #17
 8001ee8:	f7ff ff3e 	bl	8001d68 <Write_MFRC522>

	AntennaOn();
 8001eec:	f7ff ffc5 	bl	8001e7a <AntennaOn>
}
 8001ef0:	bf00      	nop
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	40020000 	.word	0x40020000
 8001ef8:	40020400 	.word	0x40020400

08001efc <MFRC522_ToCard>:
 *			 backData--Received the card returns data,
 *			 backLen--Return data bit length
 * Return value: the successful return MI_OK
 */
uchar MFRC522_ToCard(uchar command, uchar *sendData, uchar sendLen, uchar *backData, uint *backLen)
{
 8001efc:	b590      	push	{r4, r7, lr}
 8001efe:	b089      	sub	sp, #36	@ 0x24
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	60b9      	str	r1, [r7, #8]
 8001f04:	607b      	str	r3, [r7, #4]
 8001f06:	4603      	mov	r3, r0
 8001f08:	73fb      	strb	r3, [r7, #15]
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	73bb      	strb	r3, [r7, #14]
    uchar status = MI_ERR;
 8001f0e:	2302      	movs	r3, #2
 8001f10:	77fb      	strb	r3, [r7, #31]
    uchar irqEn = 0x00;
 8001f12:	2300      	movs	r3, #0
 8001f14:	77bb      	strb	r3, [r7, #30]
    uchar waitIRq = 0x00;
 8001f16:	2300      	movs	r3, #0
 8001f18:	777b      	strb	r3, [r7, #29]
    uchar lastBits;
    uchar n;
    uint i;

    switch (command)
 8001f1a:	7bfb      	ldrb	r3, [r7, #15]
 8001f1c:	2b0c      	cmp	r3, #12
 8001f1e:	d006      	beq.n	8001f2e <MFRC522_ToCard+0x32>
 8001f20:	2b0e      	cmp	r3, #14
 8001f22:	d109      	bne.n	8001f38 <MFRC522_ToCard+0x3c>
    {
        case PCD_AUTHENT:		// Certification cards close
		{
			irqEn = 0x12;
 8001f24:	2312      	movs	r3, #18
 8001f26:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x10;
 8001f28:	2310      	movs	r3, #16
 8001f2a:	777b      	strb	r3, [r7, #29]
			break;
 8001f2c:	e005      	b.n	8001f3a <MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE:	// Transmit FIFO data
		{
			irqEn = 0x77;
 8001f2e:	2377      	movs	r3, #119	@ 0x77
 8001f30:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x30;
 8001f32:	2330      	movs	r3, #48	@ 0x30
 8001f34:	777b      	strb	r3, [r7, #29]
			break;
 8001f36:	e000      	b.n	8001f3a <MFRC522_ToCard+0x3e>
		}
		default:
			break;
 8001f38:	bf00      	nop
    }

    Write_MFRC522(CommIEnReg, irqEn|0x80);	// Interrupt request
 8001f3a:	7fbb      	ldrb	r3, [r7, #30]
 8001f3c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	4619      	mov	r1, r3
 8001f44:	2002      	movs	r0, #2
 8001f46:	f7ff ff0f 	bl	8001d68 <Write_MFRC522>
    ClearBitMask(CommIrqReg, 0x80);			// Clear all interrupt request bit
 8001f4a:	2180      	movs	r1, #128	@ 0x80
 8001f4c:	2004      	movs	r0, #4
 8001f4e:	f7ff ff74 	bl	8001e3a <ClearBitMask>
    SetBitMask(FIFOLevelReg, 0x80);			// FlushBuffer=1, FIFO Initialization
 8001f52:	2180      	movs	r1, #128	@ 0x80
 8001f54:	200a      	movs	r0, #10
 8001f56:	f7ff ff55 	bl	8001e04 <SetBitMask>

	Write_MFRC522(CommandReg, PCD_IDLE);	// NO action; Cancel the current command
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	2001      	movs	r0, #1
 8001f5e:	f7ff ff03 	bl	8001d68 <Write_MFRC522>

	// Writing data to the FIFO
    for (i=0; i<sendLen; i++)
 8001f62:	2300      	movs	r3, #0
 8001f64:	61bb      	str	r3, [r7, #24]
 8001f66:	e00a      	b.n	8001f7e <MFRC522_ToCard+0x82>
    {
		Write_MFRC522(FIFODataReg, sendData[i]);
 8001f68:	68ba      	ldr	r2, [r7, #8]
 8001f6a:	69bb      	ldr	r3, [r7, #24]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	4619      	mov	r1, r3
 8001f72:	2009      	movs	r0, #9
 8001f74:	f7ff fef8 	bl	8001d68 <Write_MFRC522>
    for (i=0; i<sendLen; i++)
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	61bb      	str	r3, [r7, #24]
 8001f7e:	7bbb      	ldrb	r3, [r7, #14]
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d3f0      	bcc.n	8001f68 <MFRC522_ToCard+0x6c>
	}

    // Execute the command
	Write_MFRC522(CommandReg, command);
 8001f86:	7bfb      	ldrb	r3, [r7, #15]
 8001f88:	4619      	mov	r1, r3
 8001f8a:	2001      	movs	r0, #1
 8001f8c:	f7ff feec 	bl	8001d68 <Write_MFRC522>
    if (command == PCD_TRANSCEIVE)
 8001f90:	7bfb      	ldrb	r3, [r7, #15]
 8001f92:	2b0c      	cmp	r3, #12
 8001f94:	d103      	bne.n	8001f9e <MFRC522_ToCard+0xa2>
    {
		SetBitMask(BitFramingReg, 0x80);		// StartSend=1,transmission of data starts
 8001f96:	2180      	movs	r1, #128	@ 0x80
 8001f98:	200d      	movs	r0, #13
 8001f9a:	f7ff ff33 	bl	8001e04 <SetBitMask>
	}

    // Waiting to receive data to complete
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 8001f9e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001fa2:	61bb      	str	r3, [r7, #24]
    do
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = Read_MFRC522(CommIrqReg);
 8001fa4:	2004      	movs	r0, #4
 8001fa6:	f7ff ff05 	bl	8001db4 <Read_MFRC522>
 8001faa:	4603      	mov	r3, r0
 8001fac:	773b      	strb	r3, [r7, #28]
        i--;
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	3b01      	subs	r3, #1
 8001fb2:	61bb      	str	r3, [r7, #24]
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8001fb4:	69bb      	ldr	r3, [r7, #24]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d00a      	beq.n	8001fd0 <MFRC522_ToCard+0xd4>
 8001fba:	7f3b      	ldrb	r3, [r7, #28]
 8001fbc:	f003 0301 	and.w	r3, r3, #1
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d105      	bne.n	8001fd0 <MFRC522_ToCard+0xd4>
 8001fc4:	7f3a      	ldrb	r2, [r7, #28]
 8001fc6:	7f7b      	ldrb	r3, [r7, #29]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d0e9      	beq.n	8001fa4 <MFRC522_ToCard+0xa8>

    ClearBitMask(BitFramingReg, 0x80);			//StartSend=0
 8001fd0:	2180      	movs	r1, #128	@ 0x80
 8001fd2:	200d      	movs	r0, #13
 8001fd4:	f7ff ff31 	bl	8001e3a <ClearBitMask>

    if (i != 0)
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d052      	beq.n	8002084 <MFRC522_ToCard+0x188>
    {
        if(!(Read_MFRC522(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
 8001fde:	2006      	movs	r0, #6
 8001fe0:	f7ff fee8 	bl	8001db4 <Read_MFRC522>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	f003 031b 	and.w	r3, r3, #27
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d148      	bne.n	8002080 <MFRC522_ToCard+0x184>
        {
            status = MI_OK;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	77fb      	strb	r3, [r7, #31]
            if (n & irqEn & 0x01)
 8001ff2:	7f3a      	ldrb	r2, [r7, #28]
 8001ff4:	7fbb      	ldrb	r3, [r7, #30]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <MFRC522_ToCard+0x10a>
            {
				status = MI_NOTAGERR;
 8002002:	2301      	movs	r3, #1
 8002004:	77fb      	strb	r3, [r7, #31]
			}

            if (command == PCD_TRANSCEIVE)
 8002006:	7bfb      	ldrb	r3, [r7, #15]
 8002008:	2b0c      	cmp	r3, #12
 800200a:	d13b      	bne.n	8002084 <MFRC522_ToCard+0x188>
            {
               	n = Read_MFRC522(FIFOLevelReg);
 800200c:	200a      	movs	r0, #10
 800200e:	f7ff fed1 	bl	8001db4 <Read_MFRC522>
 8002012:	4603      	mov	r3, r0
 8002014:	773b      	strb	r3, [r7, #28]
              	lastBits = Read_MFRC522(ControlReg) & 0x07;
 8002016:	200c      	movs	r0, #12
 8002018:	f7ff fecc 	bl	8001db4 <Read_MFRC522>
 800201c:	4603      	mov	r3, r0
 800201e:	f003 0307 	and.w	r3, r3, #7
 8002022:	75fb      	strb	r3, [r7, #23]
                if (lastBits)
 8002024:	7dfb      	ldrb	r3, [r7, #23]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d008      	beq.n	800203c <MFRC522_ToCard+0x140>
                {
					*backLen = (n-1)*8 + lastBits;
 800202a:	7f3b      	ldrb	r3, [r7, #28]
 800202c:	3b01      	subs	r3, #1
 800202e:	00da      	lsls	r2, r3, #3
 8002030:	7dfb      	ldrb	r3, [r7, #23]
 8002032:	4413      	add	r3, r2
 8002034:	461a      	mov	r2, r3
 8002036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002038:	601a      	str	r2, [r3, #0]
 800203a:	e004      	b.n	8002046 <MFRC522_ToCard+0x14a>
				}
                else
                {
					*backLen = n*8;
 800203c:	7f3b      	ldrb	r3, [r7, #28]
 800203e:	00db      	lsls	r3, r3, #3
 8002040:	461a      	mov	r2, r3
 8002042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002044:	601a      	str	r2, [r3, #0]
				}

                if (n == 0)
 8002046:	7f3b      	ldrb	r3, [r7, #28]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d101      	bne.n	8002050 <MFRC522_ToCard+0x154>
                {
					n = 1;
 800204c:	2301      	movs	r3, #1
 800204e:	773b      	strb	r3, [r7, #28]
				}
                if (n > MAX_LEN)
 8002050:	7f3b      	ldrb	r3, [r7, #28]
 8002052:	2b10      	cmp	r3, #16
 8002054:	d901      	bls.n	800205a <MFRC522_ToCard+0x15e>
                {
					n = MAX_LEN;
 8002056:	2310      	movs	r3, #16
 8002058:	773b      	strb	r3, [r7, #28]
				}

                // Reading the received data in FIFO
                for (i=0; i<n; i++)
 800205a:	2300      	movs	r3, #0
 800205c:	61bb      	str	r3, [r7, #24]
 800205e:	e00a      	b.n	8002076 <MFRC522_ToCard+0x17a>
                {
					backData[i] = Read_MFRC522(FIFODataReg);
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	18d4      	adds	r4, r2, r3
 8002066:	2009      	movs	r0, #9
 8002068:	f7ff fea4 	bl	8001db4 <Read_MFRC522>
 800206c:	4603      	mov	r3, r0
 800206e:	7023      	strb	r3, [r4, #0]
                for (i=0; i<n; i++)
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	3301      	adds	r3, #1
 8002074:	61bb      	str	r3, [r7, #24]
 8002076:	7f3b      	ldrb	r3, [r7, #28]
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	429a      	cmp	r2, r3
 800207c:	d3f0      	bcc.n	8002060 <MFRC522_ToCard+0x164>
 800207e:	e001      	b.n	8002084 <MFRC522_ToCard+0x188>
				}
            }
        }
        else
        {
			status = MI_ERR;
 8002080:	2302      	movs	r3, #2
 8002082:	77fb      	strb	r3, [r7, #31]
    }

    //SetBitMask(ControlReg,0x80);           //timer stops
    //Write_MFRC522(CommandReg, PCD_IDLE);

    return status;
 8002084:	7ffb      	ldrb	r3, [r7, #31]
}
 8002086:	4618      	mov	r0, r3
 8002088:	3724      	adds	r7, #36	@ 0x24
 800208a:	46bd      	mov	sp, r7
 800208c:	bd90      	pop	{r4, r7, pc}

0800208e <MFRC522_Request>:
 *    0x0800 = Mifare_Pro(X)
 *    0x4403 = Mifare_DESFire
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Request(uchar reqMode, uchar *TagType)
{
 800208e:	b580      	push	{r7, lr}
 8002090:	b086      	sub	sp, #24
 8002092:	af02      	add	r7, sp, #8
 8002094:	4603      	mov	r3, r0
 8002096:	6039      	str	r1, [r7, #0]
 8002098:	71fb      	strb	r3, [r7, #7]
	uchar status;
	uint backBits;			 // The received data bits

	Write_MFRC522(BitFramingReg, 0x07);		//TxLastBists = BitFramingReg[2..0]
 800209a:	2107      	movs	r1, #7
 800209c:	200d      	movs	r0, #13
 800209e:	f7ff fe63 	bl	8001d68 <Write_MFRC522>

	TagType[0] = reqMode;
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	79fa      	ldrb	r2, [r7, #7]
 80020a6:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 80020a8:	f107 0308 	add.w	r3, r7, #8
 80020ac:	9300      	str	r3, [sp, #0]
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	2201      	movs	r2, #1
 80020b2:	6839      	ldr	r1, [r7, #0]
 80020b4:	200c      	movs	r0, #12
 80020b6:	f7ff ff21 	bl	8001efc <MFRC522_ToCard>
 80020ba:	4603      	mov	r3, r0
 80020bc:	73fb      	strb	r3, [r7, #15]

	if ((status != MI_OK) || (backBits != 0x10))
 80020be:	7bfb      	ldrb	r3, [r7, #15]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d102      	bne.n	80020ca <MFRC522_Request+0x3c>
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	2b10      	cmp	r3, #16
 80020c8:	d001      	beq.n	80020ce <MFRC522_Request+0x40>
	{
		status = MI_ERR;
 80020ca:	2302      	movs	r3, #2
 80020cc:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 80020ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3710      	adds	r7, #16
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <MFRC522_Anticoll>:
 * Description: Anti-collision detection, reading selected card serial number card
 * Input parameters: serNum - returns 4 bytes card serial number, the first 5 bytes for the checksum byte
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Anticoll(uchar *serNum)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b086      	sub	sp, #24
 80020dc:	af02      	add	r7, sp, #8
 80020de:	6078      	str	r0, [r7, #4]
    uchar status;
    uchar i;
	uchar serNumCheck=0;
 80020e0:	2300      	movs	r3, #0
 80020e2:	737b      	strb	r3, [r7, #13]
    uint unLen;

	Write_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 80020e4:	2100      	movs	r1, #0
 80020e6:	200d      	movs	r0, #13
 80020e8:	f7ff fe3e 	bl	8001d68 <Write_MFRC522>

    serNum[0] = PICC_ANTICOLL;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2293      	movs	r2, #147	@ 0x93
 80020f0:	701a      	strb	r2, [r3, #0]
    serNum[1] = 0x20;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	3301      	adds	r3, #1
 80020f6:	2220      	movs	r2, #32
 80020f8:	701a      	strb	r2, [r3, #0]
    status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 80020fa:	f107 0308 	add.w	r3, r7, #8
 80020fe:	9300      	str	r3, [sp, #0]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2202      	movs	r2, #2
 8002104:	6879      	ldr	r1, [r7, #4]
 8002106:	200c      	movs	r0, #12
 8002108:	f7ff fef8 	bl	8001efc <MFRC522_ToCard>
 800210c:	4603      	mov	r3, r0
 800210e:	73fb      	strb	r3, [r7, #15]

    if (status == MI_OK)
 8002110:	7bfb      	ldrb	r3, [r7, #15]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d118      	bne.n	8002148 <MFRC522_Anticoll+0x70>
	{
    	 //Check card serial number
		for (i=0; i<4; i++)
 8002116:	2300      	movs	r3, #0
 8002118:	73bb      	strb	r3, [r7, #14]
 800211a:	e009      	b.n	8002130 <MFRC522_Anticoll+0x58>
		{
		 	serNumCheck ^= serNum[i];
 800211c:	7bbb      	ldrb	r3, [r7, #14]
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	4413      	add	r3, r2
 8002122:	781a      	ldrb	r2, [r3, #0]
 8002124:	7b7b      	ldrb	r3, [r7, #13]
 8002126:	4053      	eors	r3, r2
 8002128:	737b      	strb	r3, [r7, #13]
		for (i=0; i<4; i++)
 800212a:	7bbb      	ldrb	r3, [r7, #14]
 800212c:	3301      	adds	r3, #1
 800212e:	73bb      	strb	r3, [r7, #14]
 8002130:	7bbb      	ldrb	r3, [r7, #14]
 8002132:	2b03      	cmp	r3, #3
 8002134:	d9f2      	bls.n	800211c <MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i])
 8002136:	7bbb      	ldrb	r3, [r7, #14]
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	4413      	add	r3, r2
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	7b7a      	ldrb	r2, [r7, #13]
 8002140:	429a      	cmp	r2, r3
 8002142:	d001      	beq.n	8002148 <MFRC522_Anticoll+0x70>
		{
			status = MI_ERR;
 8002144:	2302      	movs	r3, #2
 8002146:	73fb      	strb	r3, [r7, #15]
		}
    }

    return status;
 8002148:	7bfb      	ldrb	r3, [r7, #15]
}
 800214a:	4618      	mov	r0, r3
 800214c:	3710      	adds	r7, #16
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
	...

08002154 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800215a:	2300      	movs	r3, #0
 800215c:	607b      	str	r3, [r7, #4]
 800215e:	4b10      	ldr	r3, [pc, #64]	@ (80021a0 <HAL_MspInit+0x4c>)
 8002160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002162:	4a0f      	ldr	r2, [pc, #60]	@ (80021a0 <HAL_MspInit+0x4c>)
 8002164:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002168:	6453      	str	r3, [r2, #68]	@ 0x44
 800216a:	4b0d      	ldr	r3, [pc, #52]	@ (80021a0 <HAL_MspInit+0x4c>)
 800216c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800216e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002172:	607b      	str	r3, [r7, #4]
 8002174:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002176:	2300      	movs	r3, #0
 8002178:	603b      	str	r3, [r7, #0]
 800217a:	4b09      	ldr	r3, [pc, #36]	@ (80021a0 <HAL_MspInit+0x4c>)
 800217c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800217e:	4a08      	ldr	r2, [pc, #32]	@ (80021a0 <HAL_MspInit+0x4c>)
 8002180:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002184:	6413      	str	r3, [r2, #64]	@ 0x40
 8002186:	4b06      	ldr	r3, [pc, #24]	@ (80021a0 <HAL_MspInit+0x4c>)
 8002188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800218a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800218e:	603b      	str	r3, [r7, #0]
 8002190:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002192:	2007      	movs	r0, #7
 8002194:	f000 fbf4 	bl	8002980 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002198:	bf00      	nop
 800219a:	3708      	adds	r7, #8
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	40023800 	.word	0x40023800

080021a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b08a      	sub	sp, #40	@ 0x28
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ac:	f107 0314 	add.w	r3, r7, #20
 80021b0:	2200      	movs	r2, #0
 80021b2:	601a      	str	r2, [r3, #0]
 80021b4:	605a      	str	r2, [r3, #4]
 80021b6:	609a      	str	r2, [r3, #8]
 80021b8:	60da      	str	r2, [r3, #12]
 80021ba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a19      	ldr	r2, [pc, #100]	@ (8002228 <HAL_SPI_MspInit+0x84>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d12b      	bne.n	800221e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80021c6:	2300      	movs	r3, #0
 80021c8:	613b      	str	r3, [r7, #16]
 80021ca:	4b18      	ldr	r3, [pc, #96]	@ (800222c <HAL_SPI_MspInit+0x88>)
 80021cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ce:	4a17      	ldr	r2, [pc, #92]	@ (800222c <HAL_SPI_MspInit+0x88>)
 80021d0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80021d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80021d6:	4b15      	ldr	r3, [pc, #84]	@ (800222c <HAL_SPI_MspInit+0x88>)
 80021d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021da:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021de:	613b      	str	r3, [r7, #16]
 80021e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021e2:	2300      	movs	r3, #0
 80021e4:	60fb      	str	r3, [r7, #12]
 80021e6:	4b11      	ldr	r3, [pc, #68]	@ (800222c <HAL_SPI_MspInit+0x88>)
 80021e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ea:	4a10      	ldr	r2, [pc, #64]	@ (800222c <HAL_SPI_MspInit+0x88>)
 80021ec:	f043 0301 	orr.w	r3, r3, #1
 80021f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80021f2:	4b0e      	ldr	r3, [pc, #56]	@ (800222c <HAL_SPI_MspInit+0x88>)
 80021f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021f6:	f003 0301 	and.w	r3, r3, #1
 80021fa:	60fb      	str	r3, [r7, #12]
 80021fc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80021fe:	23e0      	movs	r3, #224	@ 0xe0
 8002200:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002202:	2302      	movs	r3, #2
 8002204:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002206:	2300      	movs	r3, #0
 8002208:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800220a:	2303      	movs	r3, #3
 800220c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800220e:	2305      	movs	r3, #5
 8002210:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002212:	f107 0314 	add.w	r3, r7, #20
 8002216:	4619      	mov	r1, r3
 8002218:	4805      	ldr	r0, [pc, #20]	@ (8002230 <HAL_SPI_MspInit+0x8c>)
 800221a:	f000 fc85 	bl	8002b28 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800221e:	bf00      	nop
 8002220:	3728      	adds	r7, #40	@ 0x28
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	40013000 	.word	0x40013000
 800222c:	40023800 	.word	0x40023800
 8002230:	40020000 	.word	0x40020000

08002234 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002234:	b480      	push	{r7}
 8002236:	b085      	sub	sp, #20
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a0b      	ldr	r2, [pc, #44]	@ (8002270 <HAL_TIM_PWM_MspInit+0x3c>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d10d      	bne.n	8002262 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002246:	2300      	movs	r3, #0
 8002248:	60fb      	str	r3, [r7, #12]
 800224a:	4b0a      	ldr	r3, [pc, #40]	@ (8002274 <HAL_TIM_PWM_MspInit+0x40>)
 800224c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800224e:	4a09      	ldr	r2, [pc, #36]	@ (8002274 <HAL_TIM_PWM_MspInit+0x40>)
 8002250:	f043 0301 	orr.w	r3, r3, #1
 8002254:	6453      	str	r3, [r2, #68]	@ 0x44
 8002256:	4b07      	ldr	r3, [pc, #28]	@ (8002274 <HAL_TIM_PWM_MspInit+0x40>)
 8002258:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	60fb      	str	r3, [r7, #12]
 8002260:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002262:	bf00      	nop
 8002264:	3714      	adds	r7, #20
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	40010000 	.word	0x40010000
 8002274:	40023800 	.word	0x40023800

08002278 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b08a      	sub	sp, #40	@ 0x28
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002280:	f107 0314 	add.w	r3, r7, #20
 8002284:	2200      	movs	r2, #0
 8002286:	601a      	str	r2, [r3, #0]
 8002288:	605a      	str	r2, [r3, #4]
 800228a:	609a      	str	r2, [r3, #8]
 800228c:	60da      	str	r2, [r3, #12]
 800228e:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002298:	d133      	bne.n	8002302 <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800229a:	2300      	movs	r3, #0
 800229c:	613b      	str	r3, [r7, #16]
 800229e:	4b1b      	ldr	r3, [pc, #108]	@ (800230c <HAL_TIM_IC_MspInit+0x94>)
 80022a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a2:	4a1a      	ldr	r2, [pc, #104]	@ (800230c <HAL_TIM_IC_MspInit+0x94>)
 80022a4:	f043 0301 	orr.w	r3, r3, #1
 80022a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80022aa:	4b18      	ldr	r3, [pc, #96]	@ (800230c <HAL_TIM_IC_MspInit+0x94>)
 80022ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	613b      	str	r3, [r7, #16]
 80022b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022b6:	2300      	movs	r3, #0
 80022b8:	60fb      	str	r3, [r7, #12]
 80022ba:	4b14      	ldr	r3, [pc, #80]	@ (800230c <HAL_TIM_IC_MspInit+0x94>)
 80022bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022be:	4a13      	ldr	r2, [pc, #76]	@ (800230c <HAL_TIM_IC_MspInit+0x94>)
 80022c0:	f043 0301 	orr.w	r3, r3, #1
 80022c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80022c6:	4b11      	ldr	r3, [pc, #68]	@ (800230c <HAL_TIM_IC_MspInit+0x94>)
 80022c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ca:	f003 0301 	and.w	r3, r3, #1
 80022ce:	60fb      	str	r3, [r7, #12]
 80022d0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80022d2:	2301      	movs	r3, #1
 80022d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d6:	2302      	movs	r3, #2
 80022d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022da:	2300      	movs	r3, #0
 80022dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022de:	2300      	movs	r3, #0
 80022e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80022e2:	2301      	movs	r3, #1
 80022e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022e6:	f107 0314 	add.w	r3, r7, #20
 80022ea:	4619      	mov	r1, r3
 80022ec:	4808      	ldr	r0, [pc, #32]	@ (8002310 <HAL_TIM_IC_MspInit+0x98>)
 80022ee:	f000 fc1b 	bl	8002b28 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80022f2:	2200      	movs	r2, #0
 80022f4:	2100      	movs	r1, #0
 80022f6:	201c      	movs	r0, #28
 80022f8:	f000 fb4d 	bl	8002996 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80022fc:	201c      	movs	r0, #28
 80022fe:	f000 fb66 	bl	80029ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002302:	bf00      	nop
 8002304:	3728      	adds	r7, #40	@ 0x28
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	40023800 	.word	0x40023800
 8002310:	40020000 	.word	0x40020000

08002314 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b088      	sub	sp, #32
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800231c:	f107 030c 	add.w	r3, r7, #12
 8002320:	2200      	movs	r2, #0
 8002322:	601a      	str	r2, [r3, #0]
 8002324:	605a      	str	r2, [r3, #4]
 8002326:	609a      	str	r2, [r3, #8]
 8002328:	60da      	str	r2, [r3, #12]
 800232a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a12      	ldr	r2, [pc, #72]	@ (800237c <HAL_TIM_MspPostInit+0x68>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d11e      	bne.n	8002374 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002336:	2300      	movs	r3, #0
 8002338:	60bb      	str	r3, [r7, #8]
 800233a:	4b11      	ldr	r3, [pc, #68]	@ (8002380 <HAL_TIM_MspPostInit+0x6c>)
 800233c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800233e:	4a10      	ldr	r2, [pc, #64]	@ (8002380 <HAL_TIM_MspPostInit+0x6c>)
 8002340:	f043 0301 	orr.w	r3, r3, #1
 8002344:	6313      	str	r3, [r2, #48]	@ 0x30
 8002346:	4b0e      	ldr	r3, [pc, #56]	@ (8002380 <HAL_TIM_MspPostInit+0x6c>)
 8002348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800234a:	f003 0301 	and.w	r3, r3, #1
 800234e:	60bb      	str	r3, [r7, #8]
 8002350:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = IN1_Pin|IN3_Pin|IN2_Pin|IN4_Pin;
 8002352:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8002356:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002358:	2302      	movs	r3, #2
 800235a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235c:	2300      	movs	r3, #0
 800235e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002360:	2300      	movs	r3, #0
 8002362:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002364:	2301      	movs	r3, #1
 8002366:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002368:	f107 030c 	add.w	r3, r7, #12
 800236c:	4619      	mov	r1, r3
 800236e:	4805      	ldr	r0, [pc, #20]	@ (8002384 <HAL_TIM_MspPostInit+0x70>)
 8002370:	f000 fbda 	bl	8002b28 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002374:	bf00      	nop
 8002376:	3720      	adds	r7, #32
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	40010000 	.word	0x40010000
 8002380:	40023800 	.word	0x40023800
 8002384:	40020000 	.word	0x40020000

08002388 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b08a      	sub	sp, #40	@ 0x28
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002390:	f107 0314 	add.w	r3, r7, #20
 8002394:	2200      	movs	r2, #0
 8002396:	601a      	str	r2, [r3, #0]
 8002398:	605a      	str	r2, [r3, #4]
 800239a:	609a      	str	r2, [r3, #8]
 800239c:	60da      	str	r2, [r3, #12]
 800239e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a1d      	ldr	r2, [pc, #116]	@ (800241c <HAL_UART_MspInit+0x94>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d133      	bne.n	8002412 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80023aa:	2300      	movs	r3, #0
 80023ac:	613b      	str	r3, [r7, #16]
 80023ae:	4b1c      	ldr	r3, [pc, #112]	@ (8002420 <HAL_UART_MspInit+0x98>)
 80023b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b2:	4a1b      	ldr	r2, [pc, #108]	@ (8002420 <HAL_UART_MspInit+0x98>)
 80023b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80023ba:	4b19      	ldr	r3, [pc, #100]	@ (8002420 <HAL_UART_MspInit+0x98>)
 80023bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023c2:	613b      	str	r3, [r7, #16]
 80023c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023c6:	2300      	movs	r3, #0
 80023c8:	60fb      	str	r3, [r7, #12]
 80023ca:	4b15      	ldr	r3, [pc, #84]	@ (8002420 <HAL_UART_MspInit+0x98>)
 80023cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ce:	4a14      	ldr	r2, [pc, #80]	@ (8002420 <HAL_UART_MspInit+0x98>)
 80023d0:	f043 0301 	orr.w	r3, r3, #1
 80023d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80023d6:	4b12      	ldr	r3, [pc, #72]	@ (8002420 <HAL_UART_MspInit+0x98>)
 80023d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023da:	f003 0301 	and.w	r3, r3, #1
 80023de:	60fb      	str	r3, [r7, #12]
 80023e0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80023e2:	230c      	movs	r3, #12
 80023e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e6:	2302      	movs	r3, #2
 80023e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ea:	2300      	movs	r3, #0
 80023ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ee:	2303      	movs	r3, #3
 80023f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80023f2:	2307      	movs	r3, #7
 80023f4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023f6:	f107 0314 	add.w	r3, r7, #20
 80023fa:	4619      	mov	r1, r3
 80023fc:	4809      	ldr	r0, [pc, #36]	@ (8002424 <HAL_UART_MspInit+0x9c>)
 80023fe:	f000 fb93 	bl	8002b28 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002402:	2200      	movs	r2, #0
 8002404:	2100      	movs	r1, #0
 8002406:	2026      	movs	r0, #38	@ 0x26
 8002408:	f000 fac5 	bl	8002996 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800240c:	2026      	movs	r0, #38	@ 0x26
 800240e:	f000 fade 	bl	80029ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002412:	bf00      	nop
 8002414:	3728      	adds	r7, #40	@ 0x28
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	40004400 	.word	0x40004400
 8002420:	40023800 	.word	0x40023800
 8002424:	40020000 	.word	0x40020000

08002428 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800242c:	bf00      	nop
 800242e:	e7fd      	b.n	800242c <NMI_Handler+0x4>

08002430 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002434:	bf00      	nop
 8002436:	e7fd      	b.n	8002434 <HardFault_Handler+0x4>

08002438 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800243c:	bf00      	nop
 800243e:	e7fd      	b.n	800243c <MemManage_Handler+0x4>

08002440 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002444:	bf00      	nop
 8002446:	e7fd      	b.n	8002444 <BusFault_Handler+0x4>

08002448 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800244c:	bf00      	nop
 800244e:	e7fd      	b.n	800244c <UsageFault_Handler+0x4>

08002450 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002454:	bf00      	nop
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr

0800245e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800245e:	b480      	push	{r7}
 8002460:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002462:	bf00      	nop
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002470:	bf00      	nop
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr

0800247a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800247a:	b580      	push	{r7, lr}
 800247c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800247e:	f000 f96b 	bl	8002758 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002482:	bf00      	nop
 8002484:	bd80      	pop	{r7, pc}
	...

08002488 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800248c:	4802      	ldr	r0, [pc, #8]	@ (8002498 <TIM2_IRQHandler+0x10>)
 800248e:	f002 f89f 	bl	80045d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002492:	bf00      	nop
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	20000294 	.word	0x20000294

0800249c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80024a0:	4802      	ldr	r0, [pc, #8]	@ (80024ac <USART2_IRQHandler+0x10>)
 80024a2:	f003 f8dd 	bl	8005660 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80024a6:	bf00      	nop
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	200002dc 	.word	0x200002dc

080024b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
  return 1;
 80024b4:	2301      	movs	r3, #1
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <_kill>:

int _kill(int pid, int sig)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80024ca:	f004 fdef 	bl	80070ac <__errno>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2216      	movs	r2, #22
 80024d2:	601a      	str	r2, [r3, #0]
  return -1;
 80024d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3708      	adds	r7, #8
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}

080024e0 <_exit>:

void _exit (int status)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80024e8:	f04f 31ff 	mov.w	r1, #4294967295
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f7ff ffe7 	bl	80024c0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80024f2:	bf00      	nop
 80024f4:	e7fd      	b.n	80024f2 <_exit+0x12>

080024f6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024f6:	b580      	push	{r7, lr}
 80024f8:	b086      	sub	sp, #24
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	60f8      	str	r0, [r7, #12]
 80024fe:	60b9      	str	r1, [r7, #8]
 8002500:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002502:	2300      	movs	r3, #0
 8002504:	617b      	str	r3, [r7, #20]
 8002506:	e00a      	b.n	800251e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002508:	f3af 8000 	nop.w
 800250c:	4601      	mov	r1, r0
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	1c5a      	adds	r2, r3, #1
 8002512:	60ba      	str	r2, [r7, #8]
 8002514:	b2ca      	uxtb	r2, r1
 8002516:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	3301      	adds	r3, #1
 800251c:	617b      	str	r3, [r7, #20]
 800251e:	697a      	ldr	r2, [r7, #20]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	429a      	cmp	r2, r3
 8002524:	dbf0      	blt.n	8002508 <_read+0x12>
  }

  return len;
 8002526:	687b      	ldr	r3, [r7, #4]
}
 8002528:	4618      	mov	r0, r3
 800252a:	3718      	adds	r7, #24
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}

08002530 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b086      	sub	sp, #24
 8002534:	af00      	add	r7, sp, #0
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	60b9      	str	r1, [r7, #8]
 800253a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800253c:	2300      	movs	r3, #0
 800253e:	617b      	str	r3, [r7, #20]
 8002540:	e009      	b.n	8002556 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	1c5a      	adds	r2, r3, #1
 8002546:	60ba      	str	r2, [r7, #8]
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	4618      	mov	r0, r3
 800254c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	3301      	adds	r3, #1
 8002554:	617b      	str	r3, [r7, #20]
 8002556:	697a      	ldr	r2, [r7, #20]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	429a      	cmp	r2, r3
 800255c:	dbf1      	blt.n	8002542 <_write+0x12>
  }
  return len;
 800255e:	687b      	ldr	r3, [r7, #4]
}
 8002560:	4618      	mov	r0, r3
 8002562:	3718      	adds	r7, #24
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}

08002568 <_close>:

int _close(int file)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002570:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002574:	4618      	mov	r0, r3
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002590:	605a      	str	r2, [r3, #4]
  return 0;
 8002592:	2300      	movs	r3, #0
}
 8002594:	4618      	mov	r0, r3
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <_isatty>:

int _isatty(int file)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80025a8:	2301      	movs	r3, #1
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	370c      	adds	r7, #12
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr

080025b6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80025b6:	b480      	push	{r7}
 80025b8:	b085      	sub	sp, #20
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	60f8      	str	r0, [r7, #12]
 80025be:	60b9      	str	r1, [r7, #8]
 80025c0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80025c2:	2300      	movs	r3, #0
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3714      	adds	r7, #20
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b086      	sub	sp, #24
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025d8:	4a14      	ldr	r2, [pc, #80]	@ (800262c <_sbrk+0x5c>)
 80025da:	4b15      	ldr	r3, [pc, #84]	@ (8002630 <_sbrk+0x60>)
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025e4:	4b13      	ldr	r3, [pc, #76]	@ (8002634 <_sbrk+0x64>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d102      	bne.n	80025f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025ec:	4b11      	ldr	r3, [pc, #68]	@ (8002634 <_sbrk+0x64>)
 80025ee:	4a12      	ldr	r2, [pc, #72]	@ (8002638 <_sbrk+0x68>)
 80025f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025f2:	4b10      	ldr	r3, [pc, #64]	@ (8002634 <_sbrk+0x64>)
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4413      	add	r3, r2
 80025fa:	693a      	ldr	r2, [r7, #16]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d207      	bcs.n	8002610 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002600:	f004 fd54 	bl	80070ac <__errno>
 8002604:	4603      	mov	r3, r0
 8002606:	220c      	movs	r2, #12
 8002608:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800260a:	f04f 33ff 	mov.w	r3, #4294967295
 800260e:	e009      	b.n	8002624 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002610:	4b08      	ldr	r3, [pc, #32]	@ (8002634 <_sbrk+0x64>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002616:	4b07      	ldr	r3, [pc, #28]	@ (8002634 <_sbrk+0x64>)
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4413      	add	r3, r2
 800261e:	4a05      	ldr	r2, [pc, #20]	@ (8002634 <_sbrk+0x64>)
 8002620:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002622:	68fb      	ldr	r3, [r7, #12]
}
 8002624:	4618      	mov	r0, r3
 8002626:	3718      	adds	r7, #24
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	20020000 	.word	0x20020000
 8002630:	00000400 	.word	0x00000400
 8002634:	200003dc 	.word	0x200003dc
 8002638:	20000530 	.word	0x20000530

0800263c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002640:	4b06      	ldr	r3, [pc, #24]	@ (800265c <SystemInit+0x20>)
 8002642:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002646:	4a05      	ldr	r2, [pc, #20]	@ (800265c <SystemInit+0x20>)
 8002648:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800264c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002650:	bf00      	nop
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	e000ed00 	.word	0xe000ed00

08002660 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   sp, =_estack      /* set stack pointer */
 8002660:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002698 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002664:	f7ff ffea 	bl	800263c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002668:	480c      	ldr	r0, [pc, #48]	@ (800269c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800266a:	490d      	ldr	r1, [pc, #52]	@ (80026a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800266c:	4a0d      	ldr	r2, [pc, #52]	@ (80026a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800266e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002670:	e002      	b.n	8002678 <LoopCopyDataInit>

08002672 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002672:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002674:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002676:	3304      	adds	r3, #4

08002678 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002678:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800267a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800267c:	d3f9      	bcc.n	8002672 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800267e:	4a0a      	ldr	r2, [pc, #40]	@ (80026a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002680:	4c0a      	ldr	r4, [pc, #40]	@ (80026ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8002682:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002684:	e001      	b.n	800268a <LoopFillZerobss>

08002686 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002686:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002688:	3204      	adds	r2, #4

0800268a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800268a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800268c:	d3fb      	bcc.n	8002686 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800268e:	f004 fd13 	bl	80070b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002692:	f7fe fc31 	bl	8000ef8 <main>
  bx  lr    
 8002696:	4770      	bx	lr
   ldr   sp, =_estack      /* set stack pointer */
 8002698:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800269c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026a0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80026a4:	08009588 	.word	0x08009588
  ldr r2, =_sbss
 80026a8:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80026ac:	20000530 	.word	0x20000530

080026b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026b0:	e7fe      	b.n	80026b0 <ADC_IRQHandler>
	...

080026b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80026b8:	4b0e      	ldr	r3, [pc, #56]	@ (80026f4 <HAL_Init+0x40>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a0d      	ldr	r2, [pc, #52]	@ (80026f4 <HAL_Init+0x40>)
 80026be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80026c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80026c4:	4b0b      	ldr	r3, [pc, #44]	@ (80026f4 <HAL_Init+0x40>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a0a      	ldr	r2, [pc, #40]	@ (80026f4 <HAL_Init+0x40>)
 80026ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80026ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026d0:	4b08      	ldr	r3, [pc, #32]	@ (80026f4 <HAL_Init+0x40>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a07      	ldr	r2, [pc, #28]	@ (80026f4 <HAL_Init+0x40>)
 80026d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026dc:	2003      	movs	r0, #3
 80026de:	f000 f94f 	bl	8002980 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026e2:	2000      	movs	r0, #0
 80026e4:	f000 f808 	bl	80026f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026e8:	f7ff fd34 	bl	8002154 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026ec:	2300      	movs	r3, #0
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	40023c00 	.word	0x40023c00

080026f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002700:	4b12      	ldr	r3, [pc, #72]	@ (800274c <HAL_InitTick+0x54>)
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	4b12      	ldr	r3, [pc, #72]	@ (8002750 <HAL_InitTick+0x58>)
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	4619      	mov	r1, r3
 800270a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800270e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002712:	fbb2 f3f3 	udiv	r3, r2, r3
 8002716:	4618      	mov	r0, r3
 8002718:	f000 f967 	bl	80029ea <HAL_SYSTICK_Config>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d001      	beq.n	8002726 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e00e      	b.n	8002744 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2b0f      	cmp	r3, #15
 800272a:	d80a      	bhi.n	8002742 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800272c:	2200      	movs	r2, #0
 800272e:	6879      	ldr	r1, [r7, #4]
 8002730:	f04f 30ff 	mov.w	r0, #4294967295
 8002734:	f000 f92f 	bl	8002996 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002738:	4a06      	ldr	r2, [pc, #24]	@ (8002754 <HAL_InitTick+0x5c>)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800273e:	2300      	movs	r3, #0
 8002740:	e000      	b.n	8002744 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
}
 8002744:	4618      	mov	r0, r3
 8002746:	3708      	adds	r7, #8
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	20000000 	.word	0x20000000
 8002750:	20000008 	.word	0x20000008
 8002754:	20000004 	.word	0x20000004

08002758 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800275c:	4b06      	ldr	r3, [pc, #24]	@ (8002778 <HAL_IncTick+0x20>)
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	461a      	mov	r2, r3
 8002762:	4b06      	ldr	r3, [pc, #24]	@ (800277c <HAL_IncTick+0x24>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4413      	add	r3, r2
 8002768:	4a04      	ldr	r2, [pc, #16]	@ (800277c <HAL_IncTick+0x24>)
 800276a:	6013      	str	r3, [r2, #0]
}
 800276c:	bf00      	nop
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	20000008 	.word	0x20000008
 800277c:	200003e0 	.word	0x200003e0

08002780 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0
  return uwTick;
 8002784:	4b03      	ldr	r3, [pc, #12]	@ (8002794 <HAL_GetTick+0x14>)
 8002786:	681b      	ldr	r3, [r3, #0]
}
 8002788:	4618      	mov	r0, r3
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	200003e0 	.word	0x200003e0

08002798 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027a0:	f7ff ffee 	bl	8002780 <HAL_GetTick>
 80027a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027b0:	d005      	beq.n	80027be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027b2:	4b0a      	ldr	r3, [pc, #40]	@ (80027dc <HAL_Delay+0x44>)
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	461a      	mov	r2, r3
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	4413      	add	r3, r2
 80027bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80027be:	bf00      	nop
 80027c0:	f7ff ffde 	bl	8002780 <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	68fa      	ldr	r2, [r7, #12]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d8f7      	bhi.n	80027c0 <HAL_Delay+0x28>
  {
  }
}
 80027d0:	bf00      	nop
 80027d2:	bf00      	nop
 80027d4:	3710      	adds	r7, #16
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	20000008 	.word	0x20000008

080027e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b085      	sub	sp, #20
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	f003 0307 	and.w	r3, r3, #7
 80027ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002824 <__NVIC_SetPriorityGrouping+0x44>)
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027f6:	68ba      	ldr	r2, [r7, #8]
 80027f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80027fc:	4013      	ands	r3, r2
 80027fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002808:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800280c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002810:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002812:	4a04      	ldr	r2, [pc, #16]	@ (8002824 <__NVIC_SetPriorityGrouping+0x44>)
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	60d3      	str	r3, [r2, #12]
}
 8002818:	bf00      	nop
 800281a:	3714      	adds	r7, #20
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr
 8002824:	e000ed00 	.word	0xe000ed00

08002828 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002828:	b480      	push	{r7}
 800282a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800282c:	4b04      	ldr	r3, [pc, #16]	@ (8002840 <__NVIC_GetPriorityGrouping+0x18>)
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	0a1b      	lsrs	r3, r3, #8
 8002832:	f003 0307 	and.w	r3, r3, #7
}
 8002836:	4618      	mov	r0, r3
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr
 8002840:	e000ed00 	.word	0xe000ed00

08002844 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	4603      	mov	r3, r0
 800284c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800284e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002852:	2b00      	cmp	r3, #0
 8002854:	db0b      	blt.n	800286e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002856:	79fb      	ldrb	r3, [r7, #7]
 8002858:	f003 021f 	and.w	r2, r3, #31
 800285c:	4907      	ldr	r1, [pc, #28]	@ (800287c <__NVIC_EnableIRQ+0x38>)
 800285e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002862:	095b      	lsrs	r3, r3, #5
 8002864:	2001      	movs	r0, #1
 8002866:	fa00 f202 	lsl.w	r2, r0, r2
 800286a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800286e:	bf00      	nop
 8002870:	370c      	adds	r7, #12
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	e000e100 	.word	0xe000e100

08002880 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	4603      	mov	r3, r0
 8002888:	6039      	str	r1, [r7, #0]
 800288a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800288c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002890:	2b00      	cmp	r3, #0
 8002892:	db0a      	blt.n	80028aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	b2da      	uxtb	r2, r3
 8002898:	490c      	ldr	r1, [pc, #48]	@ (80028cc <__NVIC_SetPriority+0x4c>)
 800289a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800289e:	0112      	lsls	r2, r2, #4
 80028a0:	b2d2      	uxtb	r2, r2
 80028a2:	440b      	add	r3, r1
 80028a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028a8:	e00a      	b.n	80028c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	b2da      	uxtb	r2, r3
 80028ae:	4908      	ldr	r1, [pc, #32]	@ (80028d0 <__NVIC_SetPriority+0x50>)
 80028b0:	79fb      	ldrb	r3, [r7, #7]
 80028b2:	f003 030f 	and.w	r3, r3, #15
 80028b6:	3b04      	subs	r3, #4
 80028b8:	0112      	lsls	r2, r2, #4
 80028ba:	b2d2      	uxtb	r2, r2
 80028bc:	440b      	add	r3, r1
 80028be:	761a      	strb	r2, [r3, #24]
}
 80028c0:	bf00      	nop
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr
 80028cc:	e000e100 	.word	0xe000e100
 80028d0:	e000ed00 	.word	0xe000ed00

080028d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b089      	sub	sp, #36	@ 0x24
 80028d8:	af00      	add	r7, sp, #0
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	60b9      	str	r1, [r7, #8]
 80028de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f003 0307 	and.w	r3, r3, #7
 80028e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	f1c3 0307 	rsb	r3, r3, #7
 80028ee:	2b04      	cmp	r3, #4
 80028f0:	bf28      	it	cs
 80028f2:	2304      	movcs	r3, #4
 80028f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	3304      	adds	r3, #4
 80028fa:	2b06      	cmp	r3, #6
 80028fc:	d902      	bls.n	8002904 <NVIC_EncodePriority+0x30>
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	3b03      	subs	r3, #3
 8002902:	e000      	b.n	8002906 <NVIC_EncodePriority+0x32>
 8002904:	2300      	movs	r3, #0
 8002906:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002908:	f04f 32ff 	mov.w	r2, #4294967295
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	fa02 f303 	lsl.w	r3, r2, r3
 8002912:	43da      	mvns	r2, r3
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	401a      	ands	r2, r3
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800291c:	f04f 31ff 	mov.w	r1, #4294967295
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	fa01 f303 	lsl.w	r3, r1, r3
 8002926:	43d9      	mvns	r1, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800292c:	4313      	orrs	r3, r2
         );
}
 800292e:	4618      	mov	r0, r3
 8002930:	3724      	adds	r7, #36	@ 0x24
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
	...

0800293c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	3b01      	subs	r3, #1
 8002948:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800294c:	d301      	bcc.n	8002952 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800294e:	2301      	movs	r3, #1
 8002950:	e00f      	b.n	8002972 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002952:	4a0a      	ldr	r2, [pc, #40]	@ (800297c <SysTick_Config+0x40>)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	3b01      	subs	r3, #1
 8002958:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800295a:	210f      	movs	r1, #15
 800295c:	f04f 30ff 	mov.w	r0, #4294967295
 8002960:	f7ff ff8e 	bl	8002880 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002964:	4b05      	ldr	r3, [pc, #20]	@ (800297c <SysTick_Config+0x40>)
 8002966:	2200      	movs	r2, #0
 8002968:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800296a:	4b04      	ldr	r3, [pc, #16]	@ (800297c <SysTick_Config+0x40>)
 800296c:	2207      	movs	r2, #7
 800296e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002970:	2300      	movs	r3, #0
}
 8002972:	4618      	mov	r0, r3
 8002974:	3708      	adds	r7, #8
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	e000e010 	.word	0xe000e010

08002980 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f7ff ff29 	bl	80027e0 <__NVIC_SetPriorityGrouping>
}
 800298e:	bf00      	nop
 8002990:	3708      	adds	r7, #8
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}

08002996 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002996:	b580      	push	{r7, lr}
 8002998:	b086      	sub	sp, #24
 800299a:	af00      	add	r7, sp, #0
 800299c:	4603      	mov	r3, r0
 800299e:	60b9      	str	r1, [r7, #8]
 80029a0:	607a      	str	r2, [r7, #4]
 80029a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029a4:	2300      	movs	r3, #0
 80029a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029a8:	f7ff ff3e 	bl	8002828 <__NVIC_GetPriorityGrouping>
 80029ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	68b9      	ldr	r1, [r7, #8]
 80029b2:	6978      	ldr	r0, [r7, #20]
 80029b4:	f7ff ff8e 	bl	80028d4 <NVIC_EncodePriority>
 80029b8:	4602      	mov	r2, r0
 80029ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029be:	4611      	mov	r1, r2
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7ff ff5d 	bl	8002880 <__NVIC_SetPriority>
}
 80029c6:	bf00      	nop
 80029c8:	3718      	adds	r7, #24
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029ce:	b580      	push	{r7, lr}
 80029d0:	b082      	sub	sp, #8
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	4603      	mov	r3, r0
 80029d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029dc:	4618      	mov	r0, r3
 80029de:	f7ff ff31 	bl	8002844 <__NVIC_EnableIRQ>
}
 80029e2:	bf00      	nop
 80029e4:	3708      	adds	r7, #8
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}

080029ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b082      	sub	sp, #8
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f7ff ffa2 	bl	800293c <SysTick_Config>
 80029f8:	4603      	mov	r3, r0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b084      	sub	sp, #16
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a0e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002a10:	f7ff feb6 	bl	8002780 <HAL_GetTick>
 8002a14:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d008      	beq.n	8002a34 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2280      	movs	r2, #128	@ 0x80
 8002a26:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e052      	b.n	8002ada <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f022 0216 	bic.w	r2, r2, #22
 8002a42:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	695a      	ldr	r2, [r3, #20]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002a52:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d103      	bne.n	8002a64 <HAL_DMA_Abort+0x62>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d007      	beq.n	8002a74 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f022 0208 	bic.w	r2, r2, #8
 8002a72:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f022 0201 	bic.w	r2, r2, #1
 8002a82:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a84:	e013      	b.n	8002aae <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a86:	f7ff fe7b 	bl	8002780 <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	2b05      	cmp	r3, #5
 8002a92:	d90c      	bls.n	8002aae <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2220      	movs	r2, #32
 8002a98:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2203      	movs	r2, #3
 8002a9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e015      	b.n	8002ada <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0301 	and.w	r3, r3, #1
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d1e4      	bne.n	8002a86 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ac0:	223f      	movs	r2, #63	@ 0x3f
 8002ac2:	409a      	lsls	r2, r3
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3710      	adds	r7, #16
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}

08002ae2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ae2:	b480      	push	{r7}
 8002ae4:	b083      	sub	sp, #12
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d004      	beq.n	8002b00 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2280      	movs	r2, #128	@ 0x80
 8002afa:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e00c      	b.n	8002b1a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2205      	movs	r2, #5
 8002b04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f022 0201 	bic.w	r2, r2, #1
 8002b16:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002b18:	2300      	movs	r3, #0
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	370c      	adds	r7, #12
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
	...

08002b28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b089      	sub	sp, #36	@ 0x24
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b32:	2300      	movs	r3, #0
 8002b34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b36:	2300      	movs	r3, #0
 8002b38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b3e:	2300      	movs	r3, #0
 8002b40:	61fb      	str	r3, [r7, #28]
 8002b42:	e165      	b.n	8002e10 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b44:	2201      	movs	r2, #1
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	697a      	ldr	r2, [r7, #20]
 8002b54:	4013      	ands	r3, r2
 8002b56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b58:	693a      	ldr	r2, [r7, #16]
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	f040 8154 	bne.w	8002e0a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f003 0303 	and.w	r3, r3, #3
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d005      	beq.n	8002b7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d130      	bne.n	8002bdc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	005b      	lsls	r3, r3, #1
 8002b84:	2203      	movs	r2, #3
 8002b86:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8a:	43db      	mvns	r3, r3
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	4013      	ands	r3, r2
 8002b90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	68da      	ldr	r2, [r3, #12]
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	005b      	lsls	r3, r3, #1
 8002b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9e:	69ba      	ldr	r2, [r7, #24]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	69ba      	ldr	r2, [r7, #24]
 8002ba8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb8:	43db      	mvns	r3, r3
 8002bba:	69ba      	ldr	r2, [r7, #24]
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	091b      	lsrs	r3, r3, #4
 8002bc6:	f003 0201 	and.w	r2, r3, #1
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd0:	69ba      	ldr	r2, [r7, #24]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	69ba      	ldr	r2, [r7, #24]
 8002bda:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f003 0303 	and.w	r3, r3, #3
 8002be4:	2b03      	cmp	r3, #3
 8002be6:	d017      	beq.n	8002c18 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	005b      	lsls	r3, r3, #1
 8002bf2:	2203      	movs	r2, #3
 8002bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf8:	43db      	mvns	r3, r3
 8002bfa:	69ba      	ldr	r2, [r7, #24]
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	689a      	ldr	r2, [r3, #8]
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	005b      	lsls	r3, r3, #1
 8002c08:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0c:	69ba      	ldr	r2, [r7, #24]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	69ba      	ldr	r2, [r7, #24]
 8002c16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f003 0303 	and.w	r3, r3, #3
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d123      	bne.n	8002c6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	08da      	lsrs	r2, r3, #3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	3208      	adds	r2, #8
 8002c2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	f003 0307 	and.w	r3, r3, #7
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	220f      	movs	r2, #15
 8002c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c40:	43db      	mvns	r3, r3
 8002c42:	69ba      	ldr	r2, [r7, #24]
 8002c44:	4013      	ands	r3, r2
 8002c46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	691a      	ldr	r2, [r3, #16]
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	f003 0307 	and.w	r3, r3, #7
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	fa02 f303 	lsl.w	r3, r2, r3
 8002c58:	69ba      	ldr	r2, [r7, #24]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	08da      	lsrs	r2, r3, #3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	3208      	adds	r2, #8
 8002c66:	69b9      	ldr	r1, [r7, #24]
 8002c68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	005b      	lsls	r3, r3, #1
 8002c76:	2203      	movs	r2, #3
 8002c78:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7c:	43db      	mvns	r3, r3
 8002c7e:	69ba      	ldr	r2, [r7, #24]
 8002c80:	4013      	ands	r3, r2
 8002c82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f003 0203 	and.w	r2, r3, #3
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	005b      	lsls	r3, r3, #1
 8002c90:	fa02 f303 	lsl.w	r3, r2, r3
 8002c94:	69ba      	ldr	r2, [r7, #24]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	69ba      	ldr	r2, [r7, #24]
 8002c9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	f000 80ae 	beq.w	8002e0a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cae:	2300      	movs	r3, #0
 8002cb0:	60fb      	str	r3, [r7, #12]
 8002cb2:	4b5d      	ldr	r3, [pc, #372]	@ (8002e28 <HAL_GPIO_Init+0x300>)
 8002cb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cb6:	4a5c      	ldr	r2, [pc, #368]	@ (8002e28 <HAL_GPIO_Init+0x300>)
 8002cb8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002cbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002cbe:	4b5a      	ldr	r3, [pc, #360]	@ (8002e28 <HAL_GPIO_Init+0x300>)
 8002cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002cc6:	60fb      	str	r3, [r7, #12]
 8002cc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002cca:	4a58      	ldr	r2, [pc, #352]	@ (8002e2c <HAL_GPIO_Init+0x304>)
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	089b      	lsrs	r3, r3, #2
 8002cd0:	3302      	adds	r3, #2
 8002cd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	f003 0303 	and.w	r3, r3, #3
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	220f      	movs	r2, #15
 8002ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce6:	43db      	mvns	r3, r3
 8002ce8:	69ba      	ldr	r2, [r7, #24]
 8002cea:	4013      	ands	r3, r2
 8002cec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4a4f      	ldr	r2, [pc, #316]	@ (8002e30 <HAL_GPIO_Init+0x308>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d025      	beq.n	8002d42 <HAL_GPIO_Init+0x21a>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a4e      	ldr	r2, [pc, #312]	@ (8002e34 <HAL_GPIO_Init+0x30c>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d01f      	beq.n	8002d3e <HAL_GPIO_Init+0x216>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a4d      	ldr	r2, [pc, #308]	@ (8002e38 <HAL_GPIO_Init+0x310>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d019      	beq.n	8002d3a <HAL_GPIO_Init+0x212>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a4c      	ldr	r2, [pc, #304]	@ (8002e3c <HAL_GPIO_Init+0x314>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d013      	beq.n	8002d36 <HAL_GPIO_Init+0x20e>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a4b      	ldr	r2, [pc, #300]	@ (8002e40 <HAL_GPIO_Init+0x318>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d00d      	beq.n	8002d32 <HAL_GPIO_Init+0x20a>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a4a      	ldr	r2, [pc, #296]	@ (8002e44 <HAL_GPIO_Init+0x31c>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d007      	beq.n	8002d2e <HAL_GPIO_Init+0x206>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a49      	ldr	r2, [pc, #292]	@ (8002e48 <HAL_GPIO_Init+0x320>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d101      	bne.n	8002d2a <HAL_GPIO_Init+0x202>
 8002d26:	2306      	movs	r3, #6
 8002d28:	e00c      	b.n	8002d44 <HAL_GPIO_Init+0x21c>
 8002d2a:	2307      	movs	r3, #7
 8002d2c:	e00a      	b.n	8002d44 <HAL_GPIO_Init+0x21c>
 8002d2e:	2305      	movs	r3, #5
 8002d30:	e008      	b.n	8002d44 <HAL_GPIO_Init+0x21c>
 8002d32:	2304      	movs	r3, #4
 8002d34:	e006      	b.n	8002d44 <HAL_GPIO_Init+0x21c>
 8002d36:	2303      	movs	r3, #3
 8002d38:	e004      	b.n	8002d44 <HAL_GPIO_Init+0x21c>
 8002d3a:	2302      	movs	r3, #2
 8002d3c:	e002      	b.n	8002d44 <HAL_GPIO_Init+0x21c>
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e000      	b.n	8002d44 <HAL_GPIO_Init+0x21c>
 8002d42:	2300      	movs	r3, #0
 8002d44:	69fa      	ldr	r2, [r7, #28]
 8002d46:	f002 0203 	and.w	r2, r2, #3
 8002d4a:	0092      	lsls	r2, r2, #2
 8002d4c:	4093      	lsls	r3, r2
 8002d4e:	69ba      	ldr	r2, [r7, #24]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d54:	4935      	ldr	r1, [pc, #212]	@ (8002e2c <HAL_GPIO_Init+0x304>)
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	089b      	lsrs	r3, r3, #2
 8002d5a:	3302      	adds	r3, #2
 8002d5c:	69ba      	ldr	r2, [r7, #24]
 8002d5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d62:	4b3a      	ldr	r3, [pc, #232]	@ (8002e4c <HAL_GPIO_Init+0x324>)
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	43db      	mvns	r3, r3
 8002d6c:	69ba      	ldr	r2, [r7, #24]
 8002d6e:	4013      	ands	r3, r2
 8002d70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d003      	beq.n	8002d86 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002d7e:	69ba      	ldr	r2, [r7, #24]
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d86:	4a31      	ldr	r2, [pc, #196]	@ (8002e4c <HAL_GPIO_Init+0x324>)
 8002d88:	69bb      	ldr	r3, [r7, #24]
 8002d8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d8c:	4b2f      	ldr	r3, [pc, #188]	@ (8002e4c <HAL_GPIO_Init+0x324>)
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	43db      	mvns	r3, r3
 8002d96:	69ba      	ldr	r2, [r7, #24]
 8002d98:	4013      	ands	r3, r2
 8002d9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d003      	beq.n	8002db0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002da8:	69ba      	ldr	r2, [r7, #24]
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002db0:	4a26      	ldr	r2, [pc, #152]	@ (8002e4c <HAL_GPIO_Init+0x324>)
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002db6:	4b25      	ldr	r3, [pc, #148]	@ (8002e4c <HAL_GPIO_Init+0x324>)
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	43db      	mvns	r3, r3
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d003      	beq.n	8002dda <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002dd2:	69ba      	ldr	r2, [r7, #24]
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002dda:	4a1c      	ldr	r2, [pc, #112]	@ (8002e4c <HAL_GPIO_Init+0x324>)
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002de0:	4b1a      	ldr	r3, [pc, #104]	@ (8002e4c <HAL_GPIO_Init+0x324>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	43db      	mvns	r3, r3
 8002dea:	69ba      	ldr	r2, [r7, #24]
 8002dec:	4013      	ands	r3, r2
 8002dee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d003      	beq.n	8002e04 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002dfc:	69ba      	ldr	r2, [r7, #24]
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e04:	4a11      	ldr	r2, [pc, #68]	@ (8002e4c <HAL_GPIO_Init+0x324>)
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	3301      	adds	r3, #1
 8002e0e:	61fb      	str	r3, [r7, #28]
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	2b0f      	cmp	r3, #15
 8002e14:	f67f ae96 	bls.w	8002b44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e18:	bf00      	nop
 8002e1a:	bf00      	nop
 8002e1c:	3724      	adds	r7, #36	@ 0x24
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop
 8002e28:	40023800 	.word	0x40023800
 8002e2c:	40013800 	.word	0x40013800
 8002e30:	40020000 	.word	0x40020000
 8002e34:	40020400 	.word	0x40020400
 8002e38:	40020800 	.word	0x40020800
 8002e3c:	40020c00 	.word	0x40020c00
 8002e40:	40021000 	.word	0x40021000
 8002e44:	40021400 	.word	0x40021400
 8002e48:	40021800 	.word	0x40021800
 8002e4c:	40013c00 	.word	0x40013c00

08002e50 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b085      	sub	sp, #20
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	460b      	mov	r3, r1
 8002e5a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	691a      	ldr	r2, [r3, #16]
 8002e60:	887b      	ldrh	r3, [r7, #2]
 8002e62:	4013      	ands	r3, r2
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d002      	beq.n	8002e6e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	73fb      	strb	r3, [r7, #15]
 8002e6c:	e001      	b.n	8002e72 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e72:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3714      	adds	r7, #20
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	460b      	mov	r3, r1
 8002e8a:	807b      	strh	r3, [r7, #2]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e90:	787b      	ldrb	r3, [r7, #1]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d003      	beq.n	8002e9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e96:	887a      	ldrh	r2, [r7, #2]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e9c:	e003      	b.n	8002ea6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e9e:	887b      	ldrh	r3, [r7, #2]
 8002ea0:	041a      	lsls	r2, r3, #16
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	619a      	str	r2, [r3, #24]
}
 8002ea6:	bf00      	nop
 8002ea8:	370c      	adds	r7, #12
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
	...

08002eb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d101      	bne.n	8002ec8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e0cc      	b.n	8003062 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ec8:	4b68      	ldr	r3, [pc, #416]	@ (800306c <HAL_RCC_ClockConfig+0x1b8>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 030f 	and.w	r3, r3, #15
 8002ed0:	683a      	ldr	r2, [r7, #0]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d90c      	bls.n	8002ef0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ed6:	4b65      	ldr	r3, [pc, #404]	@ (800306c <HAL_RCC_ClockConfig+0x1b8>)
 8002ed8:	683a      	ldr	r2, [r7, #0]
 8002eda:	b2d2      	uxtb	r2, r2
 8002edc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ede:	4b63      	ldr	r3, [pc, #396]	@ (800306c <HAL_RCC_ClockConfig+0x1b8>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 030f 	and.w	r3, r3, #15
 8002ee6:	683a      	ldr	r2, [r7, #0]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d001      	beq.n	8002ef0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e0b8      	b.n	8003062 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0302 	and.w	r3, r3, #2
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d020      	beq.n	8002f3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0304 	and.w	r3, r3, #4
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d005      	beq.n	8002f14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f08:	4b59      	ldr	r3, [pc, #356]	@ (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	4a58      	ldr	r2, [pc, #352]	@ (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8002f0e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002f12:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0308 	and.w	r3, r3, #8
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d005      	beq.n	8002f2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f20:	4b53      	ldr	r3, [pc, #332]	@ (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	4a52      	ldr	r2, [pc, #328]	@ (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8002f26:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002f2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f2c:	4b50      	ldr	r3, [pc, #320]	@ (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	494d      	ldr	r1, [pc, #308]	@ (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0301 	and.w	r3, r3, #1
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d044      	beq.n	8002fd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d107      	bne.n	8002f62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f52:	4b47      	ldr	r3, [pc, #284]	@ (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d119      	bne.n	8002f92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e07f      	b.n	8003062 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d003      	beq.n	8002f72 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f6e:	2b03      	cmp	r3, #3
 8002f70:	d107      	bne.n	8002f82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f72:	4b3f      	ldr	r3, [pc, #252]	@ (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d109      	bne.n	8002f92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e06f      	b.n	8003062 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f82:	4b3b      	ldr	r3, [pc, #236]	@ (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0302 	and.w	r3, r3, #2
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d101      	bne.n	8002f92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e067      	b.n	8003062 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f92:	4b37      	ldr	r3, [pc, #220]	@ (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	f023 0203 	bic.w	r2, r3, #3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	4934      	ldr	r1, [pc, #208]	@ (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fa4:	f7ff fbec 	bl	8002780 <HAL_GetTick>
 8002fa8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002faa:	e00a      	b.n	8002fc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fac:	f7ff fbe8 	bl	8002780 <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d901      	bls.n	8002fc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e04f      	b.n	8003062 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fc2:	4b2b      	ldr	r3, [pc, #172]	@ (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	f003 020c 	and.w	r2, r3, #12
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d1eb      	bne.n	8002fac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fd4:	4b25      	ldr	r3, [pc, #148]	@ (800306c <HAL_RCC_ClockConfig+0x1b8>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 030f 	and.w	r3, r3, #15
 8002fdc:	683a      	ldr	r2, [r7, #0]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d20c      	bcs.n	8002ffc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fe2:	4b22      	ldr	r3, [pc, #136]	@ (800306c <HAL_RCC_ClockConfig+0x1b8>)
 8002fe4:	683a      	ldr	r2, [r7, #0]
 8002fe6:	b2d2      	uxtb	r2, r2
 8002fe8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fea:	4b20      	ldr	r3, [pc, #128]	@ (800306c <HAL_RCC_ClockConfig+0x1b8>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 030f 	and.w	r3, r3, #15
 8002ff2:	683a      	ldr	r2, [r7, #0]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d001      	beq.n	8002ffc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e032      	b.n	8003062 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0304 	and.w	r3, r3, #4
 8003004:	2b00      	cmp	r3, #0
 8003006:	d008      	beq.n	800301a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003008:	4b19      	ldr	r3, [pc, #100]	@ (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	4916      	ldr	r1, [pc, #88]	@ (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8003016:	4313      	orrs	r3, r2
 8003018:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0308 	and.w	r3, r3, #8
 8003022:	2b00      	cmp	r3, #0
 8003024:	d009      	beq.n	800303a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003026:	4b12      	ldr	r3, [pc, #72]	@ (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	691b      	ldr	r3, [r3, #16]
 8003032:	00db      	lsls	r3, r3, #3
 8003034:	490e      	ldr	r1, [pc, #56]	@ (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8003036:	4313      	orrs	r3, r2
 8003038:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800303a:	f000 f855 	bl	80030e8 <HAL_RCC_GetSysClockFreq>
 800303e:	4602      	mov	r2, r0
 8003040:	4b0b      	ldr	r3, [pc, #44]	@ (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	091b      	lsrs	r3, r3, #4
 8003046:	f003 030f 	and.w	r3, r3, #15
 800304a:	490a      	ldr	r1, [pc, #40]	@ (8003074 <HAL_RCC_ClockConfig+0x1c0>)
 800304c:	5ccb      	ldrb	r3, [r1, r3]
 800304e:	fa22 f303 	lsr.w	r3, r2, r3
 8003052:	4a09      	ldr	r2, [pc, #36]	@ (8003078 <HAL_RCC_ClockConfig+0x1c4>)
 8003054:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003056:	4b09      	ldr	r3, [pc, #36]	@ (800307c <HAL_RCC_ClockConfig+0x1c8>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4618      	mov	r0, r3
 800305c:	f7ff fb4c 	bl	80026f8 <HAL_InitTick>

  return HAL_OK;
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	3710      	adds	r7, #16
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	40023c00 	.word	0x40023c00
 8003070:	40023800 	.word	0x40023800
 8003074:	080091f0 	.word	0x080091f0
 8003078:	20000000 	.word	0x20000000
 800307c:	20000004 	.word	0x20000004

08003080 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003084:	4b03      	ldr	r3, [pc, #12]	@ (8003094 <HAL_RCC_GetHCLKFreq+0x14>)
 8003086:	681b      	ldr	r3, [r3, #0]
}
 8003088:	4618      	mov	r0, r3
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	20000000 	.word	0x20000000

08003098 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800309c:	f7ff fff0 	bl	8003080 <HAL_RCC_GetHCLKFreq>
 80030a0:	4602      	mov	r2, r0
 80030a2:	4b05      	ldr	r3, [pc, #20]	@ (80030b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	0a9b      	lsrs	r3, r3, #10
 80030a8:	f003 0307 	and.w	r3, r3, #7
 80030ac:	4903      	ldr	r1, [pc, #12]	@ (80030bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80030ae:	5ccb      	ldrb	r3, [r1, r3]
 80030b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	40023800 	.word	0x40023800
 80030bc:	08009200 	.word	0x08009200

080030c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80030c4:	f7ff ffdc 	bl	8003080 <HAL_RCC_GetHCLKFreq>
 80030c8:	4602      	mov	r2, r0
 80030ca:	4b05      	ldr	r3, [pc, #20]	@ (80030e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	0b5b      	lsrs	r3, r3, #13
 80030d0:	f003 0307 	and.w	r3, r3, #7
 80030d4:	4903      	ldr	r1, [pc, #12]	@ (80030e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030d6:	5ccb      	ldrb	r3, [r1, r3]
 80030d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030dc:	4618      	mov	r0, r3
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	40023800 	.word	0x40023800
 80030e4:	08009200 	.word	0x08009200

080030e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030ec:	b0ae      	sub	sp, #184	@ 0xb8
 80030ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80030f0:	2300      	movs	r3, #0
 80030f2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80030f6:	2300      	movs	r3, #0
 80030f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80030fc:	2300      	movs	r3, #0
 80030fe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003102:	2300      	movs	r3, #0
 8003104:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003108:	2300      	movs	r3, #0
 800310a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800310e:	4bcb      	ldr	r3, [pc, #812]	@ (800343c <HAL_RCC_GetSysClockFreq+0x354>)
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	f003 030c 	and.w	r3, r3, #12
 8003116:	2b0c      	cmp	r3, #12
 8003118:	f200 8206 	bhi.w	8003528 <HAL_RCC_GetSysClockFreq+0x440>
 800311c:	a201      	add	r2, pc, #4	@ (adr r2, 8003124 <HAL_RCC_GetSysClockFreq+0x3c>)
 800311e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003122:	bf00      	nop
 8003124:	08003159 	.word	0x08003159
 8003128:	08003529 	.word	0x08003529
 800312c:	08003529 	.word	0x08003529
 8003130:	08003529 	.word	0x08003529
 8003134:	08003161 	.word	0x08003161
 8003138:	08003529 	.word	0x08003529
 800313c:	08003529 	.word	0x08003529
 8003140:	08003529 	.word	0x08003529
 8003144:	08003169 	.word	0x08003169
 8003148:	08003529 	.word	0x08003529
 800314c:	08003529 	.word	0x08003529
 8003150:	08003529 	.word	0x08003529
 8003154:	08003359 	.word	0x08003359
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003158:	4bb9      	ldr	r3, [pc, #740]	@ (8003440 <HAL_RCC_GetSysClockFreq+0x358>)
 800315a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 800315e:	e1e7      	b.n	8003530 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003160:	4bb8      	ldr	r3, [pc, #736]	@ (8003444 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003162:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003166:	e1e3      	b.n	8003530 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003168:	4bb4      	ldr	r3, [pc, #720]	@ (800343c <HAL_RCC_GetSysClockFreq+0x354>)
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003170:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003174:	4bb1      	ldr	r3, [pc, #708]	@ (800343c <HAL_RCC_GetSysClockFreq+0x354>)
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800317c:	2b00      	cmp	r3, #0
 800317e:	d071      	beq.n	8003264 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003180:	4bae      	ldr	r3, [pc, #696]	@ (800343c <HAL_RCC_GetSysClockFreq+0x354>)
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	099b      	lsrs	r3, r3, #6
 8003186:	2200      	movs	r2, #0
 8003188:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800318c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003190:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003194:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003198:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800319c:	2300      	movs	r3, #0
 800319e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80031a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80031a6:	4622      	mov	r2, r4
 80031a8:	462b      	mov	r3, r5
 80031aa:	f04f 0000 	mov.w	r0, #0
 80031ae:	f04f 0100 	mov.w	r1, #0
 80031b2:	0159      	lsls	r1, r3, #5
 80031b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031b8:	0150      	lsls	r0, r2, #5
 80031ba:	4602      	mov	r2, r0
 80031bc:	460b      	mov	r3, r1
 80031be:	4621      	mov	r1, r4
 80031c0:	1a51      	subs	r1, r2, r1
 80031c2:	6439      	str	r1, [r7, #64]	@ 0x40
 80031c4:	4629      	mov	r1, r5
 80031c6:	eb63 0301 	sbc.w	r3, r3, r1
 80031ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80031cc:	f04f 0200 	mov.w	r2, #0
 80031d0:	f04f 0300 	mov.w	r3, #0
 80031d4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80031d8:	4649      	mov	r1, r9
 80031da:	018b      	lsls	r3, r1, #6
 80031dc:	4641      	mov	r1, r8
 80031de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80031e2:	4641      	mov	r1, r8
 80031e4:	018a      	lsls	r2, r1, #6
 80031e6:	4641      	mov	r1, r8
 80031e8:	1a51      	subs	r1, r2, r1
 80031ea:	63b9      	str	r1, [r7, #56]	@ 0x38
 80031ec:	4649      	mov	r1, r9
 80031ee:	eb63 0301 	sbc.w	r3, r3, r1
 80031f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80031f4:	f04f 0200 	mov.w	r2, #0
 80031f8:	f04f 0300 	mov.w	r3, #0
 80031fc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003200:	4649      	mov	r1, r9
 8003202:	00cb      	lsls	r3, r1, #3
 8003204:	4641      	mov	r1, r8
 8003206:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800320a:	4641      	mov	r1, r8
 800320c:	00ca      	lsls	r2, r1, #3
 800320e:	4610      	mov	r0, r2
 8003210:	4619      	mov	r1, r3
 8003212:	4603      	mov	r3, r0
 8003214:	4622      	mov	r2, r4
 8003216:	189b      	adds	r3, r3, r2
 8003218:	633b      	str	r3, [r7, #48]	@ 0x30
 800321a:	462b      	mov	r3, r5
 800321c:	460a      	mov	r2, r1
 800321e:	eb42 0303 	adc.w	r3, r2, r3
 8003222:	637b      	str	r3, [r7, #52]	@ 0x34
 8003224:	f04f 0200 	mov.w	r2, #0
 8003228:	f04f 0300 	mov.w	r3, #0
 800322c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003230:	4629      	mov	r1, r5
 8003232:	024b      	lsls	r3, r1, #9
 8003234:	4621      	mov	r1, r4
 8003236:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800323a:	4621      	mov	r1, r4
 800323c:	024a      	lsls	r2, r1, #9
 800323e:	4610      	mov	r0, r2
 8003240:	4619      	mov	r1, r3
 8003242:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003246:	2200      	movs	r2, #0
 8003248:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800324c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003250:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003254:	f7fd fcd8 	bl	8000c08 <__aeabi_uldivmod>
 8003258:	4602      	mov	r2, r0
 800325a:	460b      	mov	r3, r1
 800325c:	4613      	mov	r3, r2
 800325e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003262:	e067      	b.n	8003334 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003264:	4b75      	ldr	r3, [pc, #468]	@ (800343c <HAL_RCC_GetSysClockFreq+0x354>)
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	099b      	lsrs	r3, r3, #6
 800326a:	2200      	movs	r2, #0
 800326c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003270:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003274:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003278:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800327c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800327e:	2300      	movs	r3, #0
 8003280:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003282:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003286:	4622      	mov	r2, r4
 8003288:	462b      	mov	r3, r5
 800328a:	f04f 0000 	mov.w	r0, #0
 800328e:	f04f 0100 	mov.w	r1, #0
 8003292:	0159      	lsls	r1, r3, #5
 8003294:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003298:	0150      	lsls	r0, r2, #5
 800329a:	4602      	mov	r2, r0
 800329c:	460b      	mov	r3, r1
 800329e:	4621      	mov	r1, r4
 80032a0:	1a51      	subs	r1, r2, r1
 80032a2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80032a4:	4629      	mov	r1, r5
 80032a6:	eb63 0301 	sbc.w	r3, r3, r1
 80032aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80032ac:	f04f 0200 	mov.w	r2, #0
 80032b0:	f04f 0300 	mov.w	r3, #0
 80032b4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80032b8:	4649      	mov	r1, r9
 80032ba:	018b      	lsls	r3, r1, #6
 80032bc:	4641      	mov	r1, r8
 80032be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80032c2:	4641      	mov	r1, r8
 80032c4:	018a      	lsls	r2, r1, #6
 80032c6:	4641      	mov	r1, r8
 80032c8:	ebb2 0a01 	subs.w	sl, r2, r1
 80032cc:	4649      	mov	r1, r9
 80032ce:	eb63 0b01 	sbc.w	fp, r3, r1
 80032d2:	f04f 0200 	mov.w	r2, #0
 80032d6:	f04f 0300 	mov.w	r3, #0
 80032da:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80032de:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80032e2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80032e6:	4692      	mov	sl, r2
 80032e8:	469b      	mov	fp, r3
 80032ea:	4623      	mov	r3, r4
 80032ec:	eb1a 0303 	adds.w	r3, sl, r3
 80032f0:	623b      	str	r3, [r7, #32]
 80032f2:	462b      	mov	r3, r5
 80032f4:	eb4b 0303 	adc.w	r3, fp, r3
 80032f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80032fa:	f04f 0200 	mov.w	r2, #0
 80032fe:	f04f 0300 	mov.w	r3, #0
 8003302:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003306:	4629      	mov	r1, r5
 8003308:	028b      	lsls	r3, r1, #10
 800330a:	4621      	mov	r1, r4
 800330c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003310:	4621      	mov	r1, r4
 8003312:	028a      	lsls	r2, r1, #10
 8003314:	4610      	mov	r0, r2
 8003316:	4619      	mov	r1, r3
 8003318:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800331c:	2200      	movs	r2, #0
 800331e:	673b      	str	r3, [r7, #112]	@ 0x70
 8003320:	677a      	str	r2, [r7, #116]	@ 0x74
 8003322:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003326:	f7fd fc6f 	bl	8000c08 <__aeabi_uldivmod>
 800332a:	4602      	mov	r2, r0
 800332c:	460b      	mov	r3, r1
 800332e:	4613      	mov	r3, r2
 8003330:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003334:	4b41      	ldr	r3, [pc, #260]	@ (800343c <HAL_RCC_GetSysClockFreq+0x354>)
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	0c1b      	lsrs	r3, r3, #16
 800333a:	f003 0303 	and.w	r3, r3, #3
 800333e:	3301      	adds	r3, #1
 8003340:	005b      	lsls	r3, r3, #1
 8003342:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8003346:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800334a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800334e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003352:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003356:	e0eb      	b.n	8003530 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003358:	4b38      	ldr	r3, [pc, #224]	@ (800343c <HAL_RCC_GetSysClockFreq+0x354>)
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003360:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003364:	4b35      	ldr	r3, [pc, #212]	@ (800343c <HAL_RCC_GetSysClockFreq+0x354>)
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800336c:	2b00      	cmp	r3, #0
 800336e:	d06b      	beq.n	8003448 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003370:	4b32      	ldr	r3, [pc, #200]	@ (800343c <HAL_RCC_GetSysClockFreq+0x354>)
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	099b      	lsrs	r3, r3, #6
 8003376:	2200      	movs	r2, #0
 8003378:	66bb      	str	r3, [r7, #104]	@ 0x68
 800337a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800337c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800337e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003382:	663b      	str	r3, [r7, #96]	@ 0x60
 8003384:	2300      	movs	r3, #0
 8003386:	667b      	str	r3, [r7, #100]	@ 0x64
 8003388:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800338c:	4622      	mov	r2, r4
 800338e:	462b      	mov	r3, r5
 8003390:	f04f 0000 	mov.w	r0, #0
 8003394:	f04f 0100 	mov.w	r1, #0
 8003398:	0159      	lsls	r1, r3, #5
 800339a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800339e:	0150      	lsls	r0, r2, #5
 80033a0:	4602      	mov	r2, r0
 80033a2:	460b      	mov	r3, r1
 80033a4:	4621      	mov	r1, r4
 80033a6:	1a51      	subs	r1, r2, r1
 80033a8:	61b9      	str	r1, [r7, #24]
 80033aa:	4629      	mov	r1, r5
 80033ac:	eb63 0301 	sbc.w	r3, r3, r1
 80033b0:	61fb      	str	r3, [r7, #28]
 80033b2:	f04f 0200 	mov.w	r2, #0
 80033b6:	f04f 0300 	mov.w	r3, #0
 80033ba:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80033be:	4659      	mov	r1, fp
 80033c0:	018b      	lsls	r3, r1, #6
 80033c2:	4651      	mov	r1, sl
 80033c4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80033c8:	4651      	mov	r1, sl
 80033ca:	018a      	lsls	r2, r1, #6
 80033cc:	4651      	mov	r1, sl
 80033ce:	ebb2 0801 	subs.w	r8, r2, r1
 80033d2:	4659      	mov	r1, fp
 80033d4:	eb63 0901 	sbc.w	r9, r3, r1
 80033d8:	f04f 0200 	mov.w	r2, #0
 80033dc:	f04f 0300 	mov.w	r3, #0
 80033e0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80033e4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80033e8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80033ec:	4690      	mov	r8, r2
 80033ee:	4699      	mov	r9, r3
 80033f0:	4623      	mov	r3, r4
 80033f2:	eb18 0303 	adds.w	r3, r8, r3
 80033f6:	613b      	str	r3, [r7, #16]
 80033f8:	462b      	mov	r3, r5
 80033fa:	eb49 0303 	adc.w	r3, r9, r3
 80033fe:	617b      	str	r3, [r7, #20]
 8003400:	f04f 0200 	mov.w	r2, #0
 8003404:	f04f 0300 	mov.w	r3, #0
 8003408:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800340c:	4629      	mov	r1, r5
 800340e:	024b      	lsls	r3, r1, #9
 8003410:	4621      	mov	r1, r4
 8003412:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003416:	4621      	mov	r1, r4
 8003418:	024a      	lsls	r2, r1, #9
 800341a:	4610      	mov	r0, r2
 800341c:	4619      	mov	r1, r3
 800341e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003422:	2200      	movs	r2, #0
 8003424:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003426:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003428:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800342c:	f7fd fbec 	bl	8000c08 <__aeabi_uldivmod>
 8003430:	4602      	mov	r2, r0
 8003432:	460b      	mov	r3, r1
 8003434:	4613      	mov	r3, r2
 8003436:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800343a:	e065      	b.n	8003508 <HAL_RCC_GetSysClockFreq+0x420>
 800343c:	40023800 	.word	0x40023800
 8003440:	00f42400 	.word	0x00f42400
 8003444:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003448:	4b3d      	ldr	r3, [pc, #244]	@ (8003540 <HAL_RCC_GetSysClockFreq+0x458>)
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	099b      	lsrs	r3, r3, #6
 800344e:	2200      	movs	r2, #0
 8003450:	4618      	mov	r0, r3
 8003452:	4611      	mov	r1, r2
 8003454:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003458:	653b      	str	r3, [r7, #80]	@ 0x50
 800345a:	2300      	movs	r3, #0
 800345c:	657b      	str	r3, [r7, #84]	@ 0x54
 800345e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003462:	4642      	mov	r2, r8
 8003464:	464b      	mov	r3, r9
 8003466:	f04f 0000 	mov.w	r0, #0
 800346a:	f04f 0100 	mov.w	r1, #0
 800346e:	0159      	lsls	r1, r3, #5
 8003470:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003474:	0150      	lsls	r0, r2, #5
 8003476:	4602      	mov	r2, r0
 8003478:	460b      	mov	r3, r1
 800347a:	4641      	mov	r1, r8
 800347c:	1a51      	subs	r1, r2, r1
 800347e:	60b9      	str	r1, [r7, #8]
 8003480:	4649      	mov	r1, r9
 8003482:	eb63 0301 	sbc.w	r3, r3, r1
 8003486:	60fb      	str	r3, [r7, #12]
 8003488:	f04f 0200 	mov.w	r2, #0
 800348c:	f04f 0300 	mov.w	r3, #0
 8003490:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003494:	4659      	mov	r1, fp
 8003496:	018b      	lsls	r3, r1, #6
 8003498:	4651      	mov	r1, sl
 800349a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800349e:	4651      	mov	r1, sl
 80034a0:	018a      	lsls	r2, r1, #6
 80034a2:	4651      	mov	r1, sl
 80034a4:	1a54      	subs	r4, r2, r1
 80034a6:	4659      	mov	r1, fp
 80034a8:	eb63 0501 	sbc.w	r5, r3, r1
 80034ac:	f04f 0200 	mov.w	r2, #0
 80034b0:	f04f 0300 	mov.w	r3, #0
 80034b4:	00eb      	lsls	r3, r5, #3
 80034b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034ba:	00e2      	lsls	r2, r4, #3
 80034bc:	4614      	mov	r4, r2
 80034be:	461d      	mov	r5, r3
 80034c0:	4643      	mov	r3, r8
 80034c2:	18e3      	adds	r3, r4, r3
 80034c4:	603b      	str	r3, [r7, #0]
 80034c6:	464b      	mov	r3, r9
 80034c8:	eb45 0303 	adc.w	r3, r5, r3
 80034cc:	607b      	str	r3, [r7, #4]
 80034ce:	f04f 0200 	mov.w	r2, #0
 80034d2:	f04f 0300 	mov.w	r3, #0
 80034d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80034da:	4629      	mov	r1, r5
 80034dc:	028b      	lsls	r3, r1, #10
 80034de:	4621      	mov	r1, r4
 80034e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80034e4:	4621      	mov	r1, r4
 80034e6:	028a      	lsls	r2, r1, #10
 80034e8:	4610      	mov	r0, r2
 80034ea:	4619      	mov	r1, r3
 80034ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80034f0:	2200      	movs	r2, #0
 80034f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80034f4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80034f6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80034fa:	f7fd fb85 	bl	8000c08 <__aeabi_uldivmod>
 80034fe:	4602      	mov	r2, r0
 8003500:	460b      	mov	r3, r1
 8003502:	4613      	mov	r3, r2
 8003504:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003508:	4b0d      	ldr	r3, [pc, #52]	@ (8003540 <HAL_RCC_GetSysClockFreq+0x458>)
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	0f1b      	lsrs	r3, r3, #28
 800350e:	f003 0307 	and.w	r3, r3, #7
 8003512:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8003516:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800351a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800351e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003522:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003526:	e003      	b.n	8003530 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003528:	4b06      	ldr	r3, [pc, #24]	@ (8003544 <HAL_RCC_GetSysClockFreq+0x45c>)
 800352a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800352e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003530:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003534:	4618      	mov	r0, r3
 8003536:	37b8      	adds	r7, #184	@ 0xb8
 8003538:	46bd      	mov	sp, r7
 800353a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800353e:	bf00      	nop
 8003540:	40023800 	.word	0x40023800
 8003544:	00f42400 	.word	0x00f42400

08003548 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b086      	sub	sp, #24
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d101      	bne.n	800355a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e28d      	b.n	8003a76 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0301 	and.w	r3, r3, #1
 8003562:	2b00      	cmp	r3, #0
 8003564:	f000 8083 	beq.w	800366e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003568:	4b94      	ldr	r3, [pc, #592]	@ (80037bc <HAL_RCC_OscConfig+0x274>)
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	f003 030c 	and.w	r3, r3, #12
 8003570:	2b04      	cmp	r3, #4
 8003572:	d019      	beq.n	80035a8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003574:	4b91      	ldr	r3, [pc, #580]	@ (80037bc <HAL_RCC_OscConfig+0x274>)
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800357c:	2b08      	cmp	r3, #8
 800357e:	d106      	bne.n	800358e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003580:	4b8e      	ldr	r3, [pc, #568]	@ (80037bc <HAL_RCC_OscConfig+0x274>)
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003588:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800358c:	d00c      	beq.n	80035a8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800358e:	4b8b      	ldr	r3, [pc, #556]	@ (80037bc <HAL_RCC_OscConfig+0x274>)
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003596:	2b0c      	cmp	r3, #12
 8003598:	d112      	bne.n	80035c0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800359a:	4b88      	ldr	r3, [pc, #544]	@ (80037bc <HAL_RCC_OscConfig+0x274>)
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80035a6:	d10b      	bne.n	80035c0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035a8:	4b84      	ldr	r3, [pc, #528]	@ (80037bc <HAL_RCC_OscConfig+0x274>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d05b      	beq.n	800366c <HAL_RCC_OscConfig+0x124>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d157      	bne.n	800366c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e25a      	b.n	8003a76 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035c8:	d106      	bne.n	80035d8 <HAL_RCC_OscConfig+0x90>
 80035ca:	4b7c      	ldr	r3, [pc, #496]	@ (80037bc <HAL_RCC_OscConfig+0x274>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a7b      	ldr	r2, [pc, #492]	@ (80037bc <HAL_RCC_OscConfig+0x274>)
 80035d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035d4:	6013      	str	r3, [r2, #0]
 80035d6:	e01d      	b.n	8003614 <HAL_RCC_OscConfig+0xcc>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80035e0:	d10c      	bne.n	80035fc <HAL_RCC_OscConfig+0xb4>
 80035e2:	4b76      	ldr	r3, [pc, #472]	@ (80037bc <HAL_RCC_OscConfig+0x274>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a75      	ldr	r2, [pc, #468]	@ (80037bc <HAL_RCC_OscConfig+0x274>)
 80035e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80035ec:	6013      	str	r3, [r2, #0]
 80035ee:	4b73      	ldr	r3, [pc, #460]	@ (80037bc <HAL_RCC_OscConfig+0x274>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a72      	ldr	r2, [pc, #456]	@ (80037bc <HAL_RCC_OscConfig+0x274>)
 80035f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035f8:	6013      	str	r3, [r2, #0]
 80035fa:	e00b      	b.n	8003614 <HAL_RCC_OscConfig+0xcc>
 80035fc:	4b6f      	ldr	r3, [pc, #444]	@ (80037bc <HAL_RCC_OscConfig+0x274>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a6e      	ldr	r2, [pc, #440]	@ (80037bc <HAL_RCC_OscConfig+0x274>)
 8003602:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003606:	6013      	str	r3, [r2, #0]
 8003608:	4b6c      	ldr	r3, [pc, #432]	@ (80037bc <HAL_RCC_OscConfig+0x274>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a6b      	ldr	r2, [pc, #428]	@ (80037bc <HAL_RCC_OscConfig+0x274>)
 800360e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003612:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d013      	beq.n	8003644 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800361c:	f7ff f8b0 	bl	8002780 <HAL_GetTick>
 8003620:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003622:	e008      	b.n	8003636 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003624:	f7ff f8ac 	bl	8002780 <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	2b64      	cmp	r3, #100	@ 0x64
 8003630:	d901      	bls.n	8003636 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e21f      	b.n	8003a76 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003636:	4b61      	ldr	r3, [pc, #388]	@ (80037bc <HAL_RCC_OscConfig+0x274>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d0f0      	beq.n	8003624 <HAL_RCC_OscConfig+0xdc>
 8003642:	e014      	b.n	800366e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003644:	f7ff f89c 	bl	8002780 <HAL_GetTick>
 8003648:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800364a:	e008      	b.n	800365e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800364c:	f7ff f898 	bl	8002780 <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	2b64      	cmp	r3, #100	@ 0x64
 8003658:	d901      	bls.n	800365e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e20b      	b.n	8003a76 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800365e:	4b57      	ldr	r3, [pc, #348]	@ (80037bc <HAL_RCC_OscConfig+0x274>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d1f0      	bne.n	800364c <HAL_RCC_OscConfig+0x104>
 800366a:	e000      	b.n	800366e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800366c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0302 	and.w	r3, r3, #2
 8003676:	2b00      	cmp	r3, #0
 8003678:	d06f      	beq.n	800375a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800367a:	4b50      	ldr	r3, [pc, #320]	@ (80037bc <HAL_RCC_OscConfig+0x274>)
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	f003 030c 	and.w	r3, r3, #12
 8003682:	2b00      	cmp	r3, #0
 8003684:	d017      	beq.n	80036b6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003686:	4b4d      	ldr	r3, [pc, #308]	@ (80037bc <HAL_RCC_OscConfig+0x274>)
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800368e:	2b08      	cmp	r3, #8
 8003690:	d105      	bne.n	800369e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003692:	4b4a      	ldr	r3, [pc, #296]	@ (80037bc <HAL_RCC_OscConfig+0x274>)
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d00b      	beq.n	80036b6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800369e:	4b47      	ldr	r3, [pc, #284]	@ (80037bc <HAL_RCC_OscConfig+0x274>)
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80036a6:	2b0c      	cmp	r3, #12
 80036a8:	d11c      	bne.n	80036e4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036aa:	4b44      	ldr	r3, [pc, #272]	@ (80037bc <HAL_RCC_OscConfig+0x274>)
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d116      	bne.n	80036e4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036b6:	4b41      	ldr	r3, [pc, #260]	@ (80037bc <HAL_RCC_OscConfig+0x274>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0302 	and.w	r3, r3, #2
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d005      	beq.n	80036ce <HAL_RCC_OscConfig+0x186>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d001      	beq.n	80036ce <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e1d3      	b.n	8003a76 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036ce:	4b3b      	ldr	r3, [pc, #236]	@ (80037bc <HAL_RCC_OscConfig+0x274>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	691b      	ldr	r3, [r3, #16]
 80036da:	00db      	lsls	r3, r3, #3
 80036dc:	4937      	ldr	r1, [pc, #220]	@ (80037bc <HAL_RCC_OscConfig+0x274>)
 80036de:	4313      	orrs	r3, r2
 80036e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036e2:	e03a      	b.n	800375a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d020      	beq.n	800372e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036ec:	4b34      	ldr	r3, [pc, #208]	@ (80037c0 <HAL_RCC_OscConfig+0x278>)
 80036ee:	2201      	movs	r2, #1
 80036f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f2:	f7ff f845 	bl	8002780 <HAL_GetTick>
 80036f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036f8:	e008      	b.n	800370c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036fa:	f7ff f841 	bl	8002780 <HAL_GetTick>
 80036fe:	4602      	mov	r2, r0
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	2b02      	cmp	r3, #2
 8003706:	d901      	bls.n	800370c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e1b4      	b.n	8003a76 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800370c:	4b2b      	ldr	r3, [pc, #172]	@ (80037bc <HAL_RCC_OscConfig+0x274>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0302 	and.w	r3, r3, #2
 8003714:	2b00      	cmp	r3, #0
 8003716:	d0f0      	beq.n	80036fa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003718:	4b28      	ldr	r3, [pc, #160]	@ (80037bc <HAL_RCC_OscConfig+0x274>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	691b      	ldr	r3, [r3, #16]
 8003724:	00db      	lsls	r3, r3, #3
 8003726:	4925      	ldr	r1, [pc, #148]	@ (80037bc <HAL_RCC_OscConfig+0x274>)
 8003728:	4313      	orrs	r3, r2
 800372a:	600b      	str	r3, [r1, #0]
 800372c:	e015      	b.n	800375a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800372e:	4b24      	ldr	r3, [pc, #144]	@ (80037c0 <HAL_RCC_OscConfig+0x278>)
 8003730:	2200      	movs	r2, #0
 8003732:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003734:	f7ff f824 	bl	8002780 <HAL_GetTick>
 8003738:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800373a:	e008      	b.n	800374e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800373c:	f7ff f820 	bl	8002780 <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	2b02      	cmp	r3, #2
 8003748:	d901      	bls.n	800374e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e193      	b.n	8003a76 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800374e:	4b1b      	ldr	r3, [pc, #108]	@ (80037bc <HAL_RCC_OscConfig+0x274>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0302 	and.w	r3, r3, #2
 8003756:	2b00      	cmp	r3, #0
 8003758:	d1f0      	bne.n	800373c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0308 	and.w	r3, r3, #8
 8003762:	2b00      	cmp	r3, #0
 8003764:	d036      	beq.n	80037d4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	695b      	ldr	r3, [r3, #20]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d016      	beq.n	800379c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800376e:	4b15      	ldr	r3, [pc, #84]	@ (80037c4 <HAL_RCC_OscConfig+0x27c>)
 8003770:	2201      	movs	r2, #1
 8003772:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003774:	f7ff f804 	bl	8002780 <HAL_GetTick>
 8003778:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800377a:	e008      	b.n	800378e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800377c:	f7ff f800 	bl	8002780 <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	2b02      	cmp	r3, #2
 8003788:	d901      	bls.n	800378e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e173      	b.n	8003a76 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800378e:	4b0b      	ldr	r3, [pc, #44]	@ (80037bc <HAL_RCC_OscConfig+0x274>)
 8003790:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003792:	f003 0302 	and.w	r3, r3, #2
 8003796:	2b00      	cmp	r3, #0
 8003798:	d0f0      	beq.n	800377c <HAL_RCC_OscConfig+0x234>
 800379a:	e01b      	b.n	80037d4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800379c:	4b09      	ldr	r3, [pc, #36]	@ (80037c4 <HAL_RCC_OscConfig+0x27c>)
 800379e:	2200      	movs	r2, #0
 80037a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037a2:	f7fe ffed 	bl	8002780 <HAL_GetTick>
 80037a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037a8:	e00e      	b.n	80037c8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037aa:	f7fe ffe9 	bl	8002780 <HAL_GetTick>
 80037ae:	4602      	mov	r2, r0
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d907      	bls.n	80037c8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80037b8:	2303      	movs	r3, #3
 80037ba:	e15c      	b.n	8003a76 <HAL_RCC_OscConfig+0x52e>
 80037bc:	40023800 	.word	0x40023800
 80037c0:	42470000 	.word	0x42470000
 80037c4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037c8:	4b8a      	ldr	r3, [pc, #552]	@ (80039f4 <HAL_RCC_OscConfig+0x4ac>)
 80037ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037cc:	f003 0302 	and.w	r3, r3, #2
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d1ea      	bne.n	80037aa <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0304 	and.w	r3, r3, #4
 80037dc:	2b00      	cmp	r3, #0
 80037de:	f000 8097 	beq.w	8003910 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037e2:	2300      	movs	r3, #0
 80037e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037e6:	4b83      	ldr	r3, [pc, #524]	@ (80039f4 <HAL_RCC_OscConfig+0x4ac>)
 80037e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d10f      	bne.n	8003812 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037f2:	2300      	movs	r3, #0
 80037f4:	60bb      	str	r3, [r7, #8]
 80037f6:	4b7f      	ldr	r3, [pc, #508]	@ (80039f4 <HAL_RCC_OscConfig+0x4ac>)
 80037f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037fa:	4a7e      	ldr	r2, [pc, #504]	@ (80039f4 <HAL_RCC_OscConfig+0x4ac>)
 80037fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003800:	6413      	str	r3, [r2, #64]	@ 0x40
 8003802:	4b7c      	ldr	r3, [pc, #496]	@ (80039f4 <HAL_RCC_OscConfig+0x4ac>)
 8003804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003806:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800380a:	60bb      	str	r3, [r7, #8]
 800380c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800380e:	2301      	movs	r3, #1
 8003810:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003812:	4b79      	ldr	r3, [pc, #484]	@ (80039f8 <HAL_RCC_OscConfig+0x4b0>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800381a:	2b00      	cmp	r3, #0
 800381c:	d118      	bne.n	8003850 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800381e:	4b76      	ldr	r3, [pc, #472]	@ (80039f8 <HAL_RCC_OscConfig+0x4b0>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a75      	ldr	r2, [pc, #468]	@ (80039f8 <HAL_RCC_OscConfig+0x4b0>)
 8003824:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003828:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800382a:	f7fe ffa9 	bl	8002780 <HAL_GetTick>
 800382e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003830:	e008      	b.n	8003844 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003832:	f7fe ffa5 	bl	8002780 <HAL_GetTick>
 8003836:	4602      	mov	r2, r0
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	2b02      	cmp	r3, #2
 800383e:	d901      	bls.n	8003844 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003840:	2303      	movs	r3, #3
 8003842:	e118      	b.n	8003a76 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003844:	4b6c      	ldr	r3, [pc, #432]	@ (80039f8 <HAL_RCC_OscConfig+0x4b0>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800384c:	2b00      	cmp	r3, #0
 800384e:	d0f0      	beq.n	8003832 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	2b01      	cmp	r3, #1
 8003856:	d106      	bne.n	8003866 <HAL_RCC_OscConfig+0x31e>
 8003858:	4b66      	ldr	r3, [pc, #408]	@ (80039f4 <HAL_RCC_OscConfig+0x4ac>)
 800385a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800385c:	4a65      	ldr	r2, [pc, #404]	@ (80039f4 <HAL_RCC_OscConfig+0x4ac>)
 800385e:	f043 0301 	orr.w	r3, r3, #1
 8003862:	6713      	str	r3, [r2, #112]	@ 0x70
 8003864:	e01c      	b.n	80038a0 <HAL_RCC_OscConfig+0x358>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	2b05      	cmp	r3, #5
 800386c:	d10c      	bne.n	8003888 <HAL_RCC_OscConfig+0x340>
 800386e:	4b61      	ldr	r3, [pc, #388]	@ (80039f4 <HAL_RCC_OscConfig+0x4ac>)
 8003870:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003872:	4a60      	ldr	r2, [pc, #384]	@ (80039f4 <HAL_RCC_OscConfig+0x4ac>)
 8003874:	f043 0304 	orr.w	r3, r3, #4
 8003878:	6713      	str	r3, [r2, #112]	@ 0x70
 800387a:	4b5e      	ldr	r3, [pc, #376]	@ (80039f4 <HAL_RCC_OscConfig+0x4ac>)
 800387c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800387e:	4a5d      	ldr	r2, [pc, #372]	@ (80039f4 <HAL_RCC_OscConfig+0x4ac>)
 8003880:	f043 0301 	orr.w	r3, r3, #1
 8003884:	6713      	str	r3, [r2, #112]	@ 0x70
 8003886:	e00b      	b.n	80038a0 <HAL_RCC_OscConfig+0x358>
 8003888:	4b5a      	ldr	r3, [pc, #360]	@ (80039f4 <HAL_RCC_OscConfig+0x4ac>)
 800388a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800388c:	4a59      	ldr	r2, [pc, #356]	@ (80039f4 <HAL_RCC_OscConfig+0x4ac>)
 800388e:	f023 0301 	bic.w	r3, r3, #1
 8003892:	6713      	str	r3, [r2, #112]	@ 0x70
 8003894:	4b57      	ldr	r3, [pc, #348]	@ (80039f4 <HAL_RCC_OscConfig+0x4ac>)
 8003896:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003898:	4a56      	ldr	r2, [pc, #344]	@ (80039f4 <HAL_RCC_OscConfig+0x4ac>)
 800389a:	f023 0304 	bic.w	r3, r3, #4
 800389e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d015      	beq.n	80038d4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038a8:	f7fe ff6a 	bl	8002780 <HAL_GetTick>
 80038ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038ae:	e00a      	b.n	80038c6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038b0:	f7fe ff66 	bl	8002780 <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038be:	4293      	cmp	r3, r2
 80038c0:	d901      	bls.n	80038c6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80038c2:	2303      	movs	r3, #3
 80038c4:	e0d7      	b.n	8003a76 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038c6:	4b4b      	ldr	r3, [pc, #300]	@ (80039f4 <HAL_RCC_OscConfig+0x4ac>)
 80038c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038ca:	f003 0302 	and.w	r3, r3, #2
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d0ee      	beq.n	80038b0 <HAL_RCC_OscConfig+0x368>
 80038d2:	e014      	b.n	80038fe <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038d4:	f7fe ff54 	bl	8002780 <HAL_GetTick>
 80038d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038da:	e00a      	b.n	80038f2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038dc:	f7fe ff50 	bl	8002780 <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d901      	bls.n	80038f2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e0c1      	b.n	8003a76 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038f2:	4b40      	ldr	r3, [pc, #256]	@ (80039f4 <HAL_RCC_OscConfig+0x4ac>)
 80038f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038f6:	f003 0302 	and.w	r3, r3, #2
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d1ee      	bne.n	80038dc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038fe:	7dfb      	ldrb	r3, [r7, #23]
 8003900:	2b01      	cmp	r3, #1
 8003902:	d105      	bne.n	8003910 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003904:	4b3b      	ldr	r3, [pc, #236]	@ (80039f4 <HAL_RCC_OscConfig+0x4ac>)
 8003906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003908:	4a3a      	ldr	r2, [pc, #232]	@ (80039f4 <HAL_RCC_OscConfig+0x4ac>)
 800390a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800390e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	699b      	ldr	r3, [r3, #24]
 8003914:	2b00      	cmp	r3, #0
 8003916:	f000 80ad 	beq.w	8003a74 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800391a:	4b36      	ldr	r3, [pc, #216]	@ (80039f4 <HAL_RCC_OscConfig+0x4ac>)
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	f003 030c 	and.w	r3, r3, #12
 8003922:	2b08      	cmp	r3, #8
 8003924:	d060      	beq.n	80039e8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	699b      	ldr	r3, [r3, #24]
 800392a:	2b02      	cmp	r3, #2
 800392c:	d145      	bne.n	80039ba <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800392e:	4b33      	ldr	r3, [pc, #204]	@ (80039fc <HAL_RCC_OscConfig+0x4b4>)
 8003930:	2200      	movs	r2, #0
 8003932:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003934:	f7fe ff24 	bl	8002780 <HAL_GetTick>
 8003938:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800393a:	e008      	b.n	800394e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800393c:	f7fe ff20 	bl	8002780 <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	2b02      	cmp	r3, #2
 8003948:	d901      	bls.n	800394e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	e093      	b.n	8003a76 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800394e:	4b29      	ldr	r3, [pc, #164]	@ (80039f4 <HAL_RCC_OscConfig+0x4ac>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d1f0      	bne.n	800393c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	69da      	ldr	r2, [r3, #28]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a1b      	ldr	r3, [r3, #32]
 8003962:	431a      	orrs	r2, r3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003968:	019b      	lsls	r3, r3, #6
 800396a:	431a      	orrs	r2, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003970:	085b      	lsrs	r3, r3, #1
 8003972:	3b01      	subs	r3, #1
 8003974:	041b      	lsls	r3, r3, #16
 8003976:	431a      	orrs	r2, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800397c:	061b      	lsls	r3, r3, #24
 800397e:	431a      	orrs	r2, r3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003984:	071b      	lsls	r3, r3, #28
 8003986:	491b      	ldr	r1, [pc, #108]	@ (80039f4 <HAL_RCC_OscConfig+0x4ac>)
 8003988:	4313      	orrs	r3, r2
 800398a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800398c:	4b1b      	ldr	r3, [pc, #108]	@ (80039fc <HAL_RCC_OscConfig+0x4b4>)
 800398e:	2201      	movs	r2, #1
 8003990:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003992:	f7fe fef5 	bl	8002780 <HAL_GetTick>
 8003996:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003998:	e008      	b.n	80039ac <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800399a:	f7fe fef1 	bl	8002780 <HAL_GetTick>
 800399e:	4602      	mov	r2, r0
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	2b02      	cmp	r3, #2
 80039a6:	d901      	bls.n	80039ac <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80039a8:	2303      	movs	r3, #3
 80039aa:	e064      	b.n	8003a76 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039ac:	4b11      	ldr	r3, [pc, #68]	@ (80039f4 <HAL_RCC_OscConfig+0x4ac>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d0f0      	beq.n	800399a <HAL_RCC_OscConfig+0x452>
 80039b8:	e05c      	b.n	8003a74 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039ba:	4b10      	ldr	r3, [pc, #64]	@ (80039fc <HAL_RCC_OscConfig+0x4b4>)
 80039bc:	2200      	movs	r2, #0
 80039be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039c0:	f7fe fede 	bl	8002780 <HAL_GetTick>
 80039c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039c6:	e008      	b.n	80039da <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039c8:	f7fe feda 	bl	8002780 <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d901      	bls.n	80039da <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e04d      	b.n	8003a76 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039da:	4b06      	ldr	r3, [pc, #24]	@ (80039f4 <HAL_RCC_OscConfig+0x4ac>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d1f0      	bne.n	80039c8 <HAL_RCC_OscConfig+0x480>
 80039e6:	e045      	b.n	8003a74 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	699b      	ldr	r3, [r3, #24]
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d107      	bne.n	8003a00 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e040      	b.n	8003a76 <HAL_RCC_OscConfig+0x52e>
 80039f4:	40023800 	.word	0x40023800
 80039f8:	40007000 	.word	0x40007000
 80039fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a00:	4b1f      	ldr	r3, [pc, #124]	@ (8003a80 <HAL_RCC_OscConfig+0x538>)
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	699b      	ldr	r3, [r3, #24]
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d030      	beq.n	8003a70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d129      	bne.n	8003a70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d122      	bne.n	8003a70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a2a:	68fa      	ldr	r2, [r7, #12]
 8003a2c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003a30:	4013      	ands	r3, r2
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003a36:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d119      	bne.n	8003a70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a46:	085b      	lsrs	r3, r3, #1
 8003a48:	3b01      	subs	r3, #1
 8003a4a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d10f      	bne.n	8003a70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a5a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d107      	bne.n	8003a70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a6a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d001      	beq.n	8003a74 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e000      	b.n	8003a76 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003a74:	2300      	movs	r3, #0
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3718      	adds	r7, #24
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	40023800 	.word	0x40023800

08003a84 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b082      	sub	sp, #8
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d101      	bne.n	8003a96 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e07b      	b.n	8003b8e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d108      	bne.n	8003ab0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003aa6:	d009      	beq.n	8003abc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	61da      	str	r2, [r3, #28]
 8003aae:	e005      	b.n	8003abc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d106      	bne.n	8003adc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f7fe fb64 	bl	80021a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2202      	movs	r2, #2
 8003ae0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003af2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003b04:	431a      	orrs	r2, r3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b0e:	431a      	orrs	r2, r3
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	691b      	ldr	r3, [r3, #16]
 8003b14:	f003 0302 	and.w	r3, r3, #2
 8003b18:	431a      	orrs	r2, r3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	695b      	ldr	r3, [r3, #20]
 8003b1e:	f003 0301 	and.w	r3, r3, #1
 8003b22:	431a      	orrs	r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	699b      	ldr	r3, [r3, #24]
 8003b28:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b2c:	431a      	orrs	r2, r3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	69db      	ldr	r3, [r3, #28]
 8003b32:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003b36:	431a      	orrs	r2, r3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6a1b      	ldr	r3, [r3, #32]
 8003b3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b40:	ea42 0103 	orr.w	r1, r2, r3
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b48:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	430a      	orrs	r2, r1
 8003b52:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	699b      	ldr	r3, [r3, #24]
 8003b58:	0c1b      	lsrs	r3, r3, #16
 8003b5a:	f003 0104 	and.w	r1, r3, #4
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b62:	f003 0210 	and.w	r2, r3, #16
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	430a      	orrs	r2, r1
 8003b6c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	69da      	ldr	r2, [r3, #28]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b7c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003b8c:	2300      	movs	r3, #0
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3708      	adds	r7, #8
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}

08003b96 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003b96:	b580      	push	{r7, lr}
 8003b98:	b08c      	sub	sp, #48	@ 0x30
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	60f8      	str	r0, [r7, #12]
 8003b9e:	60b9      	str	r1, [r7, #8]
 8003ba0:	607a      	str	r2, [r7, #4]
 8003ba2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d101      	bne.n	8003bbc <HAL_SPI_TransmitReceive+0x26>
 8003bb8:	2302      	movs	r3, #2
 8003bba:	e198      	b.n	8003eee <HAL_SPI_TransmitReceive+0x358>
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003bc4:	f7fe fddc 	bl	8002780 <HAL_GetTick>
 8003bc8:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003bd0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003bda:	887b      	ldrh	r3, [r7, #2]
 8003bdc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003bde:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d00f      	beq.n	8003c06 <HAL_SPI_TransmitReceive+0x70>
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003bec:	d107      	bne.n	8003bfe <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d103      	bne.n	8003bfe <HAL_SPI_TransmitReceive+0x68>
 8003bf6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003bfa:	2b04      	cmp	r3, #4
 8003bfc:	d003      	beq.n	8003c06 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003bfe:	2302      	movs	r3, #2
 8003c00:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8003c04:	e16d      	b.n	8003ee2 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d005      	beq.n	8003c18 <HAL_SPI_TransmitReceive+0x82>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d002      	beq.n	8003c18 <HAL_SPI_TransmitReceive+0x82>
 8003c12:	887b      	ldrh	r3, [r7, #2]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d103      	bne.n	8003c20 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8003c1e:	e160      	b.n	8003ee2 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	2b04      	cmp	r3, #4
 8003c2a:	d003      	beq.n	8003c34 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2205      	movs	r2, #5
 8003c30:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2200      	movs	r2, #0
 8003c38:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	887a      	ldrh	r2, [r7, #2]
 8003c44:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	887a      	ldrh	r2, [r7, #2]
 8003c4a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	68ba      	ldr	r2, [r7, #8]
 8003c50:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	887a      	ldrh	r2, [r7, #2]
 8003c56:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	887a      	ldrh	r2, [r7, #2]
 8003c5c:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2200      	movs	r2, #0
 8003c62:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2200      	movs	r2, #0
 8003c68:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c74:	2b40      	cmp	r3, #64	@ 0x40
 8003c76:	d007      	beq.n	8003c88 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003c86:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c90:	d17c      	bne.n	8003d8c <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d002      	beq.n	8003ca0 <HAL_SPI_TransmitReceive+0x10a>
 8003c9a:	8b7b      	ldrh	r3, [r7, #26]
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d16a      	bne.n	8003d76 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ca4:	881a      	ldrh	r2, [r3, #0]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cb0:	1c9a      	adds	r2, r3, #2
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	3b01      	subs	r3, #1
 8003cbe:	b29a      	uxth	r2, r3
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003cc4:	e057      	b.n	8003d76 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	f003 0302 	and.w	r3, r3, #2
 8003cd0:	2b02      	cmp	r3, #2
 8003cd2:	d11b      	bne.n	8003d0c <HAL_SPI_TransmitReceive+0x176>
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d016      	beq.n	8003d0c <HAL_SPI_TransmitReceive+0x176>
 8003cde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d113      	bne.n	8003d0c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ce8:	881a      	ldrh	r2, [r3, #0]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cf4:	1c9a      	adds	r2, r3, #2
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	3b01      	subs	r3, #1
 8003d02:	b29a      	uxth	r2, r3
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	f003 0301 	and.w	r3, r3, #1
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d119      	bne.n	8003d4e <HAL_SPI_TransmitReceive+0x1b8>
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d014      	beq.n	8003d4e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	68da      	ldr	r2, [r3, #12]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d2e:	b292      	uxth	r2, r2
 8003d30:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d36:	1c9a      	adds	r2, r3, #2
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	3b01      	subs	r3, #1
 8003d44:	b29a      	uxth	r2, r3
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003d4e:	f7fe fd17 	bl	8002780 <HAL_GetTick>
 8003d52:	4602      	mov	r2, r0
 8003d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d80b      	bhi.n	8003d76 <HAL_SPI_TransmitReceive+0x1e0>
 8003d5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d64:	d007      	beq.n	8003d76 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8003d74:	e0b5      	b.n	8003ee2 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d1a2      	bne.n	8003cc6 <HAL_SPI_TransmitReceive+0x130>
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d19d      	bne.n	8003cc6 <HAL_SPI_TransmitReceive+0x130>
 8003d8a:	e080      	b.n	8003e8e <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d002      	beq.n	8003d9a <HAL_SPI_TransmitReceive+0x204>
 8003d94:	8b7b      	ldrh	r3, [r7, #26]
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d16f      	bne.n	8003e7a <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	330c      	adds	r3, #12
 8003da4:	7812      	ldrb	r2, [r2, #0]
 8003da6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dac:	1c5a      	adds	r2, r3, #1
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	3b01      	subs	r3, #1
 8003dba:	b29a      	uxth	r2, r3
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003dc0:	e05b      	b.n	8003e7a <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	f003 0302 	and.w	r3, r3, #2
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	d11c      	bne.n	8003e0a <HAL_SPI_TransmitReceive+0x274>
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d017      	beq.n	8003e0a <HAL_SPI_TransmitReceive+0x274>
 8003dda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d114      	bne.n	8003e0a <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	330c      	adds	r3, #12
 8003dea:	7812      	ldrb	r2, [r2, #0]
 8003dec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003df2:	1c5a      	adds	r2, r3, #1
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	3b01      	subs	r3, #1
 8003e00:	b29a      	uxth	r2, r3
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003e06:	2300      	movs	r3, #0
 8003e08:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	f003 0301 	and.w	r3, r3, #1
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d119      	bne.n	8003e4c <HAL_SPI_TransmitReceive+0x2b6>
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d014      	beq.n	8003e4c <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	68da      	ldr	r2, [r3, #12]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e2c:	b2d2      	uxtb	r2, r2
 8003e2e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e34:	1c5a      	adds	r2, r3, #1
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	3b01      	subs	r3, #1
 8003e42:	b29a      	uxth	r2, r3
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003e4c:	f7fe fc98 	bl	8002780 <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d803      	bhi.n	8003e64 <HAL_SPI_TransmitReceive+0x2ce>
 8003e5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e62:	d102      	bne.n	8003e6a <HAL_SPI_TransmitReceive+0x2d4>
 8003e64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d107      	bne.n	8003e7a <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8003e78:	e033      	b.n	8003ee2 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d19e      	bne.n	8003dc2 <HAL_SPI_TransmitReceive+0x22c>
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d199      	bne.n	8003dc2 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e90:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003e92:	68f8      	ldr	r0, [r7, #12]
 8003e94:	f000 f8b8 	bl	8004008 <SPI_EndRxTxTransaction>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d006      	beq.n	8003eac <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2220      	movs	r2, #32
 8003ea8:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8003eaa:	e01a      	b.n	8003ee2 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d10a      	bne.n	8003eca <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	617b      	str	r3, [r7, #20]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	617b      	str	r3, [r7, #20]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	617b      	str	r3, [r7, #20]
 8003ec8:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d003      	beq.n	8003eda <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ed8:	e003      	b.n	8003ee2 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2201      	movs	r2, #1
 8003ede:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003eea:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3730      	adds	r7, #48	@ 0x30
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
	...

08003ef8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b088      	sub	sp, #32
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	60b9      	str	r1, [r7, #8]
 8003f02:	603b      	str	r3, [r7, #0]
 8003f04:	4613      	mov	r3, r2
 8003f06:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003f08:	f7fe fc3a 	bl	8002780 <HAL_GetTick>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f10:	1a9b      	subs	r3, r3, r2
 8003f12:	683a      	ldr	r2, [r7, #0]
 8003f14:	4413      	add	r3, r2
 8003f16:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003f18:	f7fe fc32 	bl	8002780 <HAL_GetTick>
 8003f1c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003f1e:	4b39      	ldr	r3, [pc, #228]	@ (8004004 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	015b      	lsls	r3, r3, #5
 8003f24:	0d1b      	lsrs	r3, r3, #20
 8003f26:	69fa      	ldr	r2, [r7, #28]
 8003f28:	fb02 f303 	mul.w	r3, r2, r3
 8003f2c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f2e:	e054      	b.n	8003fda <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f36:	d050      	beq.n	8003fda <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003f38:	f7fe fc22 	bl	8002780 <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	69bb      	ldr	r3, [r7, #24]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	69fa      	ldr	r2, [r7, #28]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d902      	bls.n	8003f4e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d13d      	bne.n	8003fca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	685a      	ldr	r2, [r3, #4]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003f5c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f66:	d111      	bne.n	8003f8c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f70:	d004      	beq.n	8003f7c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f7a:	d107      	bne.n	8003f8c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f8a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f94:	d10f      	bne.n	8003fb6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003fa4:	601a      	str	r2, [r3, #0]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003fb4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2201      	movs	r2, #1
 8003fba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e017      	b.n	8003ffa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d101      	bne.n	8003fd4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	3b01      	subs	r3, #1
 8003fd8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	689a      	ldr	r2, [r3, #8]
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	68ba      	ldr	r2, [r7, #8]
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	bf0c      	ite	eq
 8003fea:	2301      	moveq	r3, #1
 8003fec:	2300      	movne	r3, #0
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	79fb      	ldrb	r3, [r7, #7]
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d19b      	bne.n	8003f30 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003ff8:	2300      	movs	r3, #0
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3720      	adds	r7, #32
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	20000000 	.word	0x20000000

08004008 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b088      	sub	sp, #32
 800400c:	af02      	add	r7, sp, #8
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	60b9      	str	r1, [r7, #8]
 8004012:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	9300      	str	r3, [sp, #0]
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	2201      	movs	r2, #1
 800401c:	2102      	movs	r1, #2
 800401e:	68f8      	ldr	r0, [r7, #12]
 8004020:	f7ff ff6a 	bl	8003ef8 <SPI_WaitFlagStateUntilTimeout>
 8004024:	4603      	mov	r3, r0
 8004026:	2b00      	cmp	r3, #0
 8004028:	d007      	beq.n	800403a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800402e:	f043 0220 	orr.w	r2, r3, #32
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	e032      	b.n	80040a0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800403a:	4b1b      	ldr	r3, [pc, #108]	@ (80040a8 <SPI_EndRxTxTransaction+0xa0>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a1b      	ldr	r2, [pc, #108]	@ (80040ac <SPI_EndRxTxTransaction+0xa4>)
 8004040:	fba2 2303 	umull	r2, r3, r2, r3
 8004044:	0d5b      	lsrs	r3, r3, #21
 8004046:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800404a:	fb02 f303 	mul.w	r3, r2, r3
 800404e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004058:	d112      	bne.n	8004080 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	9300      	str	r3, [sp, #0]
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	2200      	movs	r2, #0
 8004062:	2180      	movs	r1, #128	@ 0x80
 8004064:	68f8      	ldr	r0, [r7, #12]
 8004066:	f7ff ff47 	bl	8003ef8 <SPI_WaitFlagStateUntilTimeout>
 800406a:	4603      	mov	r3, r0
 800406c:	2b00      	cmp	r3, #0
 800406e:	d016      	beq.n	800409e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004074:	f043 0220 	orr.w	r2, r3, #32
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800407c:	2303      	movs	r3, #3
 800407e:	e00f      	b.n	80040a0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d00a      	beq.n	800409c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	3b01      	subs	r3, #1
 800408a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004096:	2b80      	cmp	r3, #128	@ 0x80
 8004098:	d0f2      	beq.n	8004080 <SPI_EndRxTxTransaction+0x78>
 800409a:	e000      	b.n	800409e <SPI_EndRxTxTransaction+0x96>
        break;
 800409c:	bf00      	nop
  }

  return HAL_OK;
 800409e:	2300      	movs	r3, #0
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3718      	adds	r7, #24
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	20000000 	.word	0x20000000
 80040ac:	165e9f81 	.word	0x165e9f81

080040b0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b082      	sub	sp, #8
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d101      	bne.n	80040c2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e041      	b.n	8004146 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d106      	bne.n	80040dc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f7fe f8ac 	bl	8002234 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2202      	movs	r2, #2
 80040e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	3304      	adds	r3, #4
 80040ec:	4619      	mov	r1, r3
 80040ee:	4610      	mov	r0, r2
 80040f0:	f000 fd28 	bl	8004b44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004144:	2300      	movs	r3, #0
}
 8004146:	4618      	mov	r0, r3
 8004148:	3708      	adds	r7, #8
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
	...

08004150 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b084      	sub	sp, #16
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d109      	bne.n	8004174 <HAL_TIM_PWM_Start+0x24>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004166:	b2db      	uxtb	r3, r3
 8004168:	2b01      	cmp	r3, #1
 800416a:	bf14      	ite	ne
 800416c:	2301      	movne	r3, #1
 800416e:	2300      	moveq	r3, #0
 8004170:	b2db      	uxtb	r3, r3
 8004172:	e022      	b.n	80041ba <HAL_TIM_PWM_Start+0x6a>
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	2b04      	cmp	r3, #4
 8004178:	d109      	bne.n	800418e <HAL_TIM_PWM_Start+0x3e>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004180:	b2db      	uxtb	r3, r3
 8004182:	2b01      	cmp	r3, #1
 8004184:	bf14      	ite	ne
 8004186:	2301      	movne	r3, #1
 8004188:	2300      	moveq	r3, #0
 800418a:	b2db      	uxtb	r3, r3
 800418c:	e015      	b.n	80041ba <HAL_TIM_PWM_Start+0x6a>
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	2b08      	cmp	r3, #8
 8004192:	d109      	bne.n	80041a8 <HAL_TIM_PWM_Start+0x58>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800419a:	b2db      	uxtb	r3, r3
 800419c:	2b01      	cmp	r3, #1
 800419e:	bf14      	ite	ne
 80041a0:	2301      	movne	r3, #1
 80041a2:	2300      	moveq	r3, #0
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	e008      	b.n	80041ba <HAL_TIM_PWM_Start+0x6a>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	bf14      	ite	ne
 80041b4:	2301      	movne	r3, #1
 80041b6:	2300      	moveq	r3, #0
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d001      	beq.n	80041c2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e07c      	b.n	80042bc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d104      	bne.n	80041d2 <HAL_TIM_PWM_Start+0x82>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2202      	movs	r2, #2
 80041cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80041d0:	e013      	b.n	80041fa <HAL_TIM_PWM_Start+0xaa>
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	2b04      	cmp	r3, #4
 80041d6:	d104      	bne.n	80041e2 <HAL_TIM_PWM_Start+0x92>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2202      	movs	r2, #2
 80041dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80041e0:	e00b      	b.n	80041fa <HAL_TIM_PWM_Start+0xaa>
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	2b08      	cmp	r3, #8
 80041e6:	d104      	bne.n	80041f2 <HAL_TIM_PWM_Start+0xa2>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2202      	movs	r2, #2
 80041ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80041f0:	e003      	b.n	80041fa <HAL_TIM_PWM_Start+0xaa>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2202      	movs	r2, #2
 80041f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	2201      	movs	r2, #1
 8004200:	6839      	ldr	r1, [r7, #0]
 8004202:	4618      	mov	r0, r3
 8004204:	f001 f824 	bl	8005250 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a2d      	ldr	r2, [pc, #180]	@ (80042c4 <HAL_TIM_PWM_Start+0x174>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d004      	beq.n	800421c <HAL_TIM_PWM_Start+0xcc>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a2c      	ldr	r2, [pc, #176]	@ (80042c8 <HAL_TIM_PWM_Start+0x178>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d101      	bne.n	8004220 <HAL_TIM_PWM_Start+0xd0>
 800421c:	2301      	movs	r3, #1
 800421e:	e000      	b.n	8004222 <HAL_TIM_PWM_Start+0xd2>
 8004220:	2300      	movs	r3, #0
 8004222:	2b00      	cmp	r3, #0
 8004224:	d007      	beq.n	8004236 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004234:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a22      	ldr	r2, [pc, #136]	@ (80042c4 <HAL_TIM_PWM_Start+0x174>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d022      	beq.n	8004286 <HAL_TIM_PWM_Start+0x136>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004248:	d01d      	beq.n	8004286 <HAL_TIM_PWM_Start+0x136>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a1f      	ldr	r2, [pc, #124]	@ (80042cc <HAL_TIM_PWM_Start+0x17c>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d018      	beq.n	8004286 <HAL_TIM_PWM_Start+0x136>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a1d      	ldr	r2, [pc, #116]	@ (80042d0 <HAL_TIM_PWM_Start+0x180>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d013      	beq.n	8004286 <HAL_TIM_PWM_Start+0x136>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a1c      	ldr	r2, [pc, #112]	@ (80042d4 <HAL_TIM_PWM_Start+0x184>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d00e      	beq.n	8004286 <HAL_TIM_PWM_Start+0x136>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a16      	ldr	r2, [pc, #88]	@ (80042c8 <HAL_TIM_PWM_Start+0x178>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d009      	beq.n	8004286 <HAL_TIM_PWM_Start+0x136>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a18      	ldr	r2, [pc, #96]	@ (80042d8 <HAL_TIM_PWM_Start+0x188>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d004      	beq.n	8004286 <HAL_TIM_PWM_Start+0x136>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a16      	ldr	r2, [pc, #88]	@ (80042dc <HAL_TIM_PWM_Start+0x18c>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d111      	bne.n	80042aa <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	f003 0307 	and.w	r3, r3, #7
 8004290:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2b06      	cmp	r3, #6
 8004296:	d010      	beq.n	80042ba <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f042 0201 	orr.w	r2, r2, #1
 80042a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042a8:	e007      	b.n	80042ba <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f042 0201 	orr.w	r2, r2, #1
 80042b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80042ba:	2300      	movs	r3, #0
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3710      	adds	r7, #16
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	40010000 	.word	0x40010000
 80042c8:	40010400 	.word	0x40010400
 80042cc:	40000400 	.word	0x40000400
 80042d0:	40000800 	.word	0x40000800
 80042d4:	40000c00 	.word	0x40000c00
 80042d8:	40014000 	.word	0x40014000
 80042dc:	40001800 	.word	0x40001800

080042e0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b082      	sub	sp, #8
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d101      	bne.n	80042f2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e041      	b.n	8004376 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d106      	bne.n	800430c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f7fd ffb6 	bl	8002278 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2202      	movs	r2, #2
 8004310:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	3304      	adds	r3, #4
 800431c:	4619      	mov	r1, r3
 800431e:	4610      	mov	r0, r2
 8004320:	f000 fc10 	bl	8004b44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004374:	2300      	movs	r3, #0
}
 8004376:	4618      	mov	r0, r3
 8004378:	3708      	adds	r7, #8
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
	...

08004380 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b084      	sub	sp, #16
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800438a:	2300      	movs	r3, #0
 800438c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d104      	bne.n	800439e <HAL_TIM_IC_Start_IT+0x1e>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800439a:	b2db      	uxtb	r3, r3
 800439c:	e013      	b.n	80043c6 <HAL_TIM_IC_Start_IT+0x46>
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	2b04      	cmp	r3, #4
 80043a2:	d104      	bne.n	80043ae <HAL_TIM_IC_Start_IT+0x2e>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	e00b      	b.n	80043c6 <HAL_TIM_IC_Start_IT+0x46>
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	2b08      	cmp	r3, #8
 80043b2:	d104      	bne.n	80043be <HAL_TIM_IC_Start_IT+0x3e>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	e003      	b.n	80043c6 <HAL_TIM_IC_Start_IT+0x46>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d104      	bne.n	80043d8 <HAL_TIM_IC_Start_IT+0x58>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	e013      	b.n	8004400 <HAL_TIM_IC_Start_IT+0x80>
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	2b04      	cmp	r3, #4
 80043dc:	d104      	bne.n	80043e8 <HAL_TIM_IC_Start_IT+0x68>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	e00b      	b.n	8004400 <HAL_TIM_IC_Start_IT+0x80>
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	2b08      	cmp	r3, #8
 80043ec:	d104      	bne.n	80043f8 <HAL_TIM_IC_Start_IT+0x78>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	e003      	b.n	8004400 <HAL_TIM_IC_Start_IT+0x80>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004402:	7bbb      	ldrb	r3, [r7, #14]
 8004404:	2b01      	cmp	r3, #1
 8004406:	d102      	bne.n	800440e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004408:	7b7b      	ldrb	r3, [r7, #13]
 800440a:	2b01      	cmp	r3, #1
 800440c:	d001      	beq.n	8004412 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e0cc      	b.n	80045ac <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d104      	bne.n	8004422 <HAL_TIM_IC_Start_IT+0xa2>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2202      	movs	r2, #2
 800441c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004420:	e013      	b.n	800444a <HAL_TIM_IC_Start_IT+0xca>
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	2b04      	cmp	r3, #4
 8004426:	d104      	bne.n	8004432 <HAL_TIM_IC_Start_IT+0xb2>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2202      	movs	r2, #2
 800442c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004430:	e00b      	b.n	800444a <HAL_TIM_IC_Start_IT+0xca>
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	2b08      	cmp	r3, #8
 8004436:	d104      	bne.n	8004442 <HAL_TIM_IC_Start_IT+0xc2>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2202      	movs	r2, #2
 800443c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004440:	e003      	b.n	800444a <HAL_TIM_IC_Start_IT+0xca>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2202      	movs	r2, #2
 8004446:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d104      	bne.n	800445a <HAL_TIM_IC_Start_IT+0xda>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2202      	movs	r2, #2
 8004454:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004458:	e013      	b.n	8004482 <HAL_TIM_IC_Start_IT+0x102>
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	2b04      	cmp	r3, #4
 800445e:	d104      	bne.n	800446a <HAL_TIM_IC_Start_IT+0xea>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2202      	movs	r2, #2
 8004464:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004468:	e00b      	b.n	8004482 <HAL_TIM_IC_Start_IT+0x102>
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	2b08      	cmp	r3, #8
 800446e:	d104      	bne.n	800447a <HAL_TIM_IC_Start_IT+0xfa>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2202      	movs	r2, #2
 8004474:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004478:	e003      	b.n	8004482 <HAL_TIM_IC_Start_IT+0x102>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2202      	movs	r2, #2
 800447e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	2b0c      	cmp	r3, #12
 8004486:	d841      	bhi.n	800450c <HAL_TIM_IC_Start_IT+0x18c>
 8004488:	a201      	add	r2, pc, #4	@ (adr r2, 8004490 <HAL_TIM_IC_Start_IT+0x110>)
 800448a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800448e:	bf00      	nop
 8004490:	080044c5 	.word	0x080044c5
 8004494:	0800450d 	.word	0x0800450d
 8004498:	0800450d 	.word	0x0800450d
 800449c:	0800450d 	.word	0x0800450d
 80044a0:	080044d7 	.word	0x080044d7
 80044a4:	0800450d 	.word	0x0800450d
 80044a8:	0800450d 	.word	0x0800450d
 80044ac:	0800450d 	.word	0x0800450d
 80044b0:	080044e9 	.word	0x080044e9
 80044b4:	0800450d 	.word	0x0800450d
 80044b8:	0800450d 	.word	0x0800450d
 80044bc:	0800450d 	.word	0x0800450d
 80044c0:	080044fb 	.word	0x080044fb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	68da      	ldr	r2, [r3, #12]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f042 0202 	orr.w	r2, r2, #2
 80044d2:	60da      	str	r2, [r3, #12]
      break;
 80044d4:	e01d      	b.n	8004512 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	68da      	ldr	r2, [r3, #12]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f042 0204 	orr.w	r2, r2, #4
 80044e4:	60da      	str	r2, [r3, #12]
      break;
 80044e6:	e014      	b.n	8004512 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	68da      	ldr	r2, [r3, #12]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f042 0208 	orr.w	r2, r2, #8
 80044f6:	60da      	str	r2, [r3, #12]
      break;
 80044f8:	e00b      	b.n	8004512 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	68da      	ldr	r2, [r3, #12]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f042 0210 	orr.w	r2, r2, #16
 8004508:	60da      	str	r2, [r3, #12]
      break;
 800450a:	e002      	b.n	8004512 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	73fb      	strb	r3, [r7, #15]
      break;
 8004510:	bf00      	nop
  }

  if (status == HAL_OK)
 8004512:	7bfb      	ldrb	r3, [r7, #15]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d148      	bne.n	80045aa <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	2201      	movs	r2, #1
 800451e:	6839      	ldr	r1, [r7, #0]
 8004520:	4618      	mov	r0, r3
 8004522:	f000 fe95 	bl	8005250 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a22      	ldr	r2, [pc, #136]	@ (80045b4 <HAL_TIM_IC_Start_IT+0x234>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d022      	beq.n	8004576 <HAL_TIM_IC_Start_IT+0x1f6>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004538:	d01d      	beq.n	8004576 <HAL_TIM_IC_Start_IT+0x1f6>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a1e      	ldr	r2, [pc, #120]	@ (80045b8 <HAL_TIM_IC_Start_IT+0x238>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d018      	beq.n	8004576 <HAL_TIM_IC_Start_IT+0x1f6>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a1c      	ldr	r2, [pc, #112]	@ (80045bc <HAL_TIM_IC_Start_IT+0x23c>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d013      	beq.n	8004576 <HAL_TIM_IC_Start_IT+0x1f6>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a1b      	ldr	r2, [pc, #108]	@ (80045c0 <HAL_TIM_IC_Start_IT+0x240>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d00e      	beq.n	8004576 <HAL_TIM_IC_Start_IT+0x1f6>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a19      	ldr	r2, [pc, #100]	@ (80045c4 <HAL_TIM_IC_Start_IT+0x244>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d009      	beq.n	8004576 <HAL_TIM_IC_Start_IT+0x1f6>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a18      	ldr	r2, [pc, #96]	@ (80045c8 <HAL_TIM_IC_Start_IT+0x248>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d004      	beq.n	8004576 <HAL_TIM_IC_Start_IT+0x1f6>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a16      	ldr	r2, [pc, #88]	@ (80045cc <HAL_TIM_IC_Start_IT+0x24c>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d111      	bne.n	800459a <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	f003 0307 	and.w	r3, r3, #7
 8004580:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	2b06      	cmp	r3, #6
 8004586:	d010      	beq.n	80045aa <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f042 0201 	orr.w	r2, r2, #1
 8004596:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004598:	e007      	b.n	80045aa <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f042 0201 	orr.w	r2, r2, #1
 80045a8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80045aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3710      	adds	r7, #16
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}
 80045b4:	40010000 	.word	0x40010000
 80045b8:	40000400 	.word	0x40000400
 80045bc:	40000800 	.word	0x40000800
 80045c0:	40000c00 	.word	0x40000c00
 80045c4:	40010400 	.word	0x40010400
 80045c8:	40014000 	.word	0x40014000
 80045cc:	40001800 	.word	0x40001800

080045d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	68db      	ldr	r3, [r3, #12]
 80045de:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	691b      	ldr	r3, [r3, #16]
 80045e6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	f003 0302 	and.w	r3, r3, #2
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d020      	beq.n	8004634 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	f003 0302 	and.w	r3, r3, #2
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d01b      	beq.n	8004634 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f06f 0202 	mvn.w	r2, #2
 8004604:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2201      	movs	r2, #1
 800460a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	699b      	ldr	r3, [r3, #24]
 8004612:	f003 0303 	and.w	r3, r3, #3
 8004616:	2b00      	cmp	r3, #0
 8004618:	d003      	beq.n	8004622 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f7fc fd2c 	bl	8001078 <HAL_TIM_IC_CaptureCallback>
 8004620:	e005      	b.n	800462e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f000 fa70 	bl	8004b08 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f000 fa77 	bl	8004b1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	f003 0304 	and.w	r3, r3, #4
 800463a:	2b00      	cmp	r3, #0
 800463c:	d020      	beq.n	8004680 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f003 0304 	and.w	r3, r3, #4
 8004644:	2b00      	cmp	r3, #0
 8004646:	d01b      	beq.n	8004680 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f06f 0204 	mvn.w	r2, #4
 8004650:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2202      	movs	r2, #2
 8004656:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	699b      	ldr	r3, [r3, #24]
 800465e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004662:	2b00      	cmp	r3, #0
 8004664:	d003      	beq.n	800466e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f7fc fd06 	bl	8001078 <HAL_TIM_IC_CaptureCallback>
 800466c:	e005      	b.n	800467a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f000 fa4a 	bl	8004b08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f000 fa51 	bl	8004b1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	f003 0308 	and.w	r3, r3, #8
 8004686:	2b00      	cmp	r3, #0
 8004688:	d020      	beq.n	80046cc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	f003 0308 	and.w	r3, r3, #8
 8004690:	2b00      	cmp	r3, #0
 8004692:	d01b      	beq.n	80046cc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f06f 0208 	mvn.w	r2, #8
 800469c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2204      	movs	r2, #4
 80046a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	69db      	ldr	r3, [r3, #28]
 80046aa:	f003 0303 	and.w	r3, r3, #3
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d003      	beq.n	80046ba <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f7fc fce0 	bl	8001078 <HAL_TIM_IC_CaptureCallback>
 80046b8:	e005      	b.n	80046c6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f000 fa24 	bl	8004b08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f000 fa2b 	bl	8004b1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2200      	movs	r2, #0
 80046ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	f003 0310 	and.w	r3, r3, #16
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d020      	beq.n	8004718 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	f003 0310 	and.w	r3, r3, #16
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d01b      	beq.n	8004718 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f06f 0210 	mvn.w	r2, #16
 80046e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2208      	movs	r2, #8
 80046ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	69db      	ldr	r3, [r3, #28]
 80046f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d003      	beq.n	8004706 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f7fc fcba 	bl	8001078 <HAL_TIM_IC_CaptureCallback>
 8004704:	e005      	b.n	8004712 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f000 f9fe 	bl	8004b08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f000 fa05 	bl	8004b1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	f003 0301 	and.w	r3, r3, #1
 800471e:	2b00      	cmp	r3, #0
 8004720:	d00c      	beq.n	800473c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f003 0301 	and.w	r3, r3, #1
 8004728:	2b00      	cmp	r3, #0
 800472a:	d007      	beq.n	800473c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f06f 0201 	mvn.w	r2, #1
 8004734:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 f9dc 	bl	8004af4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004742:	2b00      	cmp	r3, #0
 8004744:	d00c      	beq.n	8004760 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800474c:	2b00      	cmp	r3, #0
 800474e:	d007      	beq.n	8004760 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004758:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f000 fe76 	bl	800544c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004766:	2b00      	cmp	r3, #0
 8004768:	d00c      	beq.n	8004784 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004770:	2b00      	cmp	r3, #0
 8004772:	d007      	beq.n	8004784 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800477c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f000 f9d6 	bl	8004b30 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	f003 0320 	and.w	r3, r3, #32
 800478a:	2b00      	cmp	r3, #0
 800478c:	d00c      	beq.n	80047a8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	f003 0320 	and.w	r3, r3, #32
 8004794:	2b00      	cmp	r3, #0
 8004796:	d007      	beq.n	80047a8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f06f 0220 	mvn.w	r2, #32
 80047a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f000 fe48 	bl	8005438 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80047a8:	bf00      	nop
 80047aa:	3710      	adds	r7, #16
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b086      	sub	sp, #24
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	60f8      	str	r0, [r7, #12]
 80047b8:	60b9      	str	r1, [r7, #8]
 80047ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047bc:	2300      	movs	r3, #0
 80047be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d101      	bne.n	80047ce <HAL_TIM_IC_ConfigChannel+0x1e>
 80047ca:	2302      	movs	r3, #2
 80047cc:	e088      	b.n	80048e0 <HAL_TIM_IC_ConfigChannel+0x130>
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2201      	movs	r2, #1
 80047d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d11b      	bne.n	8004814 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80047ec:	f000 fc06 	bl	8004ffc <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	699a      	ldr	r2, [r3, #24]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f022 020c 	bic.w	r2, r2, #12
 80047fe:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	6999      	ldr	r1, [r3, #24]
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	689a      	ldr	r2, [r3, #8]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	430a      	orrs	r2, r1
 8004810:	619a      	str	r2, [r3, #24]
 8004812:	e060      	b.n	80048d6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2b04      	cmp	r3, #4
 8004818:	d11c      	bne.n	8004854 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800482a:	f000 fc5b 	bl	80050e4 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	699a      	ldr	r2, [r3, #24]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800483c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	6999      	ldr	r1, [r3, #24]
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	021a      	lsls	r2, r3, #8
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	430a      	orrs	r2, r1
 8004850:	619a      	str	r2, [r3, #24]
 8004852:	e040      	b.n	80048d6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2b08      	cmp	r3, #8
 8004858:	d11b      	bne.n	8004892 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800486a:	f000 fc78 	bl	800515e <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	69da      	ldr	r2, [r3, #28]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f022 020c 	bic.w	r2, r2, #12
 800487c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	69d9      	ldr	r1, [r3, #28]
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	689a      	ldr	r2, [r3, #8]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	430a      	orrs	r2, r1
 800488e:	61da      	str	r2, [r3, #28]
 8004890:	e021      	b.n	80048d6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2b0c      	cmp	r3, #12
 8004896:	d11c      	bne.n	80048d2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80048a8:	f000 fc95 	bl	80051d6 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	69da      	ldr	r2, [r3, #28]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80048ba:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	69d9      	ldr	r1, [r3, #28]
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	021a      	lsls	r2, r3, #8
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	430a      	orrs	r2, r1
 80048ce:	61da      	str	r2, [r3, #28]
 80048d0:	e001      	b.n	80048d6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2200      	movs	r2, #0
 80048da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80048de:	7dfb      	ldrb	r3, [r7, #23]
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3718      	adds	r7, #24
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}

080048e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b086      	sub	sp, #24
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	60f8      	str	r0, [r7, #12]
 80048f0:	60b9      	str	r1, [r7, #8]
 80048f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048f4:	2300      	movs	r3, #0
 80048f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d101      	bne.n	8004906 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004902:	2302      	movs	r3, #2
 8004904:	e0ae      	b.n	8004a64 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2201      	movs	r2, #1
 800490a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2b0c      	cmp	r3, #12
 8004912:	f200 809f 	bhi.w	8004a54 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004916:	a201      	add	r2, pc, #4	@ (adr r2, 800491c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800491c:	08004951 	.word	0x08004951
 8004920:	08004a55 	.word	0x08004a55
 8004924:	08004a55 	.word	0x08004a55
 8004928:	08004a55 	.word	0x08004a55
 800492c:	08004991 	.word	0x08004991
 8004930:	08004a55 	.word	0x08004a55
 8004934:	08004a55 	.word	0x08004a55
 8004938:	08004a55 	.word	0x08004a55
 800493c:	080049d3 	.word	0x080049d3
 8004940:	08004a55 	.word	0x08004a55
 8004944:	08004a55 	.word	0x08004a55
 8004948:	08004a55 	.word	0x08004a55
 800494c:	08004a13 	.word	0x08004a13
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	68b9      	ldr	r1, [r7, #8]
 8004956:	4618      	mov	r0, r3
 8004958:	f000 f9a0 	bl	8004c9c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	699a      	ldr	r2, [r3, #24]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f042 0208 	orr.w	r2, r2, #8
 800496a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	699a      	ldr	r2, [r3, #24]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f022 0204 	bic.w	r2, r2, #4
 800497a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	6999      	ldr	r1, [r3, #24]
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	691a      	ldr	r2, [r3, #16]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	430a      	orrs	r2, r1
 800498c:	619a      	str	r2, [r3, #24]
      break;
 800498e:	e064      	b.n	8004a5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	68b9      	ldr	r1, [r7, #8]
 8004996:	4618      	mov	r0, r3
 8004998:	f000 f9f0 	bl	8004d7c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	699a      	ldr	r2, [r3, #24]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80049aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	699a      	ldr	r2, [r3, #24]
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	6999      	ldr	r1, [r3, #24]
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	691b      	ldr	r3, [r3, #16]
 80049c6:	021a      	lsls	r2, r3, #8
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	430a      	orrs	r2, r1
 80049ce:	619a      	str	r2, [r3, #24]
      break;
 80049d0:	e043      	b.n	8004a5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	68b9      	ldr	r1, [r7, #8]
 80049d8:	4618      	mov	r0, r3
 80049da:	f000 fa45 	bl	8004e68 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	69da      	ldr	r2, [r3, #28]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f042 0208 	orr.w	r2, r2, #8
 80049ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	69da      	ldr	r2, [r3, #28]
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f022 0204 	bic.w	r2, r2, #4
 80049fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	69d9      	ldr	r1, [r3, #28]
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	691a      	ldr	r2, [r3, #16]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	430a      	orrs	r2, r1
 8004a0e:	61da      	str	r2, [r3, #28]
      break;
 8004a10:	e023      	b.n	8004a5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	68b9      	ldr	r1, [r7, #8]
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f000 fa99 	bl	8004f50 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	69da      	ldr	r2, [r3, #28]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	69da      	ldr	r2, [r3, #28]
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	69d9      	ldr	r1, [r3, #28]
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	691b      	ldr	r3, [r3, #16]
 8004a48:	021a      	lsls	r2, r3, #8
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	430a      	orrs	r2, r1
 8004a50:	61da      	str	r2, [r3, #28]
      break;
 8004a52:	e002      	b.n	8004a5a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	75fb      	strb	r3, [r7, #23]
      break;
 8004a58:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004a62:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3718      	adds	r7, #24
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}

08004a6c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b085      	sub	sp, #20
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004a76:	2300      	movs	r3, #0
 8004a78:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	2b0c      	cmp	r3, #12
 8004a7e:	d831      	bhi.n	8004ae4 <HAL_TIM_ReadCapturedValue+0x78>
 8004a80:	a201      	add	r2, pc, #4	@ (adr r2, 8004a88 <HAL_TIM_ReadCapturedValue+0x1c>)
 8004a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a86:	bf00      	nop
 8004a88:	08004abd 	.word	0x08004abd
 8004a8c:	08004ae5 	.word	0x08004ae5
 8004a90:	08004ae5 	.word	0x08004ae5
 8004a94:	08004ae5 	.word	0x08004ae5
 8004a98:	08004ac7 	.word	0x08004ac7
 8004a9c:	08004ae5 	.word	0x08004ae5
 8004aa0:	08004ae5 	.word	0x08004ae5
 8004aa4:	08004ae5 	.word	0x08004ae5
 8004aa8:	08004ad1 	.word	0x08004ad1
 8004aac:	08004ae5 	.word	0x08004ae5
 8004ab0:	08004ae5 	.word	0x08004ae5
 8004ab4:	08004ae5 	.word	0x08004ae5
 8004ab8:	08004adb 	.word	0x08004adb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ac2:	60fb      	str	r3, [r7, #12]

      break;
 8004ac4:	e00f      	b.n	8004ae6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004acc:	60fb      	str	r3, [r7, #12]

      break;
 8004ace:	e00a      	b.n	8004ae6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ad6:	60fb      	str	r3, [r7, #12]

      break;
 8004ad8:	e005      	b.n	8004ae6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ae0:	60fb      	str	r3, [r7, #12]

      break;
 8004ae2:	e000      	b.n	8004ae6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004ae4:	bf00      	nop
  }

  return tmpreg;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3714      	adds	r7, #20
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr

08004af4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004afc:	bf00      	nop
 8004afe:	370c      	adds	r7, #12
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr

08004b08 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b083      	sub	sp, #12
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b10:	bf00      	nop
 8004b12:	370c      	adds	r7, #12
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr

08004b1c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b083      	sub	sp, #12
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b24:	bf00      	nop
 8004b26:	370c      	adds	r7, #12
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr

08004b30 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b083      	sub	sp, #12
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b38:	bf00      	nop
 8004b3a:	370c      	adds	r7, #12
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr

08004b44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b085      	sub	sp, #20
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	4a46      	ldr	r2, [pc, #280]	@ (8004c70 <TIM_Base_SetConfig+0x12c>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d013      	beq.n	8004b84 <TIM_Base_SetConfig+0x40>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b62:	d00f      	beq.n	8004b84 <TIM_Base_SetConfig+0x40>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	4a43      	ldr	r2, [pc, #268]	@ (8004c74 <TIM_Base_SetConfig+0x130>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d00b      	beq.n	8004b84 <TIM_Base_SetConfig+0x40>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	4a42      	ldr	r2, [pc, #264]	@ (8004c78 <TIM_Base_SetConfig+0x134>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d007      	beq.n	8004b84 <TIM_Base_SetConfig+0x40>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	4a41      	ldr	r2, [pc, #260]	@ (8004c7c <TIM_Base_SetConfig+0x138>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d003      	beq.n	8004b84 <TIM_Base_SetConfig+0x40>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	4a40      	ldr	r2, [pc, #256]	@ (8004c80 <TIM_Base_SetConfig+0x13c>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d108      	bne.n	8004b96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	68fa      	ldr	r2, [r7, #12]
 8004b92:	4313      	orrs	r3, r2
 8004b94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	4a35      	ldr	r2, [pc, #212]	@ (8004c70 <TIM_Base_SetConfig+0x12c>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d02b      	beq.n	8004bf6 <TIM_Base_SetConfig+0xb2>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ba4:	d027      	beq.n	8004bf6 <TIM_Base_SetConfig+0xb2>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4a32      	ldr	r2, [pc, #200]	@ (8004c74 <TIM_Base_SetConfig+0x130>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d023      	beq.n	8004bf6 <TIM_Base_SetConfig+0xb2>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	4a31      	ldr	r2, [pc, #196]	@ (8004c78 <TIM_Base_SetConfig+0x134>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d01f      	beq.n	8004bf6 <TIM_Base_SetConfig+0xb2>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	4a30      	ldr	r2, [pc, #192]	@ (8004c7c <TIM_Base_SetConfig+0x138>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d01b      	beq.n	8004bf6 <TIM_Base_SetConfig+0xb2>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	4a2f      	ldr	r2, [pc, #188]	@ (8004c80 <TIM_Base_SetConfig+0x13c>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d017      	beq.n	8004bf6 <TIM_Base_SetConfig+0xb2>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	4a2e      	ldr	r2, [pc, #184]	@ (8004c84 <TIM_Base_SetConfig+0x140>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d013      	beq.n	8004bf6 <TIM_Base_SetConfig+0xb2>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	4a2d      	ldr	r2, [pc, #180]	@ (8004c88 <TIM_Base_SetConfig+0x144>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d00f      	beq.n	8004bf6 <TIM_Base_SetConfig+0xb2>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	4a2c      	ldr	r2, [pc, #176]	@ (8004c8c <TIM_Base_SetConfig+0x148>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d00b      	beq.n	8004bf6 <TIM_Base_SetConfig+0xb2>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	4a2b      	ldr	r2, [pc, #172]	@ (8004c90 <TIM_Base_SetConfig+0x14c>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d007      	beq.n	8004bf6 <TIM_Base_SetConfig+0xb2>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4a2a      	ldr	r2, [pc, #168]	@ (8004c94 <TIM_Base_SetConfig+0x150>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d003      	beq.n	8004bf6 <TIM_Base_SetConfig+0xb2>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	4a29      	ldr	r2, [pc, #164]	@ (8004c98 <TIM_Base_SetConfig+0x154>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d108      	bne.n	8004c08 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004bfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	68db      	ldr	r3, [r3, #12]
 8004c02:	68fa      	ldr	r2, [r7, #12]
 8004c04:	4313      	orrs	r3, r2
 8004c06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	695b      	ldr	r3, [r3, #20]
 8004c12:	4313      	orrs	r3, r2
 8004c14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	68fa      	ldr	r2, [r7, #12]
 8004c1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	689a      	ldr	r2, [r3, #8]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	4a10      	ldr	r2, [pc, #64]	@ (8004c70 <TIM_Base_SetConfig+0x12c>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d003      	beq.n	8004c3c <TIM_Base_SetConfig+0xf8>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	4a12      	ldr	r2, [pc, #72]	@ (8004c80 <TIM_Base_SetConfig+0x13c>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d103      	bne.n	8004c44 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	691a      	ldr	r2, [r3, #16]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2201      	movs	r2, #1
 8004c48:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	691b      	ldr	r3, [r3, #16]
 8004c4e:	f003 0301 	and.w	r3, r3, #1
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	d105      	bne.n	8004c62 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	691b      	ldr	r3, [r3, #16]
 8004c5a:	f023 0201 	bic.w	r2, r3, #1
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	611a      	str	r2, [r3, #16]
  }
}
 8004c62:	bf00      	nop
 8004c64:	3714      	adds	r7, #20
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr
 8004c6e:	bf00      	nop
 8004c70:	40010000 	.word	0x40010000
 8004c74:	40000400 	.word	0x40000400
 8004c78:	40000800 	.word	0x40000800
 8004c7c:	40000c00 	.word	0x40000c00
 8004c80:	40010400 	.word	0x40010400
 8004c84:	40014000 	.word	0x40014000
 8004c88:	40014400 	.word	0x40014400
 8004c8c:	40014800 	.word	0x40014800
 8004c90:	40001800 	.word	0x40001800
 8004c94:	40001c00 	.word	0x40001c00
 8004c98:	40002000 	.word	0x40002000

08004c9c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b087      	sub	sp, #28
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6a1b      	ldr	r3, [r3, #32]
 8004caa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6a1b      	ldr	r3, [r3, #32]
 8004cb0:	f023 0201 	bic.w	r2, r3, #1
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	699b      	ldr	r3, [r3, #24]
 8004cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f023 0303 	bic.w	r3, r3, #3
 8004cd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	68fa      	ldr	r2, [r7, #12]
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	f023 0302 	bic.w	r3, r3, #2
 8004ce4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	697a      	ldr	r2, [r7, #20]
 8004cec:	4313      	orrs	r3, r2
 8004cee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	4a20      	ldr	r2, [pc, #128]	@ (8004d74 <TIM_OC1_SetConfig+0xd8>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d003      	beq.n	8004d00 <TIM_OC1_SetConfig+0x64>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	4a1f      	ldr	r2, [pc, #124]	@ (8004d78 <TIM_OC1_SetConfig+0xdc>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d10c      	bne.n	8004d1a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	f023 0308 	bic.w	r3, r3, #8
 8004d06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	697a      	ldr	r2, [r7, #20]
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	f023 0304 	bic.w	r3, r3, #4
 8004d18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	4a15      	ldr	r2, [pc, #84]	@ (8004d74 <TIM_OC1_SetConfig+0xd8>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d003      	beq.n	8004d2a <TIM_OC1_SetConfig+0x8e>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	4a14      	ldr	r2, [pc, #80]	@ (8004d78 <TIM_OC1_SetConfig+0xdc>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d111      	bne.n	8004d4e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004d38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	695b      	ldr	r3, [r3, #20]
 8004d3e:	693a      	ldr	r2, [r7, #16]
 8004d40:	4313      	orrs	r3, r2
 8004d42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	699b      	ldr	r3, [r3, #24]
 8004d48:	693a      	ldr	r2, [r7, #16]
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	693a      	ldr	r2, [r7, #16]
 8004d52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	68fa      	ldr	r2, [r7, #12]
 8004d58:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	685a      	ldr	r2, [r3, #4]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	697a      	ldr	r2, [r7, #20]
 8004d66:	621a      	str	r2, [r3, #32]
}
 8004d68:	bf00      	nop
 8004d6a:	371c      	adds	r7, #28
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr
 8004d74:	40010000 	.word	0x40010000
 8004d78:	40010400 	.word	0x40010400

08004d7c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b087      	sub	sp, #28
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a1b      	ldr	r3, [r3, #32]
 8004d8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6a1b      	ldr	r3, [r3, #32]
 8004d90:	f023 0210 	bic.w	r2, r3, #16
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	699b      	ldr	r3, [r3, #24]
 8004da2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004daa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004db2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	021b      	lsls	r3, r3, #8
 8004dba:	68fa      	ldr	r2, [r7, #12]
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	f023 0320 	bic.w	r3, r3, #32
 8004dc6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	011b      	lsls	r3, r3, #4
 8004dce:	697a      	ldr	r2, [r7, #20]
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	4a22      	ldr	r2, [pc, #136]	@ (8004e60 <TIM_OC2_SetConfig+0xe4>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d003      	beq.n	8004de4 <TIM_OC2_SetConfig+0x68>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	4a21      	ldr	r2, [pc, #132]	@ (8004e64 <TIM_OC2_SetConfig+0xe8>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d10d      	bne.n	8004e00 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004dea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	68db      	ldr	r3, [r3, #12]
 8004df0:	011b      	lsls	r3, r3, #4
 8004df2:	697a      	ldr	r2, [r7, #20]
 8004df4:	4313      	orrs	r3, r2
 8004df6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004dfe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	4a17      	ldr	r2, [pc, #92]	@ (8004e60 <TIM_OC2_SetConfig+0xe4>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d003      	beq.n	8004e10 <TIM_OC2_SetConfig+0x94>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	4a16      	ldr	r2, [pc, #88]	@ (8004e64 <TIM_OC2_SetConfig+0xe8>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d113      	bne.n	8004e38 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004e16:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004e1e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	695b      	ldr	r3, [r3, #20]
 8004e24:	009b      	lsls	r3, r3, #2
 8004e26:	693a      	ldr	r2, [r7, #16]
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	699b      	ldr	r3, [r3, #24]
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	693a      	ldr	r2, [r7, #16]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	693a      	ldr	r2, [r7, #16]
 8004e3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	68fa      	ldr	r2, [r7, #12]
 8004e42:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	685a      	ldr	r2, [r3, #4]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	697a      	ldr	r2, [r7, #20]
 8004e50:	621a      	str	r2, [r3, #32]
}
 8004e52:	bf00      	nop
 8004e54:	371c      	adds	r7, #28
 8004e56:	46bd      	mov	sp, r7
 8004e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5c:	4770      	bx	lr
 8004e5e:	bf00      	nop
 8004e60:	40010000 	.word	0x40010000
 8004e64:	40010400 	.word	0x40010400

08004e68 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b087      	sub	sp, #28
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6a1b      	ldr	r3, [r3, #32]
 8004e76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6a1b      	ldr	r3, [r3, #32]
 8004e7c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	69db      	ldr	r3, [r3, #28]
 8004e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f023 0303 	bic.w	r3, r3, #3
 8004e9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	68fa      	ldr	r2, [r7, #12]
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004eb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	021b      	lsls	r3, r3, #8
 8004eb8:	697a      	ldr	r2, [r7, #20]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4a21      	ldr	r2, [pc, #132]	@ (8004f48 <TIM_OC3_SetConfig+0xe0>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d003      	beq.n	8004ece <TIM_OC3_SetConfig+0x66>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4a20      	ldr	r2, [pc, #128]	@ (8004f4c <TIM_OC3_SetConfig+0xe4>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d10d      	bne.n	8004eea <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004ed4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	68db      	ldr	r3, [r3, #12]
 8004eda:	021b      	lsls	r3, r3, #8
 8004edc:	697a      	ldr	r2, [r7, #20]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004ee8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4a16      	ldr	r2, [pc, #88]	@ (8004f48 <TIM_OC3_SetConfig+0xe0>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d003      	beq.n	8004efa <TIM_OC3_SetConfig+0x92>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4a15      	ldr	r2, [pc, #84]	@ (8004f4c <TIM_OC3_SetConfig+0xe4>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d113      	bne.n	8004f22 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004f00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004f08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	695b      	ldr	r3, [r3, #20]
 8004f0e:	011b      	lsls	r3, r3, #4
 8004f10:	693a      	ldr	r2, [r7, #16]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	699b      	ldr	r3, [r3, #24]
 8004f1a:	011b      	lsls	r3, r3, #4
 8004f1c:	693a      	ldr	r2, [r7, #16]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	693a      	ldr	r2, [r7, #16]
 8004f26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	68fa      	ldr	r2, [r7, #12]
 8004f2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	685a      	ldr	r2, [r3, #4]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	697a      	ldr	r2, [r7, #20]
 8004f3a:	621a      	str	r2, [r3, #32]
}
 8004f3c:	bf00      	nop
 8004f3e:	371c      	adds	r7, #28
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr
 8004f48:	40010000 	.word	0x40010000
 8004f4c:	40010400 	.word	0x40010400

08004f50 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b087      	sub	sp, #28
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6a1b      	ldr	r3, [r3, #32]
 8004f5e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6a1b      	ldr	r3, [r3, #32]
 8004f64:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	69db      	ldr	r3, [r3, #28]
 8004f76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	021b      	lsls	r3, r3, #8
 8004f8e:	68fa      	ldr	r2, [r7, #12]
 8004f90:	4313      	orrs	r3, r2
 8004f92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004f9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	031b      	lsls	r3, r3, #12
 8004fa2:	693a      	ldr	r2, [r7, #16]
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	4a12      	ldr	r2, [pc, #72]	@ (8004ff4 <TIM_OC4_SetConfig+0xa4>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d003      	beq.n	8004fb8 <TIM_OC4_SetConfig+0x68>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	4a11      	ldr	r2, [pc, #68]	@ (8004ff8 <TIM_OC4_SetConfig+0xa8>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d109      	bne.n	8004fcc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004fbe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	695b      	ldr	r3, [r3, #20]
 8004fc4:	019b      	lsls	r3, r3, #6
 8004fc6:	697a      	ldr	r2, [r7, #20]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	697a      	ldr	r2, [r7, #20]
 8004fd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	68fa      	ldr	r2, [r7, #12]
 8004fd6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	685a      	ldr	r2, [r3, #4]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	693a      	ldr	r2, [r7, #16]
 8004fe4:	621a      	str	r2, [r3, #32]
}
 8004fe6:	bf00      	nop
 8004fe8:	371c      	adds	r7, #28
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr
 8004ff2:	bf00      	nop
 8004ff4:	40010000 	.word	0x40010000
 8004ff8:	40010400 	.word	0x40010400

08004ffc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b087      	sub	sp, #28
 8005000:	af00      	add	r7, sp, #0
 8005002:	60f8      	str	r0, [r7, #12]
 8005004:	60b9      	str	r1, [r7, #8]
 8005006:	607a      	str	r2, [r7, #4]
 8005008:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	6a1b      	ldr	r3, [r3, #32]
 800500e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	6a1b      	ldr	r3, [r3, #32]
 8005014:	f023 0201 	bic.w	r2, r3, #1
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	699b      	ldr	r3, [r3, #24]
 8005020:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	4a28      	ldr	r2, [pc, #160]	@ (80050c8 <TIM_TI1_SetConfig+0xcc>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d01b      	beq.n	8005062 <TIM_TI1_SetConfig+0x66>
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005030:	d017      	beq.n	8005062 <TIM_TI1_SetConfig+0x66>
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	4a25      	ldr	r2, [pc, #148]	@ (80050cc <TIM_TI1_SetConfig+0xd0>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d013      	beq.n	8005062 <TIM_TI1_SetConfig+0x66>
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	4a24      	ldr	r2, [pc, #144]	@ (80050d0 <TIM_TI1_SetConfig+0xd4>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d00f      	beq.n	8005062 <TIM_TI1_SetConfig+0x66>
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	4a23      	ldr	r2, [pc, #140]	@ (80050d4 <TIM_TI1_SetConfig+0xd8>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d00b      	beq.n	8005062 <TIM_TI1_SetConfig+0x66>
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	4a22      	ldr	r2, [pc, #136]	@ (80050d8 <TIM_TI1_SetConfig+0xdc>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d007      	beq.n	8005062 <TIM_TI1_SetConfig+0x66>
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	4a21      	ldr	r2, [pc, #132]	@ (80050dc <TIM_TI1_SetConfig+0xe0>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d003      	beq.n	8005062 <TIM_TI1_SetConfig+0x66>
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	4a20      	ldr	r2, [pc, #128]	@ (80050e0 <TIM_TI1_SetConfig+0xe4>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d101      	bne.n	8005066 <TIM_TI1_SetConfig+0x6a>
 8005062:	2301      	movs	r3, #1
 8005064:	e000      	b.n	8005068 <TIM_TI1_SetConfig+0x6c>
 8005066:	2300      	movs	r3, #0
 8005068:	2b00      	cmp	r3, #0
 800506a:	d008      	beq.n	800507e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	f023 0303 	bic.w	r3, r3, #3
 8005072:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005074:	697a      	ldr	r2, [r7, #20]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	4313      	orrs	r3, r2
 800507a:	617b      	str	r3, [r7, #20]
 800507c:	e003      	b.n	8005086 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	f043 0301 	orr.w	r3, r3, #1
 8005084:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800508c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	011b      	lsls	r3, r3, #4
 8005092:	b2db      	uxtb	r3, r3
 8005094:	697a      	ldr	r2, [r7, #20]
 8005096:	4313      	orrs	r3, r2
 8005098:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	f023 030a 	bic.w	r3, r3, #10
 80050a0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	f003 030a 	and.w	r3, r3, #10
 80050a8:	693a      	ldr	r2, [r7, #16]
 80050aa:	4313      	orrs	r3, r2
 80050ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	697a      	ldr	r2, [r7, #20]
 80050b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	693a      	ldr	r2, [r7, #16]
 80050b8:	621a      	str	r2, [r3, #32]
}
 80050ba:	bf00      	nop
 80050bc:	371c      	adds	r7, #28
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr
 80050c6:	bf00      	nop
 80050c8:	40010000 	.word	0x40010000
 80050cc:	40000400 	.word	0x40000400
 80050d0:	40000800 	.word	0x40000800
 80050d4:	40000c00 	.word	0x40000c00
 80050d8:	40010400 	.word	0x40010400
 80050dc:	40014000 	.word	0x40014000
 80050e0:	40001800 	.word	0x40001800

080050e4 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b087      	sub	sp, #28
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	60f8      	str	r0, [r7, #12]
 80050ec:	60b9      	str	r1, [r7, #8]
 80050ee:	607a      	str	r2, [r7, #4]
 80050f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	6a1b      	ldr	r3, [r3, #32]
 80050f6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	6a1b      	ldr	r3, [r3, #32]
 80050fc:	f023 0210 	bic.w	r2, r3, #16
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	699b      	ldr	r3, [r3, #24]
 8005108:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005110:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	021b      	lsls	r3, r3, #8
 8005116:	693a      	ldr	r2, [r7, #16]
 8005118:	4313      	orrs	r3, r2
 800511a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005122:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	031b      	lsls	r3, r3, #12
 8005128:	b29b      	uxth	r3, r3
 800512a:	693a      	ldr	r2, [r7, #16]
 800512c:	4313      	orrs	r3, r2
 800512e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005136:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	011b      	lsls	r3, r3, #4
 800513c:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8005140:	697a      	ldr	r2, [r7, #20]
 8005142:	4313      	orrs	r3, r2
 8005144:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	693a      	ldr	r2, [r7, #16]
 800514a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	697a      	ldr	r2, [r7, #20]
 8005150:	621a      	str	r2, [r3, #32]
}
 8005152:	bf00      	nop
 8005154:	371c      	adds	r7, #28
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr

0800515e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800515e:	b480      	push	{r7}
 8005160:	b087      	sub	sp, #28
 8005162:	af00      	add	r7, sp, #0
 8005164:	60f8      	str	r0, [r7, #12]
 8005166:	60b9      	str	r1, [r7, #8]
 8005168:	607a      	str	r2, [r7, #4]
 800516a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	6a1b      	ldr	r3, [r3, #32]
 8005170:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	6a1b      	ldr	r3, [r3, #32]
 8005176:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	69db      	ldr	r3, [r3, #28]
 8005182:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	f023 0303 	bic.w	r3, r3, #3
 800518a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800518c:	693a      	ldr	r2, [r7, #16]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4313      	orrs	r3, r2
 8005192:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800519a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	011b      	lsls	r3, r3, #4
 80051a0:	b2db      	uxtb	r3, r3
 80051a2:	693a      	ldr	r2, [r7, #16]
 80051a4:	4313      	orrs	r3, r2
 80051a6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80051ae:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	021b      	lsls	r3, r3, #8
 80051b4:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80051b8:	697a      	ldr	r2, [r7, #20]
 80051ba:	4313      	orrs	r3, r2
 80051bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	693a      	ldr	r2, [r7, #16]
 80051c2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	697a      	ldr	r2, [r7, #20]
 80051c8:	621a      	str	r2, [r3, #32]
}
 80051ca:	bf00      	nop
 80051cc:	371c      	adds	r7, #28
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr

080051d6 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80051d6:	b480      	push	{r7}
 80051d8:	b087      	sub	sp, #28
 80051da:	af00      	add	r7, sp, #0
 80051dc:	60f8      	str	r0, [r7, #12]
 80051de:	60b9      	str	r1, [r7, #8]
 80051e0:	607a      	str	r2, [r7, #4]
 80051e2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6a1b      	ldr	r3, [r3, #32]
 80051e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	6a1b      	ldr	r3, [r3, #32]
 80051ee:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	69db      	ldr	r3, [r3, #28]
 80051fa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005202:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	021b      	lsls	r3, r3, #8
 8005208:	693a      	ldr	r2, [r7, #16]
 800520a:	4313      	orrs	r3, r2
 800520c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005214:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	031b      	lsls	r3, r3, #12
 800521a:	b29b      	uxth	r3, r3
 800521c:	693a      	ldr	r2, [r7, #16]
 800521e:	4313      	orrs	r3, r2
 8005220:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8005228:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	031b      	lsls	r3, r3, #12
 800522e:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8005232:	697a      	ldr	r2, [r7, #20]
 8005234:	4313      	orrs	r3, r2
 8005236:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	693a      	ldr	r2, [r7, #16]
 800523c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	697a      	ldr	r2, [r7, #20]
 8005242:	621a      	str	r2, [r3, #32]
}
 8005244:	bf00      	nop
 8005246:	371c      	adds	r7, #28
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr

08005250 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005250:	b480      	push	{r7}
 8005252:	b087      	sub	sp, #28
 8005254:	af00      	add	r7, sp, #0
 8005256:	60f8      	str	r0, [r7, #12]
 8005258:	60b9      	str	r1, [r7, #8]
 800525a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	f003 031f 	and.w	r3, r3, #31
 8005262:	2201      	movs	r2, #1
 8005264:	fa02 f303 	lsl.w	r3, r2, r3
 8005268:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	6a1a      	ldr	r2, [r3, #32]
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	43db      	mvns	r3, r3
 8005272:	401a      	ands	r2, r3
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6a1a      	ldr	r2, [r3, #32]
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	f003 031f 	and.w	r3, r3, #31
 8005282:	6879      	ldr	r1, [r7, #4]
 8005284:	fa01 f303 	lsl.w	r3, r1, r3
 8005288:	431a      	orrs	r2, r3
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	621a      	str	r2, [r3, #32]
}
 800528e:	bf00      	nop
 8005290:	371c      	adds	r7, #28
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr
	...

0800529c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800529c:	b480      	push	{r7}
 800529e:	b085      	sub	sp, #20
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d101      	bne.n	80052b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80052b0:	2302      	movs	r3, #2
 80052b2:	e05a      	b.n	800536a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2201      	movs	r2, #1
 80052b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2202      	movs	r2, #2
 80052c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	68fa      	ldr	r2, [r7, #12]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	68fa      	ldr	r2, [r7, #12]
 80052ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a21      	ldr	r2, [pc, #132]	@ (8005378 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d022      	beq.n	800533e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005300:	d01d      	beq.n	800533e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a1d      	ldr	r2, [pc, #116]	@ (800537c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d018      	beq.n	800533e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a1b      	ldr	r2, [pc, #108]	@ (8005380 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d013      	beq.n	800533e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a1a      	ldr	r2, [pc, #104]	@ (8005384 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d00e      	beq.n	800533e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a18      	ldr	r2, [pc, #96]	@ (8005388 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d009      	beq.n	800533e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a17      	ldr	r2, [pc, #92]	@ (800538c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d004      	beq.n	800533e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a15      	ldr	r2, [pc, #84]	@ (8005390 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d10c      	bne.n	8005358 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005344:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	68ba      	ldr	r2, [r7, #8]
 800534c:	4313      	orrs	r3, r2
 800534e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	68ba      	ldr	r2, [r7, #8]
 8005356:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2201      	movs	r2, #1
 800535c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005368:	2300      	movs	r3, #0
}
 800536a:	4618      	mov	r0, r3
 800536c:	3714      	adds	r7, #20
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr
 8005376:	bf00      	nop
 8005378:	40010000 	.word	0x40010000
 800537c:	40000400 	.word	0x40000400
 8005380:	40000800 	.word	0x40000800
 8005384:	40000c00 	.word	0x40000c00
 8005388:	40010400 	.word	0x40010400
 800538c:	40014000 	.word	0x40014000
 8005390:	40001800 	.word	0x40001800

08005394 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005394:	b480      	push	{r7}
 8005396:	b085      	sub	sp, #20
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800539e:	2300      	movs	r3, #0
 80053a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d101      	bne.n	80053b0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80053ac:	2302      	movs	r3, #2
 80053ae:	e03d      	b.n	800542c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	68db      	ldr	r3, [r3, #12]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	4313      	orrs	r3, r2
 80053d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	4313      	orrs	r3, r2
 80053e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4313      	orrs	r3, r2
 80053ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	691b      	ldr	r3, [r3, #16]
 80053fa:	4313      	orrs	r3, r2
 80053fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	695b      	ldr	r3, [r3, #20]
 8005408:	4313      	orrs	r3, r2
 800540a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	69db      	ldr	r3, [r3, #28]
 8005416:	4313      	orrs	r3, r2
 8005418:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	68fa      	ldr	r2, [r7, #12]
 8005420:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2200      	movs	r2, #0
 8005426:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800542a:	2300      	movs	r3, #0
}
 800542c:	4618      	mov	r0, r3
 800542e:	3714      	adds	r7, #20
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr

08005438 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005438:	b480      	push	{r7}
 800543a:	b083      	sub	sp, #12
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005440:	bf00      	nop
 8005442:	370c      	adds	r7, #12
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr

0800544c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800544c:	b480      	push	{r7}
 800544e:	b083      	sub	sp, #12
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005454:	bf00      	nop
 8005456:	370c      	adds	r7, #12
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr

08005460 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b082      	sub	sp, #8
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d101      	bne.n	8005472 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	e042      	b.n	80054f8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005478:	b2db      	uxtb	r3, r3
 800547a:	2b00      	cmp	r3, #0
 800547c:	d106      	bne.n	800548c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2200      	movs	r2, #0
 8005482:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f7fc ff7e 	bl	8002388 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2224      	movs	r2, #36	@ 0x24
 8005490:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	68da      	ldr	r2, [r3, #12]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80054a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f000 fdbd 	bl	8006024 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	691a      	ldr	r2, [r3, #16]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80054b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	695a      	ldr	r2, [r3, #20]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80054c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	68da      	ldr	r2, [r3, #12]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80054d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2200      	movs	r2, #0
 80054de:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2220      	movs	r2, #32
 80054e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2220      	movs	r2, #32
 80054ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80054f6:	2300      	movs	r3, #0
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3708      	adds	r7, #8
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}

08005500 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b08a      	sub	sp, #40	@ 0x28
 8005504:	af02      	add	r7, sp, #8
 8005506:	60f8      	str	r0, [r7, #12]
 8005508:	60b9      	str	r1, [r7, #8]
 800550a:	603b      	str	r3, [r7, #0]
 800550c:	4613      	mov	r3, r2
 800550e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005510:	2300      	movs	r3, #0
 8005512:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800551a:	b2db      	uxtb	r3, r3
 800551c:	2b20      	cmp	r3, #32
 800551e:	d175      	bne.n	800560c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d002      	beq.n	800552c <HAL_UART_Transmit+0x2c>
 8005526:	88fb      	ldrh	r3, [r7, #6]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d101      	bne.n	8005530 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	e06e      	b.n	800560e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2200      	movs	r2, #0
 8005534:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2221      	movs	r2, #33	@ 0x21
 800553a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800553e:	f7fd f91f 	bl	8002780 <HAL_GetTick>
 8005542:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	88fa      	ldrh	r2, [r7, #6]
 8005548:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	88fa      	ldrh	r2, [r7, #6]
 800554e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005558:	d108      	bne.n	800556c <HAL_UART_Transmit+0x6c>
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	691b      	ldr	r3, [r3, #16]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d104      	bne.n	800556c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005562:	2300      	movs	r3, #0
 8005564:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	61bb      	str	r3, [r7, #24]
 800556a:	e003      	b.n	8005574 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005570:	2300      	movs	r3, #0
 8005572:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005574:	e02e      	b.n	80055d4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	9300      	str	r3, [sp, #0]
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	2200      	movs	r2, #0
 800557e:	2180      	movs	r1, #128	@ 0x80
 8005580:	68f8      	ldr	r0, [r7, #12]
 8005582:	f000 fb1f 	bl	8005bc4 <UART_WaitOnFlagUntilTimeout>
 8005586:	4603      	mov	r3, r0
 8005588:	2b00      	cmp	r3, #0
 800558a:	d005      	beq.n	8005598 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2220      	movs	r2, #32
 8005590:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005594:	2303      	movs	r3, #3
 8005596:	e03a      	b.n	800560e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005598:	69fb      	ldr	r3, [r7, #28]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d10b      	bne.n	80055b6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800559e:	69bb      	ldr	r3, [r7, #24]
 80055a0:	881b      	ldrh	r3, [r3, #0]
 80055a2:	461a      	mov	r2, r3
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80055ac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80055ae:	69bb      	ldr	r3, [r7, #24]
 80055b0:	3302      	adds	r3, #2
 80055b2:	61bb      	str	r3, [r7, #24]
 80055b4:	e007      	b.n	80055c6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80055b6:	69fb      	ldr	r3, [r7, #28]
 80055b8:	781a      	ldrb	r2, [r3, #0]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80055c0:	69fb      	ldr	r3, [r7, #28]
 80055c2:	3301      	adds	r3, #1
 80055c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80055ca:	b29b      	uxth	r3, r3
 80055cc:	3b01      	subs	r3, #1
 80055ce:	b29a      	uxth	r2, r3
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80055d8:	b29b      	uxth	r3, r3
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d1cb      	bne.n	8005576 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	9300      	str	r3, [sp, #0]
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	2200      	movs	r2, #0
 80055e6:	2140      	movs	r1, #64	@ 0x40
 80055e8:	68f8      	ldr	r0, [r7, #12]
 80055ea:	f000 faeb 	bl	8005bc4 <UART_WaitOnFlagUntilTimeout>
 80055ee:	4603      	mov	r3, r0
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d005      	beq.n	8005600 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2220      	movs	r2, #32
 80055f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80055fc:	2303      	movs	r3, #3
 80055fe:	e006      	b.n	800560e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2220      	movs	r2, #32
 8005604:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005608:	2300      	movs	r3, #0
 800560a:	e000      	b.n	800560e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800560c:	2302      	movs	r3, #2
  }
}
 800560e:	4618      	mov	r0, r3
 8005610:	3720      	adds	r7, #32
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}

08005616 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005616:	b580      	push	{r7, lr}
 8005618:	b084      	sub	sp, #16
 800561a:	af00      	add	r7, sp, #0
 800561c:	60f8      	str	r0, [r7, #12]
 800561e:	60b9      	str	r1, [r7, #8]
 8005620:	4613      	mov	r3, r2
 8005622:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800562a:	b2db      	uxtb	r3, r3
 800562c:	2b20      	cmp	r3, #32
 800562e:	d112      	bne.n	8005656 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d002      	beq.n	800563c <HAL_UART_Receive_IT+0x26>
 8005636:	88fb      	ldrh	r3, [r7, #6]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d101      	bne.n	8005640 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800563c:	2301      	movs	r3, #1
 800563e:	e00b      	b.n	8005658 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2200      	movs	r2, #0
 8005644:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005646:	88fb      	ldrh	r3, [r7, #6]
 8005648:	461a      	mov	r2, r3
 800564a:	68b9      	ldr	r1, [r7, #8]
 800564c:	68f8      	ldr	r0, [r7, #12]
 800564e:	f000 fb12 	bl	8005c76 <UART_Start_Receive_IT>
 8005652:	4603      	mov	r3, r0
 8005654:	e000      	b.n	8005658 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005656:	2302      	movs	r3, #2
  }
}
 8005658:	4618      	mov	r0, r3
 800565a:	3710      	adds	r7, #16
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}

08005660 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b0ba      	sub	sp, #232	@ 0xe8
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	695b      	ldr	r3, [r3, #20]
 8005682:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005686:	2300      	movs	r3, #0
 8005688:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800568c:	2300      	movs	r3, #0
 800568e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005692:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005696:	f003 030f 	and.w	r3, r3, #15
 800569a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800569e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d10f      	bne.n	80056c6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80056a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056aa:	f003 0320 	and.w	r3, r3, #32
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d009      	beq.n	80056c6 <HAL_UART_IRQHandler+0x66>
 80056b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056b6:	f003 0320 	and.w	r3, r3, #32
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d003      	beq.n	80056c6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f000 fbf2 	bl	8005ea8 <UART_Receive_IT>
      return;
 80056c4:	e25b      	b.n	8005b7e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80056c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	f000 80de 	beq.w	800588c <HAL_UART_IRQHandler+0x22c>
 80056d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80056d4:	f003 0301 	and.w	r3, r3, #1
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d106      	bne.n	80056ea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80056dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056e0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	f000 80d1 	beq.w	800588c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80056ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056ee:	f003 0301 	and.w	r3, r3, #1
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d00b      	beq.n	800570e <HAL_UART_IRQHandler+0xae>
 80056f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d005      	beq.n	800570e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005706:	f043 0201 	orr.w	r2, r3, #1
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800570e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005712:	f003 0304 	and.w	r3, r3, #4
 8005716:	2b00      	cmp	r3, #0
 8005718:	d00b      	beq.n	8005732 <HAL_UART_IRQHandler+0xd2>
 800571a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800571e:	f003 0301 	and.w	r3, r3, #1
 8005722:	2b00      	cmp	r3, #0
 8005724:	d005      	beq.n	8005732 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800572a:	f043 0202 	orr.w	r2, r3, #2
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005732:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005736:	f003 0302 	and.w	r3, r3, #2
 800573a:	2b00      	cmp	r3, #0
 800573c:	d00b      	beq.n	8005756 <HAL_UART_IRQHandler+0xf6>
 800573e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005742:	f003 0301 	and.w	r3, r3, #1
 8005746:	2b00      	cmp	r3, #0
 8005748:	d005      	beq.n	8005756 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800574e:	f043 0204 	orr.w	r2, r3, #4
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005756:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800575a:	f003 0308 	and.w	r3, r3, #8
 800575e:	2b00      	cmp	r3, #0
 8005760:	d011      	beq.n	8005786 <HAL_UART_IRQHandler+0x126>
 8005762:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005766:	f003 0320 	and.w	r3, r3, #32
 800576a:	2b00      	cmp	r3, #0
 800576c:	d105      	bne.n	800577a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800576e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005772:	f003 0301 	and.w	r3, r3, #1
 8005776:	2b00      	cmp	r3, #0
 8005778:	d005      	beq.n	8005786 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800577e:	f043 0208 	orr.w	r2, r3, #8
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800578a:	2b00      	cmp	r3, #0
 800578c:	f000 81f2 	beq.w	8005b74 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005790:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005794:	f003 0320 	and.w	r3, r3, #32
 8005798:	2b00      	cmp	r3, #0
 800579a:	d008      	beq.n	80057ae <HAL_UART_IRQHandler+0x14e>
 800579c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057a0:	f003 0320 	and.w	r3, r3, #32
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d002      	beq.n	80057ae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f000 fb7d 	bl	8005ea8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	695b      	ldr	r3, [r3, #20]
 80057b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057b8:	2b40      	cmp	r3, #64	@ 0x40
 80057ba:	bf0c      	ite	eq
 80057bc:	2301      	moveq	r3, #1
 80057be:	2300      	movne	r3, #0
 80057c0:	b2db      	uxtb	r3, r3
 80057c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057ca:	f003 0308 	and.w	r3, r3, #8
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d103      	bne.n	80057da <HAL_UART_IRQHandler+0x17a>
 80057d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d04f      	beq.n	800587a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f000 fa85 	bl	8005cea <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	695b      	ldr	r3, [r3, #20]
 80057e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057ea:	2b40      	cmp	r3, #64	@ 0x40
 80057ec:	d141      	bne.n	8005872 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	3314      	adds	r3, #20
 80057f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80057fc:	e853 3f00 	ldrex	r3, [r3]
 8005800:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005804:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005808:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800580c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	3314      	adds	r3, #20
 8005816:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800581a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800581e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005822:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005826:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800582a:	e841 2300 	strex	r3, r2, [r1]
 800582e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005832:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005836:	2b00      	cmp	r3, #0
 8005838:	d1d9      	bne.n	80057ee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800583e:	2b00      	cmp	r3, #0
 8005840:	d013      	beq.n	800586a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005846:	4a7e      	ldr	r2, [pc, #504]	@ (8005a40 <HAL_UART_IRQHandler+0x3e0>)
 8005848:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800584e:	4618      	mov	r0, r3
 8005850:	f7fd f947 	bl	8002ae2 <HAL_DMA_Abort_IT>
 8005854:	4603      	mov	r3, r0
 8005856:	2b00      	cmp	r3, #0
 8005858:	d016      	beq.n	8005888 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800585e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005860:	687a      	ldr	r2, [r7, #4]
 8005862:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005864:	4610      	mov	r0, r2
 8005866:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005868:	e00e      	b.n	8005888 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f000 f994 	bl	8005b98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005870:	e00a      	b.n	8005888 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f000 f990 	bl	8005b98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005878:	e006      	b.n	8005888 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 f98c 	bl	8005b98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2200      	movs	r2, #0
 8005884:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005886:	e175      	b.n	8005b74 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005888:	bf00      	nop
    return;
 800588a:	e173      	b.n	8005b74 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005890:	2b01      	cmp	r3, #1
 8005892:	f040 814f 	bne.w	8005b34 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005896:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800589a:	f003 0310 	and.w	r3, r3, #16
 800589e:	2b00      	cmp	r3, #0
 80058a0:	f000 8148 	beq.w	8005b34 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80058a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058a8:	f003 0310 	and.w	r3, r3, #16
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	f000 8141 	beq.w	8005b34 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80058b2:	2300      	movs	r3, #0
 80058b4:	60bb      	str	r3, [r7, #8]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	60bb      	str	r3, [r7, #8]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	60bb      	str	r3, [r7, #8]
 80058c6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	695b      	ldr	r3, [r3, #20]
 80058ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058d2:	2b40      	cmp	r3, #64	@ 0x40
 80058d4:	f040 80b6 	bne.w	8005a44 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80058e4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	f000 8145 	beq.w	8005b78 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80058f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80058f6:	429a      	cmp	r2, r3
 80058f8:	f080 813e 	bcs.w	8005b78 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005902:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005908:	69db      	ldr	r3, [r3, #28]
 800590a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800590e:	f000 8088 	beq.w	8005a22 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	330c      	adds	r3, #12
 8005918:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800591c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005920:	e853 3f00 	ldrex	r3, [r3]
 8005924:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005928:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800592c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005930:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	330c      	adds	r3, #12
 800593a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800593e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005942:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005946:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800594a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800594e:	e841 2300 	strex	r3, r2, [r1]
 8005952:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005956:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800595a:	2b00      	cmp	r3, #0
 800595c:	d1d9      	bne.n	8005912 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	3314      	adds	r3, #20
 8005964:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005966:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005968:	e853 3f00 	ldrex	r3, [r3]
 800596c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800596e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005970:	f023 0301 	bic.w	r3, r3, #1
 8005974:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	3314      	adds	r3, #20
 800597e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005982:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005986:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005988:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800598a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800598e:	e841 2300 	strex	r3, r2, [r1]
 8005992:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005994:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005996:	2b00      	cmp	r3, #0
 8005998:	d1e1      	bne.n	800595e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	3314      	adds	r3, #20
 80059a0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80059a4:	e853 3f00 	ldrex	r3, [r3]
 80059a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80059aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80059ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80059b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	3314      	adds	r3, #20
 80059ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80059be:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80059c0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059c2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80059c4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80059c6:	e841 2300 	strex	r3, r2, [r1]
 80059ca:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80059cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d1e3      	bne.n	800599a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2220      	movs	r2, #32
 80059d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2200      	movs	r2, #0
 80059de:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	330c      	adds	r3, #12
 80059e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80059ea:	e853 3f00 	ldrex	r3, [r3]
 80059ee:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80059f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80059f2:	f023 0310 	bic.w	r3, r3, #16
 80059f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	330c      	adds	r3, #12
 8005a00:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005a04:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005a06:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a08:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005a0a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005a0c:	e841 2300 	strex	r3, r2, [r1]
 8005a10:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005a12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d1e3      	bne.n	80059e0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f7fc fff0 	bl	8002a02 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2202      	movs	r2, #2
 8005a26:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	1ad3      	subs	r3, r2, r3
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	4619      	mov	r1, r3
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f000 f8b7 	bl	8005bac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005a3e:	e09b      	b.n	8005b78 <HAL_UART_IRQHandler+0x518>
 8005a40:	08005db1 	.word	0x08005db1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	1ad3      	subs	r3, r2, r3
 8005a50:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	f000 808e 	beq.w	8005b7c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005a60:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	f000 8089 	beq.w	8005b7c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	330c      	adds	r3, #12
 8005a70:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a74:	e853 3f00 	ldrex	r3, [r3]
 8005a78:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005a7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a7c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a80:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	330c      	adds	r3, #12
 8005a8a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005a8e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005a90:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a92:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005a94:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a96:	e841 2300 	strex	r3, r2, [r1]
 8005a9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005a9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d1e3      	bne.n	8005a6a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	3314      	adds	r3, #20
 8005aa8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aac:	e853 3f00 	ldrex	r3, [r3]
 8005ab0:	623b      	str	r3, [r7, #32]
   return(result);
 8005ab2:	6a3b      	ldr	r3, [r7, #32]
 8005ab4:	f023 0301 	bic.w	r3, r3, #1
 8005ab8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	3314      	adds	r3, #20
 8005ac2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005ac6:	633a      	str	r2, [r7, #48]	@ 0x30
 8005ac8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005acc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ace:	e841 2300 	strex	r3, r2, [r1]
 8005ad2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005ad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d1e3      	bne.n	8005aa2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2220      	movs	r2, #32
 8005ade:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	330c      	adds	r3, #12
 8005aee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	e853 3f00 	ldrex	r3, [r3]
 8005af6:	60fb      	str	r3, [r7, #12]
   return(result);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f023 0310 	bic.w	r3, r3, #16
 8005afe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	330c      	adds	r3, #12
 8005b08:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005b0c:	61fa      	str	r2, [r7, #28]
 8005b0e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b10:	69b9      	ldr	r1, [r7, #24]
 8005b12:	69fa      	ldr	r2, [r7, #28]
 8005b14:	e841 2300 	strex	r3, r2, [r1]
 8005b18:	617b      	str	r3, [r7, #20]
   return(result);
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d1e3      	bne.n	8005ae8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2202      	movs	r2, #2
 8005b24:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005b26:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005b2a:	4619      	mov	r1, r3
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f000 f83d 	bl	8005bac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005b32:	e023      	b.n	8005b7c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005b34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d009      	beq.n	8005b54 <HAL_UART_IRQHandler+0x4f4>
 8005b40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d003      	beq.n	8005b54 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f000 f943 	bl	8005dd8 <UART_Transmit_IT>
    return;
 8005b52:	e014      	b.n	8005b7e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005b54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d00e      	beq.n	8005b7e <HAL_UART_IRQHandler+0x51e>
 8005b60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d008      	beq.n	8005b7e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f000 f983 	bl	8005e78 <UART_EndTransmit_IT>
    return;
 8005b72:	e004      	b.n	8005b7e <HAL_UART_IRQHandler+0x51e>
    return;
 8005b74:	bf00      	nop
 8005b76:	e002      	b.n	8005b7e <HAL_UART_IRQHandler+0x51e>
      return;
 8005b78:	bf00      	nop
 8005b7a:	e000      	b.n	8005b7e <HAL_UART_IRQHandler+0x51e>
      return;
 8005b7c:	bf00      	nop
  }
}
 8005b7e:	37e8      	adds	r7, #232	@ 0xe8
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}

08005b84 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b083      	sub	sp, #12
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005b8c:	bf00      	nop
 8005b8e:	370c      	adds	r7, #12
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr

08005b98 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b083      	sub	sp, #12
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005ba0:	bf00      	nop
 8005ba2:	370c      	adds	r7, #12
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005baa:	4770      	bx	lr

08005bac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b083      	sub	sp, #12
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	460b      	mov	r3, r1
 8005bb6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005bb8:	bf00      	nop
 8005bba:	370c      	adds	r7, #12
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr

08005bc4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b086      	sub	sp, #24
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	60f8      	str	r0, [r7, #12]
 8005bcc:	60b9      	str	r1, [r7, #8]
 8005bce:	603b      	str	r3, [r7, #0]
 8005bd0:	4613      	mov	r3, r2
 8005bd2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bd4:	e03b      	b.n	8005c4e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bd6:	6a3b      	ldr	r3, [r7, #32]
 8005bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bdc:	d037      	beq.n	8005c4e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bde:	f7fc fdcf 	bl	8002780 <HAL_GetTick>
 8005be2:	4602      	mov	r2, r0
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	1ad3      	subs	r3, r2, r3
 8005be8:	6a3a      	ldr	r2, [r7, #32]
 8005bea:	429a      	cmp	r2, r3
 8005bec:	d302      	bcc.n	8005bf4 <UART_WaitOnFlagUntilTimeout+0x30>
 8005bee:	6a3b      	ldr	r3, [r7, #32]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d101      	bne.n	8005bf8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005bf4:	2303      	movs	r3, #3
 8005bf6:	e03a      	b.n	8005c6e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	68db      	ldr	r3, [r3, #12]
 8005bfe:	f003 0304 	and.w	r3, r3, #4
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d023      	beq.n	8005c4e <UART_WaitOnFlagUntilTimeout+0x8a>
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	2b80      	cmp	r3, #128	@ 0x80
 8005c0a:	d020      	beq.n	8005c4e <UART_WaitOnFlagUntilTimeout+0x8a>
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	2b40      	cmp	r3, #64	@ 0x40
 8005c10:	d01d      	beq.n	8005c4e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f003 0308 	and.w	r3, r3, #8
 8005c1c:	2b08      	cmp	r3, #8
 8005c1e:	d116      	bne.n	8005c4e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005c20:	2300      	movs	r3, #0
 8005c22:	617b      	str	r3, [r7, #20]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	617b      	str	r3, [r7, #20]
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	617b      	str	r3, [r7, #20]
 8005c34:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c36:	68f8      	ldr	r0, [r7, #12]
 8005c38:	f000 f857 	bl	8005cea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2208      	movs	r2, #8
 8005c40:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2200      	movs	r2, #0
 8005c46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	e00f      	b.n	8005c6e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	681a      	ldr	r2, [r3, #0]
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	4013      	ands	r3, r2
 8005c58:	68ba      	ldr	r2, [r7, #8]
 8005c5a:	429a      	cmp	r2, r3
 8005c5c:	bf0c      	ite	eq
 8005c5e:	2301      	moveq	r3, #1
 8005c60:	2300      	movne	r3, #0
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	461a      	mov	r2, r3
 8005c66:	79fb      	ldrb	r3, [r7, #7]
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d0b4      	beq.n	8005bd6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c6c:	2300      	movs	r3, #0
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3718      	adds	r7, #24
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}

08005c76 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c76:	b480      	push	{r7}
 8005c78:	b085      	sub	sp, #20
 8005c7a:	af00      	add	r7, sp, #0
 8005c7c:	60f8      	str	r0, [r7, #12]
 8005c7e:	60b9      	str	r1, [r7, #8]
 8005c80:	4613      	mov	r3, r2
 8005c82:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	68ba      	ldr	r2, [r7, #8]
 8005c88:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	88fa      	ldrh	r2, [r7, #6]
 8005c8e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	88fa      	ldrh	r2, [r7, #6]
 8005c94:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2222      	movs	r2, #34	@ 0x22
 8005ca0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	691b      	ldr	r3, [r3, #16]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d007      	beq.n	8005cbc <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	68da      	ldr	r2, [r3, #12]
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005cba:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	695a      	ldr	r2, [r3, #20]
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f042 0201 	orr.w	r2, r2, #1
 8005cca:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	68da      	ldr	r2, [r3, #12]
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f042 0220 	orr.w	r2, r2, #32
 8005cda:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005cdc:	2300      	movs	r3, #0
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3714      	adds	r7, #20
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce8:	4770      	bx	lr

08005cea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005cea:	b480      	push	{r7}
 8005cec:	b095      	sub	sp, #84	@ 0x54
 8005cee:	af00      	add	r7, sp, #0
 8005cf0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	330c      	adds	r3, #12
 8005cf8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cfc:	e853 3f00 	ldrex	r3, [r3]
 8005d00:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d04:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d08:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	330c      	adds	r3, #12
 8005d10:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005d12:	643a      	str	r2, [r7, #64]	@ 0x40
 8005d14:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d16:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005d18:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005d1a:	e841 2300 	strex	r3, r2, [r1]
 8005d1e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005d20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d1e5      	bne.n	8005cf2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	3314      	adds	r3, #20
 8005d2c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d2e:	6a3b      	ldr	r3, [r7, #32]
 8005d30:	e853 3f00 	ldrex	r3, [r3]
 8005d34:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d36:	69fb      	ldr	r3, [r7, #28]
 8005d38:	f023 0301 	bic.w	r3, r3, #1
 8005d3c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	3314      	adds	r3, #20
 8005d44:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005d46:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005d48:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d4a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005d4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d4e:	e841 2300 	strex	r3, r2, [r1]
 8005d52:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d1e5      	bne.n	8005d26 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d5e:	2b01      	cmp	r3, #1
 8005d60:	d119      	bne.n	8005d96 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	330c      	adds	r3, #12
 8005d68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	e853 3f00 	ldrex	r3, [r3]
 8005d70:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	f023 0310 	bic.w	r3, r3, #16
 8005d78:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	330c      	adds	r3, #12
 8005d80:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d82:	61ba      	str	r2, [r7, #24]
 8005d84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d86:	6979      	ldr	r1, [r7, #20]
 8005d88:	69ba      	ldr	r2, [r7, #24]
 8005d8a:	e841 2300 	strex	r3, r2, [r1]
 8005d8e:	613b      	str	r3, [r7, #16]
   return(result);
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d1e5      	bne.n	8005d62 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2220      	movs	r2, #32
 8005d9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2200      	movs	r2, #0
 8005da2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005da4:	bf00      	nop
 8005da6:	3754      	adds	r7, #84	@ 0x54
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr

08005db0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b084      	sub	sp, #16
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dbc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005dca:	68f8      	ldr	r0, [r7, #12]
 8005dcc:	f7ff fee4 	bl	8005b98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005dd0:	bf00      	nop
 8005dd2:	3710      	adds	r7, #16
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}

08005dd8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b085      	sub	sp, #20
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005de6:	b2db      	uxtb	r3, r3
 8005de8:	2b21      	cmp	r3, #33	@ 0x21
 8005dea:	d13e      	bne.n	8005e6a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005df4:	d114      	bne.n	8005e20 <UART_Transmit_IT+0x48>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	691b      	ldr	r3, [r3, #16]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d110      	bne.n	8005e20 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6a1b      	ldr	r3, [r3, #32]
 8005e02:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	881b      	ldrh	r3, [r3, #0]
 8005e08:	461a      	mov	r2, r3
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e12:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6a1b      	ldr	r3, [r3, #32]
 8005e18:	1c9a      	adds	r2, r3, #2
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	621a      	str	r2, [r3, #32]
 8005e1e:	e008      	b.n	8005e32 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6a1b      	ldr	r3, [r3, #32]
 8005e24:	1c59      	adds	r1, r3, #1
 8005e26:	687a      	ldr	r2, [r7, #4]
 8005e28:	6211      	str	r1, [r2, #32]
 8005e2a:	781a      	ldrb	r2, [r3, #0]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005e36:	b29b      	uxth	r3, r3
 8005e38:	3b01      	subs	r3, #1
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	4619      	mov	r1, r3
 8005e40:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d10f      	bne.n	8005e66 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	68da      	ldr	r2, [r3, #12]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005e54:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	68da      	ldr	r2, [r3, #12]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005e64:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005e66:	2300      	movs	r3, #0
 8005e68:	e000      	b.n	8005e6c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005e6a:	2302      	movs	r3, #2
  }
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	3714      	adds	r7, #20
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr

08005e78 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b082      	sub	sp, #8
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	68da      	ldr	r2, [r3, #12]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005e8e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2220      	movs	r2, #32
 8005e94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f7ff fe73 	bl	8005b84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005e9e:	2300      	movs	r3, #0
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	3708      	adds	r7, #8
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}

08005ea8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b08c      	sub	sp, #48	@ 0x30
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005eb6:	b2db      	uxtb	r3, r3
 8005eb8:	2b22      	cmp	r3, #34	@ 0x22
 8005eba:	f040 80ae 	bne.w	800601a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ec6:	d117      	bne.n	8005ef8 <UART_Receive_IT+0x50>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	691b      	ldr	r3, [r3, #16]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d113      	bne.n	8005ef8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ed8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	b29b      	uxth	r3, r3
 8005ee2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ee6:	b29a      	uxth	r2, r3
 8005ee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eea:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ef0:	1c9a      	adds	r2, r3, #2
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	629a      	str	r2, [r3, #40]	@ 0x28
 8005ef6:	e026      	b.n	8005f46 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005efc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005efe:	2300      	movs	r3, #0
 8005f00:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f0a:	d007      	beq.n	8005f1c <UART_Receive_IT+0x74>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d10a      	bne.n	8005f2a <UART_Receive_IT+0x82>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	691b      	ldr	r3, [r3, #16]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d106      	bne.n	8005f2a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	b2da      	uxtb	r2, r3
 8005f24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f26:	701a      	strb	r2, [r3, #0]
 8005f28:	e008      	b.n	8005f3c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	b2db      	uxtb	r3, r3
 8005f32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f36:	b2da      	uxtb	r2, r3
 8005f38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f3a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f40:	1c5a      	adds	r2, r3, #1
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	3b01      	subs	r3, #1
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	687a      	ldr	r2, [r7, #4]
 8005f52:	4619      	mov	r1, r3
 8005f54:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d15d      	bne.n	8006016 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	68da      	ldr	r2, [r3, #12]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f022 0220 	bic.w	r2, r2, #32
 8005f68:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	68da      	ldr	r2, [r3, #12]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005f78:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	695a      	ldr	r2, [r3, #20]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f022 0201 	bic.w	r2, r2, #1
 8005f88:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2220      	movs	r2, #32
 8005f8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2200      	movs	r2, #0
 8005f96:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f9c:	2b01      	cmp	r3, #1
 8005f9e:	d135      	bne.n	800600c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	330c      	adds	r3, #12
 8005fac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	e853 3f00 	ldrex	r3, [r3]
 8005fb4:	613b      	str	r3, [r7, #16]
   return(result);
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	f023 0310 	bic.w	r3, r3, #16
 8005fbc:	627b      	str	r3, [r7, #36]	@ 0x24
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	330c      	adds	r3, #12
 8005fc4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fc6:	623a      	str	r2, [r7, #32]
 8005fc8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fca:	69f9      	ldr	r1, [r7, #28]
 8005fcc:	6a3a      	ldr	r2, [r7, #32]
 8005fce:	e841 2300 	strex	r3, r2, [r1]
 8005fd2:	61bb      	str	r3, [r7, #24]
   return(result);
 8005fd4:	69bb      	ldr	r3, [r7, #24]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d1e5      	bne.n	8005fa6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f003 0310 	and.w	r3, r3, #16
 8005fe4:	2b10      	cmp	r3, #16
 8005fe6:	d10a      	bne.n	8005ffe <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005fe8:	2300      	movs	r3, #0
 8005fea:	60fb      	str	r3, [r7, #12]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	60fb      	str	r3, [r7, #12]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	60fb      	str	r3, [r7, #12]
 8005ffc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006002:	4619      	mov	r1, r3
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f7ff fdd1 	bl	8005bac <HAL_UARTEx_RxEventCallback>
 800600a:	e002      	b.n	8006012 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f7fb f8ad 	bl	800116c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006012:	2300      	movs	r3, #0
 8006014:	e002      	b.n	800601c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006016:	2300      	movs	r3, #0
 8006018:	e000      	b.n	800601c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800601a:	2302      	movs	r3, #2
  }
}
 800601c:	4618      	mov	r0, r3
 800601e:	3730      	adds	r7, #48	@ 0x30
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}

08006024 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006024:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006028:	b0c0      	sub	sp, #256	@ 0x100
 800602a:	af00      	add	r7, sp, #0
 800602c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	691b      	ldr	r3, [r3, #16]
 8006038:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800603c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006040:	68d9      	ldr	r1, [r3, #12]
 8006042:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006046:	681a      	ldr	r2, [r3, #0]
 8006048:	ea40 0301 	orr.w	r3, r0, r1
 800604c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800604e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006052:	689a      	ldr	r2, [r3, #8]
 8006054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006058:	691b      	ldr	r3, [r3, #16]
 800605a:	431a      	orrs	r2, r3
 800605c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006060:	695b      	ldr	r3, [r3, #20]
 8006062:	431a      	orrs	r2, r3
 8006064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006068:	69db      	ldr	r3, [r3, #28]
 800606a:	4313      	orrs	r3, r2
 800606c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	68db      	ldr	r3, [r3, #12]
 8006078:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800607c:	f021 010c 	bic.w	r1, r1, #12
 8006080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006084:	681a      	ldr	r2, [r3, #0]
 8006086:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800608a:	430b      	orrs	r3, r1
 800608c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800608e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	695b      	ldr	r3, [r3, #20]
 8006096:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800609a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800609e:	6999      	ldr	r1, [r3, #24]
 80060a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060a4:	681a      	ldr	r2, [r3, #0]
 80060a6:	ea40 0301 	orr.w	r3, r0, r1
 80060aa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80060ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060b0:	681a      	ldr	r2, [r3, #0]
 80060b2:	4b8f      	ldr	r3, [pc, #572]	@ (80062f0 <UART_SetConfig+0x2cc>)
 80060b4:	429a      	cmp	r2, r3
 80060b6:	d005      	beq.n	80060c4 <UART_SetConfig+0xa0>
 80060b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060bc:	681a      	ldr	r2, [r3, #0]
 80060be:	4b8d      	ldr	r3, [pc, #564]	@ (80062f4 <UART_SetConfig+0x2d0>)
 80060c0:	429a      	cmp	r2, r3
 80060c2:	d104      	bne.n	80060ce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80060c4:	f7fc fffc 	bl	80030c0 <HAL_RCC_GetPCLK2Freq>
 80060c8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80060cc:	e003      	b.n	80060d6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80060ce:	f7fc ffe3 	bl	8003098 <HAL_RCC_GetPCLK1Freq>
 80060d2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060da:	69db      	ldr	r3, [r3, #28]
 80060dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80060e0:	f040 810c 	bne.w	80062fc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80060e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80060e8:	2200      	movs	r2, #0
 80060ea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80060ee:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80060f2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80060f6:	4622      	mov	r2, r4
 80060f8:	462b      	mov	r3, r5
 80060fa:	1891      	adds	r1, r2, r2
 80060fc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80060fe:	415b      	adcs	r3, r3
 8006100:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006102:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006106:	4621      	mov	r1, r4
 8006108:	eb12 0801 	adds.w	r8, r2, r1
 800610c:	4629      	mov	r1, r5
 800610e:	eb43 0901 	adc.w	r9, r3, r1
 8006112:	f04f 0200 	mov.w	r2, #0
 8006116:	f04f 0300 	mov.w	r3, #0
 800611a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800611e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006122:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006126:	4690      	mov	r8, r2
 8006128:	4699      	mov	r9, r3
 800612a:	4623      	mov	r3, r4
 800612c:	eb18 0303 	adds.w	r3, r8, r3
 8006130:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006134:	462b      	mov	r3, r5
 8006136:	eb49 0303 	adc.w	r3, r9, r3
 800613a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800613e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	2200      	movs	r2, #0
 8006146:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800614a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800614e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006152:	460b      	mov	r3, r1
 8006154:	18db      	adds	r3, r3, r3
 8006156:	653b      	str	r3, [r7, #80]	@ 0x50
 8006158:	4613      	mov	r3, r2
 800615a:	eb42 0303 	adc.w	r3, r2, r3
 800615e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006160:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006164:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006168:	f7fa fd4e 	bl	8000c08 <__aeabi_uldivmod>
 800616c:	4602      	mov	r2, r0
 800616e:	460b      	mov	r3, r1
 8006170:	4b61      	ldr	r3, [pc, #388]	@ (80062f8 <UART_SetConfig+0x2d4>)
 8006172:	fba3 2302 	umull	r2, r3, r3, r2
 8006176:	095b      	lsrs	r3, r3, #5
 8006178:	011c      	lsls	r4, r3, #4
 800617a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800617e:	2200      	movs	r2, #0
 8006180:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006184:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006188:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800618c:	4642      	mov	r2, r8
 800618e:	464b      	mov	r3, r9
 8006190:	1891      	adds	r1, r2, r2
 8006192:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006194:	415b      	adcs	r3, r3
 8006196:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006198:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800619c:	4641      	mov	r1, r8
 800619e:	eb12 0a01 	adds.w	sl, r2, r1
 80061a2:	4649      	mov	r1, r9
 80061a4:	eb43 0b01 	adc.w	fp, r3, r1
 80061a8:	f04f 0200 	mov.w	r2, #0
 80061ac:	f04f 0300 	mov.w	r3, #0
 80061b0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80061b4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80061b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80061bc:	4692      	mov	sl, r2
 80061be:	469b      	mov	fp, r3
 80061c0:	4643      	mov	r3, r8
 80061c2:	eb1a 0303 	adds.w	r3, sl, r3
 80061c6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80061ca:	464b      	mov	r3, r9
 80061cc:	eb4b 0303 	adc.w	r3, fp, r3
 80061d0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80061d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	2200      	movs	r2, #0
 80061dc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80061e0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80061e4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80061e8:	460b      	mov	r3, r1
 80061ea:	18db      	adds	r3, r3, r3
 80061ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80061ee:	4613      	mov	r3, r2
 80061f0:	eb42 0303 	adc.w	r3, r2, r3
 80061f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80061f6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80061fa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80061fe:	f7fa fd03 	bl	8000c08 <__aeabi_uldivmod>
 8006202:	4602      	mov	r2, r0
 8006204:	460b      	mov	r3, r1
 8006206:	4611      	mov	r1, r2
 8006208:	4b3b      	ldr	r3, [pc, #236]	@ (80062f8 <UART_SetConfig+0x2d4>)
 800620a:	fba3 2301 	umull	r2, r3, r3, r1
 800620e:	095b      	lsrs	r3, r3, #5
 8006210:	2264      	movs	r2, #100	@ 0x64
 8006212:	fb02 f303 	mul.w	r3, r2, r3
 8006216:	1acb      	subs	r3, r1, r3
 8006218:	00db      	lsls	r3, r3, #3
 800621a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800621e:	4b36      	ldr	r3, [pc, #216]	@ (80062f8 <UART_SetConfig+0x2d4>)
 8006220:	fba3 2302 	umull	r2, r3, r3, r2
 8006224:	095b      	lsrs	r3, r3, #5
 8006226:	005b      	lsls	r3, r3, #1
 8006228:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800622c:	441c      	add	r4, r3
 800622e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006232:	2200      	movs	r2, #0
 8006234:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006238:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800623c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006240:	4642      	mov	r2, r8
 8006242:	464b      	mov	r3, r9
 8006244:	1891      	adds	r1, r2, r2
 8006246:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006248:	415b      	adcs	r3, r3
 800624a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800624c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006250:	4641      	mov	r1, r8
 8006252:	1851      	adds	r1, r2, r1
 8006254:	6339      	str	r1, [r7, #48]	@ 0x30
 8006256:	4649      	mov	r1, r9
 8006258:	414b      	adcs	r3, r1
 800625a:	637b      	str	r3, [r7, #52]	@ 0x34
 800625c:	f04f 0200 	mov.w	r2, #0
 8006260:	f04f 0300 	mov.w	r3, #0
 8006264:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006268:	4659      	mov	r1, fp
 800626a:	00cb      	lsls	r3, r1, #3
 800626c:	4651      	mov	r1, sl
 800626e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006272:	4651      	mov	r1, sl
 8006274:	00ca      	lsls	r2, r1, #3
 8006276:	4610      	mov	r0, r2
 8006278:	4619      	mov	r1, r3
 800627a:	4603      	mov	r3, r0
 800627c:	4642      	mov	r2, r8
 800627e:	189b      	adds	r3, r3, r2
 8006280:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006284:	464b      	mov	r3, r9
 8006286:	460a      	mov	r2, r1
 8006288:	eb42 0303 	adc.w	r3, r2, r3
 800628c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	2200      	movs	r2, #0
 8006298:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800629c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80062a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80062a4:	460b      	mov	r3, r1
 80062a6:	18db      	adds	r3, r3, r3
 80062a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80062aa:	4613      	mov	r3, r2
 80062ac:	eb42 0303 	adc.w	r3, r2, r3
 80062b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80062b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80062b6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80062ba:	f7fa fca5 	bl	8000c08 <__aeabi_uldivmod>
 80062be:	4602      	mov	r2, r0
 80062c0:	460b      	mov	r3, r1
 80062c2:	4b0d      	ldr	r3, [pc, #52]	@ (80062f8 <UART_SetConfig+0x2d4>)
 80062c4:	fba3 1302 	umull	r1, r3, r3, r2
 80062c8:	095b      	lsrs	r3, r3, #5
 80062ca:	2164      	movs	r1, #100	@ 0x64
 80062cc:	fb01 f303 	mul.w	r3, r1, r3
 80062d0:	1ad3      	subs	r3, r2, r3
 80062d2:	00db      	lsls	r3, r3, #3
 80062d4:	3332      	adds	r3, #50	@ 0x32
 80062d6:	4a08      	ldr	r2, [pc, #32]	@ (80062f8 <UART_SetConfig+0x2d4>)
 80062d8:	fba2 2303 	umull	r2, r3, r2, r3
 80062dc:	095b      	lsrs	r3, r3, #5
 80062de:	f003 0207 	and.w	r2, r3, #7
 80062e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4422      	add	r2, r4
 80062ea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80062ec:	e106      	b.n	80064fc <UART_SetConfig+0x4d8>
 80062ee:	bf00      	nop
 80062f0:	40011000 	.word	0x40011000
 80062f4:	40011400 	.word	0x40011400
 80062f8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80062fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006300:	2200      	movs	r2, #0
 8006302:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006306:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800630a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800630e:	4642      	mov	r2, r8
 8006310:	464b      	mov	r3, r9
 8006312:	1891      	adds	r1, r2, r2
 8006314:	6239      	str	r1, [r7, #32]
 8006316:	415b      	adcs	r3, r3
 8006318:	627b      	str	r3, [r7, #36]	@ 0x24
 800631a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800631e:	4641      	mov	r1, r8
 8006320:	1854      	adds	r4, r2, r1
 8006322:	4649      	mov	r1, r9
 8006324:	eb43 0501 	adc.w	r5, r3, r1
 8006328:	f04f 0200 	mov.w	r2, #0
 800632c:	f04f 0300 	mov.w	r3, #0
 8006330:	00eb      	lsls	r3, r5, #3
 8006332:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006336:	00e2      	lsls	r2, r4, #3
 8006338:	4614      	mov	r4, r2
 800633a:	461d      	mov	r5, r3
 800633c:	4643      	mov	r3, r8
 800633e:	18e3      	adds	r3, r4, r3
 8006340:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006344:	464b      	mov	r3, r9
 8006346:	eb45 0303 	adc.w	r3, r5, r3
 800634a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800634e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	2200      	movs	r2, #0
 8006356:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800635a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800635e:	f04f 0200 	mov.w	r2, #0
 8006362:	f04f 0300 	mov.w	r3, #0
 8006366:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800636a:	4629      	mov	r1, r5
 800636c:	008b      	lsls	r3, r1, #2
 800636e:	4621      	mov	r1, r4
 8006370:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006374:	4621      	mov	r1, r4
 8006376:	008a      	lsls	r2, r1, #2
 8006378:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800637c:	f7fa fc44 	bl	8000c08 <__aeabi_uldivmod>
 8006380:	4602      	mov	r2, r0
 8006382:	460b      	mov	r3, r1
 8006384:	4b60      	ldr	r3, [pc, #384]	@ (8006508 <UART_SetConfig+0x4e4>)
 8006386:	fba3 2302 	umull	r2, r3, r3, r2
 800638a:	095b      	lsrs	r3, r3, #5
 800638c:	011c      	lsls	r4, r3, #4
 800638e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006392:	2200      	movs	r2, #0
 8006394:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006398:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800639c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80063a0:	4642      	mov	r2, r8
 80063a2:	464b      	mov	r3, r9
 80063a4:	1891      	adds	r1, r2, r2
 80063a6:	61b9      	str	r1, [r7, #24]
 80063a8:	415b      	adcs	r3, r3
 80063aa:	61fb      	str	r3, [r7, #28]
 80063ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80063b0:	4641      	mov	r1, r8
 80063b2:	1851      	adds	r1, r2, r1
 80063b4:	6139      	str	r1, [r7, #16]
 80063b6:	4649      	mov	r1, r9
 80063b8:	414b      	adcs	r3, r1
 80063ba:	617b      	str	r3, [r7, #20]
 80063bc:	f04f 0200 	mov.w	r2, #0
 80063c0:	f04f 0300 	mov.w	r3, #0
 80063c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80063c8:	4659      	mov	r1, fp
 80063ca:	00cb      	lsls	r3, r1, #3
 80063cc:	4651      	mov	r1, sl
 80063ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80063d2:	4651      	mov	r1, sl
 80063d4:	00ca      	lsls	r2, r1, #3
 80063d6:	4610      	mov	r0, r2
 80063d8:	4619      	mov	r1, r3
 80063da:	4603      	mov	r3, r0
 80063dc:	4642      	mov	r2, r8
 80063de:	189b      	adds	r3, r3, r2
 80063e0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80063e4:	464b      	mov	r3, r9
 80063e6:	460a      	mov	r2, r1
 80063e8:	eb42 0303 	adc.w	r3, r2, r3
 80063ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80063f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	2200      	movs	r2, #0
 80063f8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80063fa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80063fc:	f04f 0200 	mov.w	r2, #0
 8006400:	f04f 0300 	mov.w	r3, #0
 8006404:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006408:	4649      	mov	r1, r9
 800640a:	008b      	lsls	r3, r1, #2
 800640c:	4641      	mov	r1, r8
 800640e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006412:	4641      	mov	r1, r8
 8006414:	008a      	lsls	r2, r1, #2
 8006416:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800641a:	f7fa fbf5 	bl	8000c08 <__aeabi_uldivmod>
 800641e:	4602      	mov	r2, r0
 8006420:	460b      	mov	r3, r1
 8006422:	4611      	mov	r1, r2
 8006424:	4b38      	ldr	r3, [pc, #224]	@ (8006508 <UART_SetConfig+0x4e4>)
 8006426:	fba3 2301 	umull	r2, r3, r3, r1
 800642a:	095b      	lsrs	r3, r3, #5
 800642c:	2264      	movs	r2, #100	@ 0x64
 800642e:	fb02 f303 	mul.w	r3, r2, r3
 8006432:	1acb      	subs	r3, r1, r3
 8006434:	011b      	lsls	r3, r3, #4
 8006436:	3332      	adds	r3, #50	@ 0x32
 8006438:	4a33      	ldr	r2, [pc, #204]	@ (8006508 <UART_SetConfig+0x4e4>)
 800643a:	fba2 2303 	umull	r2, r3, r2, r3
 800643e:	095b      	lsrs	r3, r3, #5
 8006440:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006444:	441c      	add	r4, r3
 8006446:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800644a:	2200      	movs	r2, #0
 800644c:	673b      	str	r3, [r7, #112]	@ 0x70
 800644e:	677a      	str	r2, [r7, #116]	@ 0x74
 8006450:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006454:	4642      	mov	r2, r8
 8006456:	464b      	mov	r3, r9
 8006458:	1891      	adds	r1, r2, r2
 800645a:	60b9      	str	r1, [r7, #8]
 800645c:	415b      	adcs	r3, r3
 800645e:	60fb      	str	r3, [r7, #12]
 8006460:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006464:	4641      	mov	r1, r8
 8006466:	1851      	adds	r1, r2, r1
 8006468:	6039      	str	r1, [r7, #0]
 800646a:	4649      	mov	r1, r9
 800646c:	414b      	adcs	r3, r1
 800646e:	607b      	str	r3, [r7, #4]
 8006470:	f04f 0200 	mov.w	r2, #0
 8006474:	f04f 0300 	mov.w	r3, #0
 8006478:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800647c:	4659      	mov	r1, fp
 800647e:	00cb      	lsls	r3, r1, #3
 8006480:	4651      	mov	r1, sl
 8006482:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006486:	4651      	mov	r1, sl
 8006488:	00ca      	lsls	r2, r1, #3
 800648a:	4610      	mov	r0, r2
 800648c:	4619      	mov	r1, r3
 800648e:	4603      	mov	r3, r0
 8006490:	4642      	mov	r2, r8
 8006492:	189b      	adds	r3, r3, r2
 8006494:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006496:	464b      	mov	r3, r9
 8006498:	460a      	mov	r2, r1
 800649a:	eb42 0303 	adc.w	r3, r2, r3
 800649e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80064a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	2200      	movs	r2, #0
 80064a8:	663b      	str	r3, [r7, #96]	@ 0x60
 80064aa:	667a      	str	r2, [r7, #100]	@ 0x64
 80064ac:	f04f 0200 	mov.w	r2, #0
 80064b0:	f04f 0300 	mov.w	r3, #0
 80064b4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80064b8:	4649      	mov	r1, r9
 80064ba:	008b      	lsls	r3, r1, #2
 80064bc:	4641      	mov	r1, r8
 80064be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80064c2:	4641      	mov	r1, r8
 80064c4:	008a      	lsls	r2, r1, #2
 80064c6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80064ca:	f7fa fb9d 	bl	8000c08 <__aeabi_uldivmod>
 80064ce:	4602      	mov	r2, r0
 80064d0:	460b      	mov	r3, r1
 80064d2:	4b0d      	ldr	r3, [pc, #52]	@ (8006508 <UART_SetConfig+0x4e4>)
 80064d4:	fba3 1302 	umull	r1, r3, r3, r2
 80064d8:	095b      	lsrs	r3, r3, #5
 80064da:	2164      	movs	r1, #100	@ 0x64
 80064dc:	fb01 f303 	mul.w	r3, r1, r3
 80064e0:	1ad3      	subs	r3, r2, r3
 80064e2:	011b      	lsls	r3, r3, #4
 80064e4:	3332      	adds	r3, #50	@ 0x32
 80064e6:	4a08      	ldr	r2, [pc, #32]	@ (8006508 <UART_SetConfig+0x4e4>)
 80064e8:	fba2 2303 	umull	r2, r3, r2, r3
 80064ec:	095b      	lsrs	r3, r3, #5
 80064ee:	f003 020f 	and.w	r2, r3, #15
 80064f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4422      	add	r2, r4
 80064fa:	609a      	str	r2, [r3, #8]
}
 80064fc:	bf00      	nop
 80064fe:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006502:	46bd      	mov	sp, r7
 8006504:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006508:	51eb851f 	.word	0x51eb851f

0800650c <__cvt>:
 800650c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006510:	ec57 6b10 	vmov	r6, r7, d0
 8006514:	2f00      	cmp	r7, #0
 8006516:	460c      	mov	r4, r1
 8006518:	4619      	mov	r1, r3
 800651a:	463b      	mov	r3, r7
 800651c:	bfbb      	ittet	lt
 800651e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006522:	461f      	movlt	r7, r3
 8006524:	2300      	movge	r3, #0
 8006526:	232d      	movlt	r3, #45	@ 0x2d
 8006528:	700b      	strb	r3, [r1, #0]
 800652a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800652c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006530:	4691      	mov	r9, r2
 8006532:	f023 0820 	bic.w	r8, r3, #32
 8006536:	bfbc      	itt	lt
 8006538:	4632      	movlt	r2, r6
 800653a:	4616      	movlt	r6, r2
 800653c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006540:	d005      	beq.n	800654e <__cvt+0x42>
 8006542:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006546:	d100      	bne.n	800654a <__cvt+0x3e>
 8006548:	3401      	adds	r4, #1
 800654a:	2102      	movs	r1, #2
 800654c:	e000      	b.n	8006550 <__cvt+0x44>
 800654e:	2103      	movs	r1, #3
 8006550:	ab03      	add	r3, sp, #12
 8006552:	9301      	str	r3, [sp, #4]
 8006554:	ab02      	add	r3, sp, #8
 8006556:	9300      	str	r3, [sp, #0]
 8006558:	ec47 6b10 	vmov	d0, r6, r7
 800655c:	4653      	mov	r3, sl
 800655e:	4622      	mov	r2, r4
 8006560:	f000 fe5a 	bl	8007218 <_dtoa_r>
 8006564:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006568:	4605      	mov	r5, r0
 800656a:	d119      	bne.n	80065a0 <__cvt+0x94>
 800656c:	f019 0f01 	tst.w	r9, #1
 8006570:	d00e      	beq.n	8006590 <__cvt+0x84>
 8006572:	eb00 0904 	add.w	r9, r0, r4
 8006576:	2200      	movs	r2, #0
 8006578:	2300      	movs	r3, #0
 800657a:	4630      	mov	r0, r6
 800657c:	4639      	mov	r1, r7
 800657e:	f7fa fad3 	bl	8000b28 <__aeabi_dcmpeq>
 8006582:	b108      	cbz	r0, 8006588 <__cvt+0x7c>
 8006584:	f8cd 900c 	str.w	r9, [sp, #12]
 8006588:	2230      	movs	r2, #48	@ 0x30
 800658a:	9b03      	ldr	r3, [sp, #12]
 800658c:	454b      	cmp	r3, r9
 800658e:	d31e      	bcc.n	80065ce <__cvt+0xc2>
 8006590:	9b03      	ldr	r3, [sp, #12]
 8006592:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006594:	1b5b      	subs	r3, r3, r5
 8006596:	4628      	mov	r0, r5
 8006598:	6013      	str	r3, [r2, #0]
 800659a:	b004      	add	sp, #16
 800659c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065a0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80065a4:	eb00 0904 	add.w	r9, r0, r4
 80065a8:	d1e5      	bne.n	8006576 <__cvt+0x6a>
 80065aa:	7803      	ldrb	r3, [r0, #0]
 80065ac:	2b30      	cmp	r3, #48	@ 0x30
 80065ae:	d10a      	bne.n	80065c6 <__cvt+0xba>
 80065b0:	2200      	movs	r2, #0
 80065b2:	2300      	movs	r3, #0
 80065b4:	4630      	mov	r0, r6
 80065b6:	4639      	mov	r1, r7
 80065b8:	f7fa fab6 	bl	8000b28 <__aeabi_dcmpeq>
 80065bc:	b918      	cbnz	r0, 80065c6 <__cvt+0xba>
 80065be:	f1c4 0401 	rsb	r4, r4, #1
 80065c2:	f8ca 4000 	str.w	r4, [sl]
 80065c6:	f8da 3000 	ldr.w	r3, [sl]
 80065ca:	4499      	add	r9, r3
 80065cc:	e7d3      	b.n	8006576 <__cvt+0x6a>
 80065ce:	1c59      	adds	r1, r3, #1
 80065d0:	9103      	str	r1, [sp, #12]
 80065d2:	701a      	strb	r2, [r3, #0]
 80065d4:	e7d9      	b.n	800658a <__cvt+0x7e>

080065d6 <__exponent>:
 80065d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80065d8:	2900      	cmp	r1, #0
 80065da:	bfba      	itte	lt
 80065dc:	4249      	neglt	r1, r1
 80065de:	232d      	movlt	r3, #45	@ 0x2d
 80065e0:	232b      	movge	r3, #43	@ 0x2b
 80065e2:	2909      	cmp	r1, #9
 80065e4:	7002      	strb	r2, [r0, #0]
 80065e6:	7043      	strb	r3, [r0, #1]
 80065e8:	dd29      	ble.n	800663e <__exponent+0x68>
 80065ea:	f10d 0307 	add.w	r3, sp, #7
 80065ee:	461d      	mov	r5, r3
 80065f0:	270a      	movs	r7, #10
 80065f2:	461a      	mov	r2, r3
 80065f4:	fbb1 f6f7 	udiv	r6, r1, r7
 80065f8:	fb07 1416 	mls	r4, r7, r6, r1
 80065fc:	3430      	adds	r4, #48	@ 0x30
 80065fe:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006602:	460c      	mov	r4, r1
 8006604:	2c63      	cmp	r4, #99	@ 0x63
 8006606:	f103 33ff 	add.w	r3, r3, #4294967295
 800660a:	4631      	mov	r1, r6
 800660c:	dcf1      	bgt.n	80065f2 <__exponent+0x1c>
 800660e:	3130      	adds	r1, #48	@ 0x30
 8006610:	1e94      	subs	r4, r2, #2
 8006612:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006616:	1c41      	adds	r1, r0, #1
 8006618:	4623      	mov	r3, r4
 800661a:	42ab      	cmp	r3, r5
 800661c:	d30a      	bcc.n	8006634 <__exponent+0x5e>
 800661e:	f10d 0309 	add.w	r3, sp, #9
 8006622:	1a9b      	subs	r3, r3, r2
 8006624:	42ac      	cmp	r4, r5
 8006626:	bf88      	it	hi
 8006628:	2300      	movhi	r3, #0
 800662a:	3302      	adds	r3, #2
 800662c:	4403      	add	r3, r0
 800662e:	1a18      	subs	r0, r3, r0
 8006630:	b003      	add	sp, #12
 8006632:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006634:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006638:	f801 6f01 	strb.w	r6, [r1, #1]!
 800663c:	e7ed      	b.n	800661a <__exponent+0x44>
 800663e:	2330      	movs	r3, #48	@ 0x30
 8006640:	3130      	adds	r1, #48	@ 0x30
 8006642:	7083      	strb	r3, [r0, #2]
 8006644:	70c1      	strb	r1, [r0, #3]
 8006646:	1d03      	adds	r3, r0, #4
 8006648:	e7f1      	b.n	800662e <__exponent+0x58>
	...

0800664c <_printf_float>:
 800664c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006650:	b08d      	sub	sp, #52	@ 0x34
 8006652:	460c      	mov	r4, r1
 8006654:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006658:	4616      	mov	r6, r2
 800665a:	461f      	mov	r7, r3
 800665c:	4605      	mov	r5, r0
 800665e:	f000 fcdb 	bl	8007018 <_localeconv_r>
 8006662:	6803      	ldr	r3, [r0, #0]
 8006664:	9304      	str	r3, [sp, #16]
 8006666:	4618      	mov	r0, r3
 8006668:	f7f9 fe32 	bl	80002d0 <strlen>
 800666c:	2300      	movs	r3, #0
 800666e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006670:	f8d8 3000 	ldr.w	r3, [r8]
 8006674:	9005      	str	r0, [sp, #20]
 8006676:	3307      	adds	r3, #7
 8006678:	f023 0307 	bic.w	r3, r3, #7
 800667c:	f103 0208 	add.w	r2, r3, #8
 8006680:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006684:	f8d4 b000 	ldr.w	fp, [r4]
 8006688:	f8c8 2000 	str.w	r2, [r8]
 800668c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006690:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006694:	9307      	str	r3, [sp, #28]
 8006696:	f8cd 8018 	str.w	r8, [sp, #24]
 800669a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800669e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80066a2:	4b9c      	ldr	r3, [pc, #624]	@ (8006914 <_printf_float+0x2c8>)
 80066a4:	f04f 32ff 	mov.w	r2, #4294967295
 80066a8:	f7fa fa70 	bl	8000b8c <__aeabi_dcmpun>
 80066ac:	bb70      	cbnz	r0, 800670c <_printf_float+0xc0>
 80066ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80066b2:	4b98      	ldr	r3, [pc, #608]	@ (8006914 <_printf_float+0x2c8>)
 80066b4:	f04f 32ff 	mov.w	r2, #4294967295
 80066b8:	f7fa fa4a 	bl	8000b50 <__aeabi_dcmple>
 80066bc:	bb30      	cbnz	r0, 800670c <_printf_float+0xc0>
 80066be:	2200      	movs	r2, #0
 80066c0:	2300      	movs	r3, #0
 80066c2:	4640      	mov	r0, r8
 80066c4:	4649      	mov	r1, r9
 80066c6:	f7fa fa39 	bl	8000b3c <__aeabi_dcmplt>
 80066ca:	b110      	cbz	r0, 80066d2 <_printf_float+0x86>
 80066cc:	232d      	movs	r3, #45	@ 0x2d
 80066ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80066d2:	4a91      	ldr	r2, [pc, #580]	@ (8006918 <_printf_float+0x2cc>)
 80066d4:	4b91      	ldr	r3, [pc, #580]	@ (800691c <_printf_float+0x2d0>)
 80066d6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80066da:	bf94      	ite	ls
 80066dc:	4690      	movls	r8, r2
 80066de:	4698      	movhi	r8, r3
 80066e0:	2303      	movs	r3, #3
 80066e2:	6123      	str	r3, [r4, #16]
 80066e4:	f02b 0304 	bic.w	r3, fp, #4
 80066e8:	6023      	str	r3, [r4, #0]
 80066ea:	f04f 0900 	mov.w	r9, #0
 80066ee:	9700      	str	r7, [sp, #0]
 80066f0:	4633      	mov	r3, r6
 80066f2:	aa0b      	add	r2, sp, #44	@ 0x2c
 80066f4:	4621      	mov	r1, r4
 80066f6:	4628      	mov	r0, r5
 80066f8:	f000 f9d2 	bl	8006aa0 <_printf_common>
 80066fc:	3001      	adds	r0, #1
 80066fe:	f040 808d 	bne.w	800681c <_printf_float+0x1d0>
 8006702:	f04f 30ff 	mov.w	r0, #4294967295
 8006706:	b00d      	add	sp, #52	@ 0x34
 8006708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800670c:	4642      	mov	r2, r8
 800670e:	464b      	mov	r3, r9
 8006710:	4640      	mov	r0, r8
 8006712:	4649      	mov	r1, r9
 8006714:	f7fa fa3a 	bl	8000b8c <__aeabi_dcmpun>
 8006718:	b140      	cbz	r0, 800672c <_printf_float+0xe0>
 800671a:	464b      	mov	r3, r9
 800671c:	2b00      	cmp	r3, #0
 800671e:	bfbc      	itt	lt
 8006720:	232d      	movlt	r3, #45	@ 0x2d
 8006722:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006726:	4a7e      	ldr	r2, [pc, #504]	@ (8006920 <_printf_float+0x2d4>)
 8006728:	4b7e      	ldr	r3, [pc, #504]	@ (8006924 <_printf_float+0x2d8>)
 800672a:	e7d4      	b.n	80066d6 <_printf_float+0x8a>
 800672c:	6863      	ldr	r3, [r4, #4]
 800672e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006732:	9206      	str	r2, [sp, #24]
 8006734:	1c5a      	adds	r2, r3, #1
 8006736:	d13b      	bne.n	80067b0 <_printf_float+0x164>
 8006738:	2306      	movs	r3, #6
 800673a:	6063      	str	r3, [r4, #4]
 800673c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006740:	2300      	movs	r3, #0
 8006742:	6022      	str	r2, [r4, #0]
 8006744:	9303      	str	r3, [sp, #12]
 8006746:	ab0a      	add	r3, sp, #40	@ 0x28
 8006748:	e9cd a301 	strd	sl, r3, [sp, #4]
 800674c:	ab09      	add	r3, sp, #36	@ 0x24
 800674e:	9300      	str	r3, [sp, #0]
 8006750:	6861      	ldr	r1, [r4, #4]
 8006752:	ec49 8b10 	vmov	d0, r8, r9
 8006756:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800675a:	4628      	mov	r0, r5
 800675c:	f7ff fed6 	bl	800650c <__cvt>
 8006760:	9b06      	ldr	r3, [sp, #24]
 8006762:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006764:	2b47      	cmp	r3, #71	@ 0x47
 8006766:	4680      	mov	r8, r0
 8006768:	d129      	bne.n	80067be <_printf_float+0x172>
 800676a:	1cc8      	adds	r0, r1, #3
 800676c:	db02      	blt.n	8006774 <_printf_float+0x128>
 800676e:	6863      	ldr	r3, [r4, #4]
 8006770:	4299      	cmp	r1, r3
 8006772:	dd41      	ble.n	80067f8 <_printf_float+0x1ac>
 8006774:	f1aa 0a02 	sub.w	sl, sl, #2
 8006778:	fa5f fa8a 	uxtb.w	sl, sl
 800677c:	3901      	subs	r1, #1
 800677e:	4652      	mov	r2, sl
 8006780:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006784:	9109      	str	r1, [sp, #36]	@ 0x24
 8006786:	f7ff ff26 	bl	80065d6 <__exponent>
 800678a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800678c:	1813      	adds	r3, r2, r0
 800678e:	2a01      	cmp	r2, #1
 8006790:	4681      	mov	r9, r0
 8006792:	6123      	str	r3, [r4, #16]
 8006794:	dc02      	bgt.n	800679c <_printf_float+0x150>
 8006796:	6822      	ldr	r2, [r4, #0]
 8006798:	07d2      	lsls	r2, r2, #31
 800679a:	d501      	bpl.n	80067a0 <_printf_float+0x154>
 800679c:	3301      	adds	r3, #1
 800679e:	6123      	str	r3, [r4, #16]
 80067a0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d0a2      	beq.n	80066ee <_printf_float+0xa2>
 80067a8:	232d      	movs	r3, #45	@ 0x2d
 80067aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80067ae:	e79e      	b.n	80066ee <_printf_float+0xa2>
 80067b0:	9a06      	ldr	r2, [sp, #24]
 80067b2:	2a47      	cmp	r2, #71	@ 0x47
 80067b4:	d1c2      	bne.n	800673c <_printf_float+0xf0>
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d1c0      	bne.n	800673c <_printf_float+0xf0>
 80067ba:	2301      	movs	r3, #1
 80067bc:	e7bd      	b.n	800673a <_printf_float+0xee>
 80067be:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80067c2:	d9db      	bls.n	800677c <_printf_float+0x130>
 80067c4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80067c8:	d118      	bne.n	80067fc <_printf_float+0x1b0>
 80067ca:	2900      	cmp	r1, #0
 80067cc:	6863      	ldr	r3, [r4, #4]
 80067ce:	dd0b      	ble.n	80067e8 <_printf_float+0x19c>
 80067d0:	6121      	str	r1, [r4, #16]
 80067d2:	b913      	cbnz	r3, 80067da <_printf_float+0x18e>
 80067d4:	6822      	ldr	r2, [r4, #0]
 80067d6:	07d0      	lsls	r0, r2, #31
 80067d8:	d502      	bpl.n	80067e0 <_printf_float+0x194>
 80067da:	3301      	adds	r3, #1
 80067dc:	440b      	add	r3, r1
 80067de:	6123      	str	r3, [r4, #16]
 80067e0:	65a1      	str	r1, [r4, #88]	@ 0x58
 80067e2:	f04f 0900 	mov.w	r9, #0
 80067e6:	e7db      	b.n	80067a0 <_printf_float+0x154>
 80067e8:	b913      	cbnz	r3, 80067f0 <_printf_float+0x1a4>
 80067ea:	6822      	ldr	r2, [r4, #0]
 80067ec:	07d2      	lsls	r2, r2, #31
 80067ee:	d501      	bpl.n	80067f4 <_printf_float+0x1a8>
 80067f0:	3302      	adds	r3, #2
 80067f2:	e7f4      	b.n	80067de <_printf_float+0x192>
 80067f4:	2301      	movs	r3, #1
 80067f6:	e7f2      	b.n	80067de <_printf_float+0x192>
 80067f8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80067fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80067fe:	4299      	cmp	r1, r3
 8006800:	db05      	blt.n	800680e <_printf_float+0x1c2>
 8006802:	6823      	ldr	r3, [r4, #0]
 8006804:	6121      	str	r1, [r4, #16]
 8006806:	07d8      	lsls	r0, r3, #31
 8006808:	d5ea      	bpl.n	80067e0 <_printf_float+0x194>
 800680a:	1c4b      	adds	r3, r1, #1
 800680c:	e7e7      	b.n	80067de <_printf_float+0x192>
 800680e:	2900      	cmp	r1, #0
 8006810:	bfd4      	ite	le
 8006812:	f1c1 0202 	rsble	r2, r1, #2
 8006816:	2201      	movgt	r2, #1
 8006818:	4413      	add	r3, r2
 800681a:	e7e0      	b.n	80067de <_printf_float+0x192>
 800681c:	6823      	ldr	r3, [r4, #0]
 800681e:	055a      	lsls	r2, r3, #21
 8006820:	d407      	bmi.n	8006832 <_printf_float+0x1e6>
 8006822:	6923      	ldr	r3, [r4, #16]
 8006824:	4642      	mov	r2, r8
 8006826:	4631      	mov	r1, r6
 8006828:	4628      	mov	r0, r5
 800682a:	47b8      	blx	r7
 800682c:	3001      	adds	r0, #1
 800682e:	d12b      	bne.n	8006888 <_printf_float+0x23c>
 8006830:	e767      	b.n	8006702 <_printf_float+0xb6>
 8006832:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006836:	f240 80dd 	bls.w	80069f4 <_printf_float+0x3a8>
 800683a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800683e:	2200      	movs	r2, #0
 8006840:	2300      	movs	r3, #0
 8006842:	f7fa f971 	bl	8000b28 <__aeabi_dcmpeq>
 8006846:	2800      	cmp	r0, #0
 8006848:	d033      	beq.n	80068b2 <_printf_float+0x266>
 800684a:	4a37      	ldr	r2, [pc, #220]	@ (8006928 <_printf_float+0x2dc>)
 800684c:	2301      	movs	r3, #1
 800684e:	4631      	mov	r1, r6
 8006850:	4628      	mov	r0, r5
 8006852:	47b8      	blx	r7
 8006854:	3001      	adds	r0, #1
 8006856:	f43f af54 	beq.w	8006702 <_printf_float+0xb6>
 800685a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800685e:	4543      	cmp	r3, r8
 8006860:	db02      	blt.n	8006868 <_printf_float+0x21c>
 8006862:	6823      	ldr	r3, [r4, #0]
 8006864:	07d8      	lsls	r0, r3, #31
 8006866:	d50f      	bpl.n	8006888 <_printf_float+0x23c>
 8006868:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800686c:	4631      	mov	r1, r6
 800686e:	4628      	mov	r0, r5
 8006870:	47b8      	blx	r7
 8006872:	3001      	adds	r0, #1
 8006874:	f43f af45 	beq.w	8006702 <_printf_float+0xb6>
 8006878:	f04f 0900 	mov.w	r9, #0
 800687c:	f108 38ff 	add.w	r8, r8, #4294967295
 8006880:	f104 0a1a 	add.w	sl, r4, #26
 8006884:	45c8      	cmp	r8, r9
 8006886:	dc09      	bgt.n	800689c <_printf_float+0x250>
 8006888:	6823      	ldr	r3, [r4, #0]
 800688a:	079b      	lsls	r3, r3, #30
 800688c:	f100 8103 	bmi.w	8006a96 <_printf_float+0x44a>
 8006890:	68e0      	ldr	r0, [r4, #12]
 8006892:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006894:	4298      	cmp	r0, r3
 8006896:	bfb8      	it	lt
 8006898:	4618      	movlt	r0, r3
 800689a:	e734      	b.n	8006706 <_printf_float+0xba>
 800689c:	2301      	movs	r3, #1
 800689e:	4652      	mov	r2, sl
 80068a0:	4631      	mov	r1, r6
 80068a2:	4628      	mov	r0, r5
 80068a4:	47b8      	blx	r7
 80068a6:	3001      	adds	r0, #1
 80068a8:	f43f af2b 	beq.w	8006702 <_printf_float+0xb6>
 80068ac:	f109 0901 	add.w	r9, r9, #1
 80068b0:	e7e8      	b.n	8006884 <_printf_float+0x238>
 80068b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	dc39      	bgt.n	800692c <_printf_float+0x2e0>
 80068b8:	4a1b      	ldr	r2, [pc, #108]	@ (8006928 <_printf_float+0x2dc>)
 80068ba:	2301      	movs	r3, #1
 80068bc:	4631      	mov	r1, r6
 80068be:	4628      	mov	r0, r5
 80068c0:	47b8      	blx	r7
 80068c2:	3001      	adds	r0, #1
 80068c4:	f43f af1d 	beq.w	8006702 <_printf_float+0xb6>
 80068c8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80068cc:	ea59 0303 	orrs.w	r3, r9, r3
 80068d0:	d102      	bne.n	80068d8 <_printf_float+0x28c>
 80068d2:	6823      	ldr	r3, [r4, #0]
 80068d4:	07d9      	lsls	r1, r3, #31
 80068d6:	d5d7      	bpl.n	8006888 <_printf_float+0x23c>
 80068d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80068dc:	4631      	mov	r1, r6
 80068de:	4628      	mov	r0, r5
 80068e0:	47b8      	blx	r7
 80068e2:	3001      	adds	r0, #1
 80068e4:	f43f af0d 	beq.w	8006702 <_printf_float+0xb6>
 80068e8:	f04f 0a00 	mov.w	sl, #0
 80068ec:	f104 0b1a 	add.w	fp, r4, #26
 80068f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068f2:	425b      	negs	r3, r3
 80068f4:	4553      	cmp	r3, sl
 80068f6:	dc01      	bgt.n	80068fc <_printf_float+0x2b0>
 80068f8:	464b      	mov	r3, r9
 80068fa:	e793      	b.n	8006824 <_printf_float+0x1d8>
 80068fc:	2301      	movs	r3, #1
 80068fe:	465a      	mov	r2, fp
 8006900:	4631      	mov	r1, r6
 8006902:	4628      	mov	r0, r5
 8006904:	47b8      	blx	r7
 8006906:	3001      	adds	r0, #1
 8006908:	f43f aefb 	beq.w	8006702 <_printf_float+0xb6>
 800690c:	f10a 0a01 	add.w	sl, sl, #1
 8006910:	e7ee      	b.n	80068f0 <_printf_float+0x2a4>
 8006912:	bf00      	nop
 8006914:	7fefffff 	.word	0x7fefffff
 8006918:	08009208 	.word	0x08009208
 800691c:	0800920c 	.word	0x0800920c
 8006920:	08009210 	.word	0x08009210
 8006924:	08009214 	.word	0x08009214
 8006928:	08009218 	.word	0x08009218
 800692c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800692e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006932:	4553      	cmp	r3, sl
 8006934:	bfa8      	it	ge
 8006936:	4653      	movge	r3, sl
 8006938:	2b00      	cmp	r3, #0
 800693a:	4699      	mov	r9, r3
 800693c:	dc36      	bgt.n	80069ac <_printf_float+0x360>
 800693e:	f04f 0b00 	mov.w	fp, #0
 8006942:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006946:	f104 021a 	add.w	r2, r4, #26
 800694a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800694c:	9306      	str	r3, [sp, #24]
 800694e:	eba3 0309 	sub.w	r3, r3, r9
 8006952:	455b      	cmp	r3, fp
 8006954:	dc31      	bgt.n	80069ba <_printf_float+0x36e>
 8006956:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006958:	459a      	cmp	sl, r3
 800695a:	dc3a      	bgt.n	80069d2 <_printf_float+0x386>
 800695c:	6823      	ldr	r3, [r4, #0]
 800695e:	07da      	lsls	r2, r3, #31
 8006960:	d437      	bmi.n	80069d2 <_printf_float+0x386>
 8006962:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006964:	ebaa 0903 	sub.w	r9, sl, r3
 8006968:	9b06      	ldr	r3, [sp, #24]
 800696a:	ebaa 0303 	sub.w	r3, sl, r3
 800696e:	4599      	cmp	r9, r3
 8006970:	bfa8      	it	ge
 8006972:	4699      	movge	r9, r3
 8006974:	f1b9 0f00 	cmp.w	r9, #0
 8006978:	dc33      	bgt.n	80069e2 <_printf_float+0x396>
 800697a:	f04f 0800 	mov.w	r8, #0
 800697e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006982:	f104 0b1a 	add.w	fp, r4, #26
 8006986:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006988:	ebaa 0303 	sub.w	r3, sl, r3
 800698c:	eba3 0309 	sub.w	r3, r3, r9
 8006990:	4543      	cmp	r3, r8
 8006992:	f77f af79 	ble.w	8006888 <_printf_float+0x23c>
 8006996:	2301      	movs	r3, #1
 8006998:	465a      	mov	r2, fp
 800699a:	4631      	mov	r1, r6
 800699c:	4628      	mov	r0, r5
 800699e:	47b8      	blx	r7
 80069a0:	3001      	adds	r0, #1
 80069a2:	f43f aeae 	beq.w	8006702 <_printf_float+0xb6>
 80069a6:	f108 0801 	add.w	r8, r8, #1
 80069aa:	e7ec      	b.n	8006986 <_printf_float+0x33a>
 80069ac:	4642      	mov	r2, r8
 80069ae:	4631      	mov	r1, r6
 80069b0:	4628      	mov	r0, r5
 80069b2:	47b8      	blx	r7
 80069b4:	3001      	adds	r0, #1
 80069b6:	d1c2      	bne.n	800693e <_printf_float+0x2f2>
 80069b8:	e6a3      	b.n	8006702 <_printf_float+0xb6>
 80069ba:	2301      	movs	r3, #1
 80069bc:	4631      	mov	r1, r6
 80069be:	4628      	mov	r0, r5
 80069c0:	9206      	str	r2, [sp, #24]
 80069c2:	47b8      	blx	r7
 80069c4:	3001      	adds	r0, #1
 80069c6:	f43f ae9c 	beq.w	8006702 <_printf_float+0xb6>
 80069ca:	9a06      	ldr	r2, [sp, #24]
 80069cc:	f10b 0b01 	add.w	fp, fp, #1
 80069d0:	e7bb      	b.n	800694a <_printf_float+0x2fe>
 80069d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80069d6:	4631      	mov	r1, r6
 80069d8:	4628      	mov	r0, r5
 80069da:	47b8      	blx	r7
 80069dc:	3001      	adds	r0, #1
 80069de:	d1c0      	bne.n	8006962 <_printf_float+0x316>
 80069e0:	e68f      	b.n	8006702 <_printf_float+0xb6>
 80069e2:	9a06      	ldr	r2, [sp, #24]
 80069e4:	464b      	mov	r3, r9
 80069e6:	4442      	add	r2, r8
 80069e8:	4631      	mov	r1, r6
 80069ea:	4628      	mov	r0, r5
 80069ec:	47b8      	blx	r7
 80069ee:	3001      	adds	r0, #1
 80069f0:	d1c3      	bne.n	800697a <_printf_float+0x32e>
 80069f2:	e686      	b.n	8006702 <_printf_float+0xb6>
 80069f4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80069f8:	f1ba 0f01 	cmp.w	sl, #1
 80069fc:	dc01      	bgt.n	8006a02 <_printf_float+0x3b6>
 80069fe:	07db      	lsls	r3, r3, #31
 8006a00:	d536      	bpl.n	8006a70 <_printf_float+0x424>
 8006a02:	2301      	movs	r3, #1
 8006a04:	4642      	mov	r2, r8
 8006a06:	4631      	mov	r1, r6
 8006a08:	4628      	mov	r0, r5
 8006a0a:	47b8      	blx	r7
 8006a0c:	3001      	adds	r0, #1
 8006a0e:	f43f ae78 	beq.w	8006702 <_printf_float+0xb6>
 8006a12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a16:	4631      	mov	r1, r6
 8006a18:	4628      	mov	r0, r5
 8006a1a:	47b8      	blx	r7
 8006a1c:	3001      	adds	r0, #1
 8006a1e:	f43f ae70 	beq.w	8006702 <_printf_float+0xb6>
 8006a22:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006a26:	2200      	movs	r2, #0
 8006a28:	2300      	movs	r3, #0
 8006a2a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006a2e:	f7fa f87b 	bl	8000b28 <__aeabi_dcmpeq>
 8006a32:	b9c0      	cbnz	r0, 8006a66 <_printf_float+0x41a>
 8006a34:	4653      	mov	r3, sl
 8006a36:	f108 0201 	add.w	r2, r8, #1
 8006a3a:	4631      	mov	r1, r6
 8006a3c:	4628      	mov	r0, r5
 8006a3e:	47b8      	blx	r7
 8006a40:	3001      	adds	r0, #1
 8006a42:	d10c      	bne.n	8006a5e <_printf_float+0x412>
 8006a44:	e65d      	b.n	8006702 <_printf_float+0xb6>
 8006a46:	2301      	movs	r3, #1
 8006a48:	465a      	mov	r2, fp
 8006a4a:	4631      	mov	r1, r6
 8006a4c:	4628      	mov	r0, r5
 8006a4e:	47b8      	blx	r7
 8006a50:	3001      	adds	r0, #1
 8006a52:	f43f ae56 	beq.w	8006702 <_printf_float+0xb6>
 8006a56:	f108 0801 	add.w	r8, r8, #1
 8006a5a:	45d0      	cmp	r8, sl
 8006a5c:	dbf3      	blt.n	8006a46 <_printf_float+0x3fa>
 8006a5e:	464b      	mov	r3, r9
 8006a60:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006a64:	e6df      	b.n	8006826 <_printf_float+0x1da>
 8006a66:	f04f 0800 	mov.w	r8, #0
 8006a6a:	f104 0b1a 	add.w	fp, r4, #26
 8006a6e:	e7f4      	b.n	8006a5a <_printf_float+0x40e>
 8006a70:	2301      	movs	r3, #1
 8006a72:	4642      	mov	r2, r8
 8006a74:	e7e1      	b.n	8006a3a <_printf_float+0x3ee>
 8006a76:	2301      	movs	r3, #1
 8006a78:	464a      	mov	r2, r9
 8006a7a:	4631      	mov	r1, r6
 8006a7c:	4628      	mov	r0, r5
 8006a7e:	47b8      	blx	r7
 8006a80:	3001      	adds	r0, #1
 8006a82:	f43f ae3e 	beq.w	8006702 <_printf_float+0xb6>
 8006a86:	f108 0801 	add.w	r8, r8, #1
 8006a8a:	68e3      	ldr	r3, [r4, #12]
 8006a8c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006a8e:	1a5b      	subs	r3, r3, r1
 8006a90:	4543      	cmp	r3, r8
 8006a92:	dcf0      	bgt.n	8006a76 <_printf_float+0x42a>
 8006a94:	e6fc      	b.n	8006890 <_printf_float+0x244>
 8006a96:	f04f 0800 	mov.w	r8, #0
 8006a9a:	f104 0919 	add.w	r9, r4, #25
 8006a9e:	e7f4      	b.n	8006a8a <_printf_float+0x43e>

08006aa0 <_printf_common>:
 8006aa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006aa4:	4616      	mov	r6, r2
 8006aa6:	4698      	mov	r8, r3
 8006aa8:	688a      	ldr	r2, [r1, #8]
 8006aaa:	690b      	ldr	r3, [r1, #16]
 8006aac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	bfb8      	it	lt
 8006ab4:	4613      	movlt	r3, r2
 8006ab6:	6033      	str	r3, [r6, #0]
 8006ab8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006abc:	4607      	mov	r7, r0
 8006abe:	460c      	mov	r4, r1
 8006ac0:	b10a      	cbz	r2, 8006ac6 <_printf_common+0x26>
 8006ac2:	3301      	adds	r3, #1
 8006ac4:	6033      	str	r3, [r6, #0]
 8006ac6:	6823      	ldr	r3, [r4, #0]
 8006ac8:	0699      	lsls	r1, r3, #26
 8006aca:	bf42      	ittt	mi
 8006acc:	6833      	ldrmi	r3, [r6, #0]
 8006ace:	3302      	addmi	r3, #2
 8006ad0:	6033      	strmi	r3, [r6, #0]
 8006ad2:	6825      	ldr	r5, [r4, #0]
 8006ad4:	f015 0506 	ands.w	r5, r5, #6
 8006ad8:	d106      	bne.n	8006ae8 <_printf_common+0x48>
 8006ada:	f104 0a19 	add.w	sl, r4, #25
 8006ade:	68e3      	ldr	r3, [r4, #12]
 8006ae0:	6832      	ldr	r2, [r6, #0]
 8006ae2:	1a9b      	subs	r3, r3, r2
 8006ae4:	42ab      	cmp	r3, r5
 8006ae6:	dc26      	bgt.n	8006b36 <_printf_common+0x96>
 8006ae8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006aec:	6822      	ldr	r2, [r4, #0]
 8006aee:	3b00      	subs	r3, #0
 8006af0:	bf18      	it	ne
 8006af2:	2301      	movne	r3, #1
 8006af4:	0692      	lsls	r2, r2, #26
 8006af6:	d42b      	bmi.n	8006b50 <_printf_common+0xb0>
 8006af8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006afc:	4641      	mov	r1, r8
 8006afe:	4638      	mov	r0, r7
 8006b00:	47c8      	blx	r9
 8006b02:	3001      	adds	r0, #1
 8006b04:	d01e      	beq.n	8006b44 <_printf_common+0xa4>
 8006b06:	6823      	ldr	r3, [r4, #0]
 8006b08:	6922      	ldr	r2, [r4, #16]
 8006b0a:	f003 0306 	and.w	r3, r3, #6
 8006b0e:	2b04      	cmp	r3, #4
 8006b10:	bf02      	ittt	eq
 8006b12:	68e5      	ldreq	r5, [r4, #12]
 8006b14:	6833      	ldreq	r3, [r6, #0]
 8006b16:	1aed      	subeq	r5, r5, r3
 8006b18:	68a3      	ldr	r3, [r4, #8]
 8006b1a:	bf0c      	ite	eq
 8006b1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b20:	2500      	movne	r5, #0
 8006b22:	4293      	cmp	r3, r2
 8006b24:	bfc4      	itt	gt
 8006b26:	1a9b      	subgt	r3, r3, r2
 8006b28:	18ed      	addgt	r5, r5, r3
 8006b2a:	2600      	movs	r6, #0
 8006b2c:	341a      	adds	r4, #26
 8006b2e:	42b5      	cmp	r5, r6
 8006b30:	d11a      	bne.n	8006b68 <_printf_common+0xc8>
 8006b32:	2000      	movs	r0, #0
 8006b34:	e008      	b.n	8006b48 <_printf_common+0xa8>
 8006b36:	2301      	movs	r3, #1
 8006b38:	4652      	mov	r2, sl
 8006b3a:	4641      	mov	r1, r8
 8006b3c:	4638      	mov	r0, r7
 8006b3e:	47c8      	blx	r9
 8006b40:	3001      	adds	r0, #1
 8006b42:	d103      	bne.n	8006b4c <_printf_common+0xac>
 8006b44:	f04f 30ff 	mov.w	r0, #4294967295
 8006b48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b4c:	3501      	adds	r5, #1
 8006b4e:	e7c6      	b.n	8006ade <_printf_common+0x3e>
 8006b50:	18e1      	adds	r1, r4, r3
 8006b52:	1c5a      	adds	r2, r3, #1
 8006b54:	2030      	movs	r0, #48	@ 0x30
 8006b56:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006b5a:	4422      	add	r2, r4
 8006b5c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006b60:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006b64:	3302      	adds	r3, #2
 8006b66:	e7c7      	b.n	8006af8 <_printf_common+0x58>
 8006b68:	2301      	movs	r3, #1
 8006b6a:	4622      	mov	r2, r4
 8006b6c:	4641      	mov	r1, r8
 8006b6e:	4638      	mov	r0, r7
 8006b70:	47c8      	blx	r9
 8006b72:	3001      	adds	r0, #1
 8006b74:	d0e6      	beq.n	8006b44 <_printf_common+0xa4>
 8006b76:	3601      	adds	r6, #1
 8006b78:	e7d9      	b.n	8006b2e <_printf_common+0x8e>
	...

08006b7c <_printf_i>:
 8006b7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b80:	7e0f      	ldrb	r7, [r1, #24]
 8006b82:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006b84:	2f78      	cmp	r7, #120	@ 0x78
 8006b86:	4691      	mov	r9, r2
 8006b88:	4680      	mov	r8, r0
 8006b8a:	460c      	mov	r4, r1
 8006b8c:	469a      	mov	sl, r3
 8006b8e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006b92:	d807      	bhi.n	8006ba4 <_printf_i+0x28>
 8006b94:	2f62      	cmp	r7, #98	@ 0x62
 8006b96:	d80a      	bhi.n	8006bae <_printf_i+0x32>
 8006b98:	2f00      	cmp	r7, #0
 8006b9a:	f000 80d2 	beq.w	8006d42 <_printf_i+0x1c6>
 8006b9e:	2f58      	cmp	r7, #88	@ 0x58
 8006ba0:	f000 80b9 	beq.w	8006d16 <_printf_i+0x19a>
 8006ba4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006ba8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006bac:	e03a      	b.n	8006c24 <_printf_i+0xa8>
 8006bae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006bb2:	2b15      	cmp	r3, #21
 8006bb4:	d8f6      	bhi.n	8006ba4 <_printf_i+0x28>
 8006bb6:	a101      	add	r1, pc, #4	@ (adr r1, 8006bbc <_printf_i+0x40>)
 8006bb8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006bbc:	08006c15 	.word	0x08006c15
 8006bc0:	08006c29 	.word	0x08006c29
 8006bc4:	08006ba5 	.word	0x08006ba5
 8006bc8:	08006ba5 	.word	0x08006ba5
 8006bcc:	08006ba5 	.word	0x08006ba5
 8006bd0:	08006ba5 	.word	0x08006ba5
 8006bd4:	08006c29 	.word	0x08006c29
 8006bd8:	08006ba5 	.word	0x08006ba5
 8006bdc:	08006ba5 	.word	0x08006ba5
 8006be0:	08006ba5 	.word	0x08006ba5
 8006be4:	08006ba5 	.word	0x08006ba5
 8006be8:	08006d29 	.word	0x08006d29
 8006bec:	08006c53 	.word	0x08006c53
 8006bf0:	08006ce3 	.word	0x08006ce3
 8006bf4:	08006ba5 	.word	0x08006ba5
 8006bf8:	08006ba5 	.word	0x08006ba5
 8006bfc:	08006d4b 	.word	0x08006d4b
 8006c00:	08006ba5 	.word	0x08006ba5
 8006c04:	08006c53 	.word	0x08006c53
 8006c08:	08006ba5 	.word	0x08006ba5
 8006c0c:	08006ba5 	.word	0x08006ba5
 8006c10:	08006ceb 	.word	0x08006ceb
 8006c14:	6833      	ldr	r3, [r6, #0]
 8006c16:	1d1a      	adds	r2, r3, #4
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	6032      	str	r2, [r6, #0]
 8006c1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006c20:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006c24:	2301      	movs	r3, #1
 8006c26:	e09d      	b.n	8006d64 <_printf_i+0x1e8>
 8006c28:	6833      	ldr	r3, [r6, #0]
 8006c2a:	6820      	ldr	r0, [r4, #0]
 8006c2c:	1d19      	adds	r1, r3, #4
 8006c2e:	6031      	str	r1, [r6, #0]
 8006c30:	0606      	lsls	r6, r0, #24
 8006c32:	d501      	bpl.n	8006c38 <_printf_i+0xbc>
 8006c34:	681d      	ldr	r5, [r3, #0]
 8006c36:	e003      	b.n	8006c40 <_printf_i+0xc4>
 8006c38:	0645      	lsls	r5, r0, #25
 8006c3a:	d5fb      	bpl.n	8006c34 <_printf_i+0xb8>
 8006c3c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006c40:	2d00      	cmp	r5, #0
 8006c42:	da03      	bge.n	8006c4c <_printf_i+0xd0>
 8006c44:	232d      	movs	r3, #45	@ 0x2d
 8006c46:	426d      	negs	r5, r5
 8006c48:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c4c:	4859      	ldr	r0, [pc, #356]	@ (8006db4 <_printf_i+0x238>)
 8006c4e:	230a      	movs	r3, #10
 8006c50:	e011      	b.n	8006c76 <_printf_i+0xfa>
 8006c52:	6821      	ldr	r1, [r4, #0]
 8006c54:	6833      	ldr	r3, [r6, #0]
 8006c56:	0608      	lsls	r0, r1, #24
 8006c58:	f853 5b04 	ldr.w	r5, [r3], #4
 8006c5c:	d402      	bmi.n	8006c64 <_printf_i+0xe8>
 8006c5e:	0649      	lsls	r1, r1, #25
 8006c60:	bf48      	it	mi
 8006c62:	b2ad      	uxthmi	r5, r5
 8006c64:	2f6f      	cmp	r7, #111	@ 0x6f
 8006c66:	4853      	ldr	r0, [pc, #332]	@ (8006db4 <_printf_i+0x238>)
 8006c68:	6033      	str	r3, [r6, #0]
 8006c6a:	bf14      	ite	ne
 8006c6c:	230a      	movne	r3, #10
 8006c6e:	2308      	moveq	r3, #8
 8006c70:	2100      	movs	r1, #0
 8006c72:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006c76:	6866      	ldr	r6, [r4, #4]
 8006c78:	60a6      	str	r6, [r4, #8]
 8006c7a:	2e00      	cmp	r6, #0
 8006c7c:	bfa2      	ittt	ge
 8006c7e:	6821      	ldrge	r1, [r4, #0]
 8006c80:	f021 0104 	bicge.w	r1, r1, #4
 8006c84:	6021      	strge	r1, [r4, #0]
 8006c86:	b90d      	cbnz	r5, 8006c8c <_printf_i+0x110>
 8006c88:	2e00      	cmp	r6, #0
 8006c8a:	d04b      	beq.n	8006d24 <_printf_i+0x1a8>
 8006c8c:	4616      	mov	r6, r2
 8006c8e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006c92:	fb03 5711 	mls	r7, r3, r1, r5
 8006c96:	5dc7      	ldrb	r7, [r0, r7]
 8006c98:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006c9c:	462f      	mov	r7, r5
 8006c9e:	42bb      	cmp	r3, r7
 8006ca0:	460d      	mov	r5, r1
 8006ca2:	d9f4      	bls.n	8006c8e <_printf_i+0x112>
 8006ca4:	2b08      	cmp	r3, #8
 8006ca6:	d10b      	bne.n	8006cc0 <_printf_i+0x144>
 8006ca8:	6823      	ldr	r3, [r4, #0]
 8006caa:	07df      	lsls	r7, r3, #31
 8006cac:	d508      	bpl.n	8006cc0 <_printf_i+0x144>
 8006cae:	6923      	ldr	r3, [r4, #16]
 8006cb0:	6861      	ldr	r1, [r4, #4]
 8006cb2:	4299      	cmp	r1, r3
 8006cb4:	bfde      	ittt	le
 8006cb6:	2330      	movle	r3, #48	@ 0x30
 8006cb8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006cbc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006cc0:	1b92      	subs	r2, r2, r6
 8006cc2:	6122      	str	r2, [r4, #16]
 8006cc4:	f8cd a000 	str.w	sl, [sp]
 8006cc8:	464b      	mov	r3, r9
 8006cca:	aa03      	add	r2, sp, #12
 8006ccc:	4621      	mov	r1, r4
 8006cce:	4640      	mov	r0, r8
 8006cd0:	f7ff fee6 	bl	8006aa0 <_printf_common>
 8006cd4:	3001      	adds	r0, #1
 8006cd6:	d14a      	bne.n	8006d6e <_printf_i+0x1f2>
 8006cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8006cdc:	b004      	add	sp, #16
 8006cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ce2:	6823      	ldr	r3, [r4, #0]
 8006ce4:	f043 0320 	orr.w	r3, r3, #32
 8006ce8:	6023      	str	r3, [r4, #0]
 8006cea:	4833      	ldr	r0, [pc, #204]	@ (8006db8 <_printf_i+0x23c>)
 8006cec:	2778      	movs	r7, #120	@ 0x78
 8006cee:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006cf2:	6823      	ldr	r3, [r4, #0]
 8006cf4:	6831      	ldr	r1, [r6, #0]
 8006cf6:	061f      	lsls	r7, r3, #24
 8006cf8:	f851 5b04 	ldr.w	r5, [r1], #4
 8006cfc:	d402      	bmi.n	8006d04 <_printf_i+0x188>
 8006cfe:	065f      	lsls	r7, r3, #25
 8006d00:	bf48      	it	mi
 8006d02:	b2ad      	uxthmi	r5, r5
 8006d04:	6031      	str	r1, [r6, #0]
 8006d06:	07d9      	lsls	r1, r3, #31
 8006d08:	bf44      	itt	mi
 8006d0a:	f043 0320 	orrmi.w	r3, r3, #32
 8006d0e:	6023      	strmi	r3, [r4, #0]
 8006d10:	b11d      	cbz	r5, 8006d1a <_printf_i+0x19e>
 8006d12:	2310      	movs	r3, #16
 8006d14:	e7ac      	b.n	8006c70 <_printf_i+0xf4>
 8006d16:	4827      	ldr	r0, [pc, #156]	@ (8006db4 <_printf_i+0x238>)
 8006d18:	e7e9      	b.n	8006cee <_printf_i+0x172>
 8006d1a:	6823      	ldr	r3, [r4, #0]
 8006d1c:	f023 0320 	bic.w	r3, r3, #32
 8006d20:	6023      	str	r3, [r4, #0]
 8006d22:	e7f6      	b.n	8006d12 <_printf_i+0x196>
 8006d24:	4616      	mov	r6, r2
 8006d26:	e7bd      	b.n	8006ca4 <_printf_i+0x128>
 8006d28:	6833      	ldr	r3, [r6, #0]
 8006d2a:	6825      	ldr	r5, [r4, #0]
 8006d2c:	6961      	ldr	r1, [r4, #20]
 8006d2e:	1d18      	adds	r0, r3, #4
 8006d30:	6030      	str	r0, [r6, #0]
 8006d32:	062e      	lsls	r6, r5, #24
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	d501      	bpl.n	8006d3c <_printf_i+0x1c0>
 8006d38:	6019      	str	r1, [r3, #0]
 8006d3a:	e002      	b.n	8006d42 <_printf_i+0x1c6>
 8006d3c:	0668      	lsls	r0, r5, #25
 8006d3e:	d5fb      	bpl.n	8006d38 <_printf_i+0x1bc>
 8006d40:	8019      	strh	r1, [r3, #0]
 8006d42:	2300      	movs	r3, #0
 8006d44:	6123      	str	r3, [r4, #16]
 8006d46:	4616      	mov	r6, r2
 8006d48:	e7bc      	b.n	8006cc4 <_printf_i+0x148>
 8006d4a:	6833      	ldr	r3, [r6, #0]
 8006d4c:	1d1a      	adds	r2, r3, #4
 8006d4e:	6032      	str	r2, [r6, #0]
 8006d50:	681e      	ldr	r6, [r3, #0]
 8006d52:	6862      	ldr	r2, [r4, #4]
 8006d54:	2100      	movs	r1, #0
 8006d56:	4630      	mov	r0, r6
 8006d58:	f7f9 fa6a 	bl	8000230 <memchr>
 8006d5c:	b108      	cbz	r0, 8006d62 <_printf_i+0x1e6>
 8006d5e:	1b80      	subs	r0, r0, r6
 8006d60:	6060      	str	r0, [r4, #4]
 8006d62:	6863      	ldr	r3, [r4, #4]
 8006d64:	6123      	str	r3, [r4, #16]
 8006d66:	2300      	movs	r3, #0
 8006d68:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006d6c:	e7aa      	b.n	8006cc4 <_printf_i+0x148>
 8006d6e:	6923      	ldr	r3, [r4, #16]
 8006d70:	4632      	mov	r2, r6
 8006d72:	4649      	mov	r1, r9
 8006d74:	4640      	mov	r0, r8
 8006d76:	47d0      	blx	sl
 8006d78:	3001      	adds	r0, #1
 8006d7a:	d0ad      	beq.n	8006cd8 <_printf_i+0x15c>
 8006d7c:	6823      	ldr	r3, [r4, #0]
 8006d7e:	079b      	lsls	r3, r3, #30
 8006d80:	d413      	bmi.n	8006daa <_printf_i+0x22e>
 8006d82:	68e0      	ldr	r0, [r4, #12]
 8006d84:	9b03      	ldr	r3, [sp, #12]
 8006d86:	4298      	cmp	r0, r3
 8006d88:	bfb8      	it	lt
 8006d8a:	4618      	movlt	r0, r3
 8006d8c:	e7a6      	b.n	8006cdc <_printf_i+0x160>
 8006d8e:	2301      	movs	r3, #1
 8006d90:	4632      	mov	r2, r6
 8006d92:	4649      	mov	r1, r9
 8006d94:	4640      	mov	r0, r8
 8006d96:	47d0      	blx	sl
 8006d98:	3001      	adds	r0, #1
 8006d9a:	d09d      	beq.n	8006cd8 <_printf_i+0x15c>
 8006d9c:	3501      	adds	r5, #1
 8006d9e:	68e3      	ldr	r3, [r4, #12]
 8006da0:	9903      	ldr	r1, [sp, #12]
 8006da2:	1a5b      	subs	r3, r3, r1
 8006da4:	42ab      	cmp	r3, r5
 8006da6:	dcf2      	bgt.n	8006d8e <_printf_i+0x212>
 8006da8:	e7eb      	b.n	8006d82 <_printf_i+0x206>
 8006daa:	2500      	movs	r5, #0
 8006dac:	f104 0619 	add.w	r6, r4, #25
 8006db0:	e7f5      	b.n	8006d9e <_printf_i+0x222>
 8006db2:	bf00      	nop
 8006db4:	0800921a 	.word	0x0800921a
 8006db8:	0800922b 	.word	0x0800922b

08006dbc <std>:
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	b510      	push	{r4, lr}
 8006dc0:	4604      	mov	r4, r0
 8006dc2:	e9c0 3300 	strd	r3, r3, [r0]
 8006dc6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006dca:	6083      	str	r3, [r0, #8]
 8006dcc:	8181      	strh	r1, [r0, #12]
 8006dce:	6643      	str	r3, [r0, #100]	@ 0x64
 8006dd0:	81c2      	strh	r2, [r0, #14]
 8006dd2:	6183      	str	r3, [r0, #24]
 8006dd4:	4619      	mov	r1, r3
 8006dd6:	2208      	movs	r2, #8
 8006dd8:	305c      	adds	r0, #92	@ 0x5c
 8006dda:	f000 f914 	bl	8007006 <memset>
 8006dde:	4b0d      	ldr	r3, [pc, #52]	@ (8006e14 <std+0x58>)
 8006de0:	6263      	str	r3, [r4, #36]	@ 0x24
 8006de2:	4b0d      	ldr	r3, [pc, #52]	@ (8006e18 <std+0x5c>)
 8006de4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006de6:	4b0d      	ldr	r3, [pc, #52]	@ (8006e1c <std+0x60>)
 8006de8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006dea:	4b0d      	ldr	r3, [pc, #52]	@ (8006e20 <std+0x64>)
 8006dec:	6323      	str	r3, [r4, #48]	@ 0x30
 8006dee:	4b0d      	ldr	r3, [pc, #52]	@ (8006e24 <std+0x68>)
 8006df0:	6224      	str	r4, [r4, #32]
 8006df2:	429c      	cmp	r4, r3
 8006df4:	d006      	beq.n	8006e04 <std+0x48>
 8006df6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006dfa:	4294      	cmp	r4, r2
 8006dfc:	d002      	beq.n	8006e04 <std+0x48>
 8006dfe:	33d0      	adds	r3, #208	@ 0xd0
 8006e00:	429c      	cmp	r4, r3
 8006e02:	d105      	bne.n	8006e10 <std+0x54>
 8006e04:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006e08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e0c:	f000 b978 	b.w	8007100 <__retarget_lock_init_recursive>
 8006e10:	bd10      	pop	{r4, pc}
 8006e12:	bf00      	nop
 8006e14:	08006f81 	.word	0x08006f81
 8006e18:	08006fa3 	.word	0x08006fa3
 8006e1c:	08006fdb 	.word	0x08006fdb
 8006e20:	08006fff 	.word	0x08006fff
 8006e24:	200003e4 	.word	0x200003e4

08006e28 <stdio_exit_handler>:
 8006e28:	4a02      	ldr	r2, [pc, #8]	@ (8006e34 <stdio_exit_handler+0xc>)
 8006e2a:	4903      	ldr	r1, [pc, #12]	@ (8006e38 <stdio_exit_handler+0x10>)
 8006e2c:	4803      	ldr	r0, [pc, #12]	@ (8006e3c <stdio_exit_handler+0x14>)
 8006e2e:	f000 b869 	b.w	8006f04 <_fwalk_sglue>
 8006e32:	bf00      	nop
 8006e34:	2000000c 	.word	0x2000000c
 8006e38:	08008a5d 	.word	0x08008a5d
 8006e3c:	2000001c 	.word	0x2000001c

08006e40 <cleanup_stdio>:
 8006e40:	6841      	ldr	r1, [r0, #4]
 8006e42:	4b0c      	ldr	r3, [pc, #48]	@ (8006e74 <cleanup_stdio+0x34>)
 8006e44:	4299      	cmp	r1, r3
 8006e46:	b510      	push	{r4, lr}
 8006e48:	4604      	mov	r4, r0
 8006e4a:	d001      	beq.n	8006e50 <cleanup_stdio+0x10>
 8006e4c:	f001 fe06 	bl	8008a5c <_fflush_r>
 8006e50:	68a1      	ldr	r1, [r4, #8]
 8006e52:	4b09      	ldr	r3, [pc, #36]	@ (8006e78 <cleanup_stdio+0x38>)
 8006e54:	4299      	cmp	r1, r3
 8006e56:	d002      	beq.n	8006e5e <cleanup_stdio+0x1e>
 8006e58:	4620      	mov	r0, r4
 8006e5a:	f001 fdff 	bl	8008a5c <_fflush_r>
 8006e5e:	68e1      	ldr	r1, [r4, #12]
 8006e60:	4b06      	ldr	r3, [pc, #24]	@ (8006e7c <cleanup_stdio+0x3c>)
 8006e62:	4299      	cmp	r1, r3
 8006e64:	d004      	beq.n	8006e70 <cleanup_stdio+0x30>
 8006e66:	4620      	mov	r0, r4
 8006e68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e6c:	f001 bdf6 	b.w	8008a5c <_fflush_r>
 8006e70:	bd10      	pop	{r4, pc}
 8006e72:	bf00      	nop
 8006e74:	200003e4 	.word	0x200003e4
 8006e78:	2000044c 	.word	0x2000044c
 8006e7c:	200004b4 	.word	0x200004b4

08006e80 <global_stdio_init.part.0>:
 8006e80:	b510      	push	{r4, lr}
 8006e82:	4b0b      	ldr	r3, [pc, #44]	@ (8006eb0 <global_stdio_init.part.0+0x30>)
 8006e84:	4c0b      	ldr	r4, [pc, #44]	@ (8006eb4 <global_stdio_init.part.0+0x34>)
 8006e86:	4a0c      	ldr	r2, [pc, #48]	@ (8006eb8 <global_stdio_init.part.0+0x38>)
 8006e88:	601a      	str	r2, [r3, #0]
 8006e8a:	4620      	mov	r0, r4
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	2104      	movs	r1, #4
 8006e90:	f7ff ff94 	bl	8006dbc <std>
 8006e94:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006e98:	2201      	movs	r2, #1
 8006e9a:	2109      	movs	r1, #9
 8006e9c:	f7ff ff8e 	bl	8006dbc <std>
 8006ea0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006ea4:	2202      	movs	r2, #2
 8006ea6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006eaa:	2112      	movs	r1, #18
 8006eac:	f7ff bf86 	b.w	8006dbc <std>
 8006eb0:	2000051c 	.word	0x2000051c
 8006eb4:	200003e4 	.word	0x200003e4
 8006eb8:	08006e29 	.word	0x08006e29

08006ebc <__sfp_lock_acquire>:
 8006ebc:	4801      	ldr	r0, [pc, #4]	@ (8006ec4 <__sfp_lock_acquire+0x8>)
 8006ebe:	f000 b920 	b.w	8007102 <__retarget_lock_acquire_recursive>
 8006ec2:	bf00      	nop
 8006ec4:	20000525 	.word	0x20000525

08006ec8 <__sfp_lock_release>:
 8006ec8:	4801      	ldr	r0, [pc, #4]	@ (8006ed0 <__sfp_lock_release+0x8>)
 8006eca:	f000 b91b 	b.w	8007104 <__retarget_lock_release_recursive>
 8006ece:	bf00      	nop
 8006ed0:	20000525 	.word	0x20000525

08006ed4 <__sinit>:
 8006ed4:	b510      	push	{r4, lr}
 8006ed6:	4604      	mov	r4, r0
 8006ed8:	f7ff fff0 	bl	8006ebc <__sfp_lock_acquire>
 8006edc:	6a23      	ldr	r3, [r4, #32]
 8006ede:	b11b      	cbz	r3, 8006ee8 <__sinit+0x14>
 8006ee0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ee4:	f7ff bff0 	b.w	8006ec8 <__sfp_lock_release>
 8006ee8:	4b04      	ldr	r3, [pc, #16]	@ (8006efc <__sinit+0x28>)
 8006eea:	6223      	str	r3, [r4, #32]
 8006eec:	4b04      	ldr	r3, [pc, #16]	@ (8006f00 <__sinit+0x2c>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d1f5      	bne.n	8006ee0 <__sinit+0xc>
 8006ef4:	f7ff ffc4 	bl	8006e80 <global_stdio_init.part.0>
 8006ef8:	e7f2      	b.n	8006ee0 <__sinit+0xc>
 8006efa:	bf00      	nop
 8006efc:	08006e41 	.word	0x08006e41
 8006f00:	2000051c 	.word	0x2000051c

08006f04 <_fwalk_sglue>:
 8006f04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f08:	4607      	mov	r7, r0
 8006f0a:	4688      	mov	r8, r1
 8006f0c:	4614      	mov	r4, r2
 8006f0e:	2600      	movs	r6, #0
 8006f10:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006f14:	f1b9 0901 	subs.w	r9, r9, #1
 8006f18:	d505      	bpl.n	8006f26 <_fwalk_sglue+0x22>
 8006f1a:	6824      	ldr	r4, [r4, #0]
 8006f1c:	2c00      	cmp	r4, #0
 8006f1e:	d1f7      	bne.n	8006f10 <_fwalk_sglue+0xc>
 8006f20:	4630      	mov	r0, r6
 8006f22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f26:	89ab      	ldrh	r3, [r5, #12]
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	d907      	bls.n	8006f3c <_fwalk_sglue+0x38>
 8006f2c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006f30:	3301      	adds	r3, #1
 8006f32:	d003      	beq.n	8006f3c <_fwalk_sglue+0x38>
 8006f34:	4629      	mov	r1, r5
 8006f36:	4638      	mov	r0, r7
 8006f38:	47c0      	blx	r8
 8006f3a:	4306      	orrs	r6, r0
 8006f3c:	3568      	adds	r5, #104	@ 0x68
 8006f3e:	e7e9      	b.n	8006f14 <_fwalk_sglue+0x10>

08006f40 <siprintf>:
 8006f40:	b40e      	push	{r1, r2, r3}
 8006f42:	b500      	push	{lr}
 8006f44:	b09c      	sub	sp, #112	@ 0x70
 8006f46:	ab1d      	add	r3, sp, #116	@ 0x74
 8006f48:	9002      	str	r0, [sp, #8]
 8006f4a:	9006      	str	r0, [sp, #24]
 8006f4c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006f50:	4809      	ldr	r0, [pc, #36]	@ (8006f78 <siprintf+0x38>)
 8006f52:	9107      	str	r1, [sp, #28]
 8006f54:	9104      	str	r1, [sp, #16]
 8006f56:	4909      	ldr	r1, [pc, #36]	@ (8006f7c <siprintf+0x3c>)
 8006f58:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f5c:	9105      	str	r1, [sp, #20]
 8006f5e:	6800      	ldr	r0, [r0, #0]
 8006f60:	9301      	str	r3, [sp, #4]
 8006f62:	a902      	add	r1, sp, #8
 8006f64:	f001 fbfa 	bl	800875c <_svfiprintf_r>
 8006f68:	9b02      	ldr	r3, [sp, #8]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	701a      	strb	r2, [r3, #0]
 8006f6e:	b01c      	add	sp, #112	@ 0x70
 8006f70:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f74:	b003      	add	sp, #12
 8006f76:	4770      	bx	lr
 8006f78:	20000018 	.word	0x20000018
 8006f7c:	ffff0208 	.word	0xffff0208

08006f80 <__sread>:
 8006f80:	b510      	push	{r4, lr}
 8006f82:	460c      	mov	r4, r1
 8006f84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f88:	f000 f86c 	bl	8007064 <_read_r>
 8006f8c:	2800      	cmp	r0, #0
 8006f8e:	bfab      	itete	ge
 8006f90:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006f92:	89a3      	ldrhlt	r3, [r4, #12]
 8006f94:	181b      	addge	r3, r3, r0
 8006f96:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006f9a:	bfac      	ite	ge
 8006f9c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006f9e:	81a3      	strhlt	r3, [r4, #12]
 8006fa0:	bd10      	pop	{r4, pc}

08006fa2 <__swrite>:
 8006fa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fa6:	461f      	mov	r7, r3
 8006fa8:	898b      	ldrh	r3, [r1, #12]
 8006faa:	05db      	lsls	r3, r3, #23
 8006fac:	4605      	mov	r5, r0
 8006fae:	460c      	mov	r4, r1
 8006fb0:	4616      	mov	r6, r2
 8006fb2:	d505      	bpl.n	8006fc0 <__swrite+0x1e>
 8006fb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fb8:	2302      	movs	r3, #2
 8006fba:	2200      	movs	r2, #0
 8006fbc:	f000 f840 	bl	8007040 <_lseek_r>
 8006fc0:	89a3      	ldrh	r3, [r4, #12]
 8006fc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006fc6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006fca:	81a3      	strh	r3, [r4, #12]
 8006fcc:	4632      	mov	r2, r6
 8006fce:	463b      	mov	r3, r7
 8006fd0:	4628      	mov	r0, r5
 8006fd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006fd6:	f000 b857 	b.w	8007088 <_write_r>

08006fda <__sseek>:
 8006fda:	b510      	push	{r4, lr}
 8006fdc:	460c      	mov	r4, r1
 8006fde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fe2:	f000 f82d 	bl	8007040 <_lseek_r>
 8006fe6:	1c43      	adds	r3, r0, #1
 8006fe8:	89a3      	ldrh	r3, [r4, #12]
 8006fea:	bf15      	itete	ne
 8006fec:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006fee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006ff2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006ff6:	81a3      	strheq	r3, [r4, #12]
 8006ff8:	bf18      	it	ne
 8006ffa:	81a3      	strhne	r3, [r4, #12]
 8006ffc:	bd10      	pop	{r4, pc}

08006ffe <__sclose>:
 8006ffe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007002:	f000 b80d 	b.w	8007020 <_close_r>

08007006 <memset>:
 8007006:	4402      	add	r2, r0
 8007008:	4603      	mov	r3, r0
 800700a:	4293      	cmp	r3, r2
 800700c:	d100      	bne.n	8007010 <memset+0xa>
 800700e:	4770      	bx	lr
 8007010:	f803 1b01 	strb.w	r1, [r3], #1
 8007014:	e7f9      	b.n	800700a <memset+0x4>
	...

08007018 <_localeconv_r>:
 8007018:	4800      	ldr	r0, [pc, #0]	@ (800701c <_localeconv_r+0x4>)
 800701a:	4770      	bx	lr
 800701c:	20000158 	.word	0x20000158

08007020 <_close_r>:
 8007020:	b538      	push	{r3, r4, r5, lr}
 8007022:	4d06      	ldr	r5, [pc, #24]	@ (800703c <_close_r+0x1c>)
 8007024:	2300      	movs	r3, #0
 8007026:	4604      	mov	r4, r0
 8007028:	4608      	mov	r0, r1
 800702a:	602b      	str	r3, [r5, #0]
 800702c:	f7fb fa9c 	bl	8002568 <_close>
 8007030:	1c43      	adds	r3, r0, #1
 8007032:	d102      	bne.n	800703a <_close_r+0x1a>
 8007034:	682b      	ldr	r3, [r5, #0]
 8007036:	b103      	cbz	r3, 800703a <_close_r+0x1a>
 8007038:	6023      	str	r3, [r4, #0]
 800703a:	bd38      	pop	{r3, r4, r5, pc}
 800703c:	20000520 	.word	0x20000520

08007040 <_lseek_r>:
 8007040:	b538      	push	{r3, r4, r5, lr}
 8007042:	4d07      	ldr	r5, [pc, #28]	@ (8007060 <_lseek_r+0x20>)
 8007044:	4604      	mov	r4, r0
 8007046:	4608      	mov	r0, r1
 8007048:	4611      	mov	r1, r2
 800704a:	2200      	movs	r2, #0
 800704c:	602a      	str	r2, [r5, #0]
 800704e:	461a      	mov	r2, r3
 8007050:	f7fb fab1 	bl	80025b6 <_lseek>
 8007054:	1c43      	adds	r3, r0, #1
 8007056:	d102      	bne.n	800705e <_lseek_r+0x1e>
 8007058:	682b      	ldr	r3, [r5, #0]
 800705a:	b103      	cbz	r3, 800705e <_lseek_r+0x1e>
 800705c:	6023      	str	r3, [r4, #0]
 800705e:	bd38      	pop	{r3, r4, r5, pc}
 8007060:	20000520 	.word	0x20000520

08007064 <_read_r>:
 8007064:	b538      	push	{r3, r4, r5, lr}
 8007066:	4d07      	ldr	r5, [pc, #28]	@ (8007084 <_read_r+0x20>)
 8007068:	4604      	mov	r4, r0
 800706a:	4608      	mov	r0, r1
 800706c:	4611      	mov	r1, r2
 800706e:	2200      	movs	r2, #0
 8007070:	602a      	str	r2, [r5, #0]
 8007072:	461a      	mov	r2, r3
 8007074:	f7fb fa3f 	bl	80024f6 <_read>
 8007078:	1c43      	adds	r3, r0, #1
 800707a:	d102      	bne.n	8007082 <_read_r+0x1e>
 800707c:	682b      	ldr	r3, [r5, #0]
 800707e:	b103      	cbz	r3, 8007082 <_read_r+0x1e>
 8007080:	6023      	str	r3, [r4, #0]
 8007082:	bd38      	pop	{r3, r4, r5, pc}
 8007084:	20000520 	.word	0x20000520

08007088 <_write_r>:
 8007088:	b538      	push	{r3, r4, r5, lr}
 800708a:	4d07      	ldr	r5, [pc, #28]	@ (80070a8 <_write_r+0x20>)
 800708c:	4604      	mov	r4, r0
 800708e:	4608      	mov	r0, r1
 8007090:	4611      	mov	r1, r2
 8007092:	2200      	movs	r2, #0
 8007094:	602a      	str	r2, [r5, #0]
 8007096:	461a      	mov	r2, r3
 8007098:	f7fb fa4a 	bl	8002530 <_write>
 800709c:	1c43      	adds	r3, r0, #1
 800709e:	d102      	bne.n	80070a6 <_write_r+0x1e>
 80070a0:	682b      	ldr	r3, [r5, #0]
 80070a2:	b103      	cbz	r3, 80070a6 <_write_r+0x1e>
 80070a4:	6023      	str	r3, [r4, #0]
 80070a6:	bd38      	pop	{r3, r4, r5, pc}
 80070a8:	20000520 	.word	0x20000520

080070ac <__errno>:
 80070ac:	4b01      	ldr	r3, [pc, #4]	@ (80070b4 <__errno+0x8>)
 80070ae:	6818      	ldr	r0, [r3, #0]
 80070b0:	4770      	bx	lr
 80070b2:	bf00      	nop
 80070b4:	20000018 	.word	0x20000018

080070b8 <__libc_init_array>:
 80070b8:	b570      	push	{r4, r5, r6, lr}
 80070ba:	4d0d      	ldr	r5, [pc, #52]	@ (80070f0 <__libc_init_array+0x38>)
 80070bc:	4c0d      	ldr	r4, [pc, #52]	@ (80070f4 <__libc_init_array+0x3c>)
 80070be:	1b64      	subs	r4, r4, r5
 80070c0:	10a4      	asrs	r4, r4, #2
 80070c2:	2600      	movs	r6, #0
 80070c4:	42a6      	cmp	r6, r4
 80070c6:	d109      	bne.n	80070dc <__libc_init_array+0x24>
 80070c8:	4d0b      	ldr	r5, [pc, #44]	@ (80070f8 <__libc_init_array+0x40>)
 80070ca:	4c0c      	ldr	r4, [pc, #48]	@ (80070fc <__libc_init_array+0x44>)
 80070cc:	f002 f864 	bl	8009198 <_init>
 80070d0:	1b64      	subs	r4, r4, r5
 80070d2:	10a4      	asrs	r4, r4, #2
 80070d4:	2600      	movs	r6, #0
 80070d6:	42a6      	cmp	r6, r4
 80070d8:	d105      	bne.n	80070e6 <__libc_init_array+0x2e>
 80070da:	bd70      	pop	{r4, r5, r6, pc}
 80070dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80070e0:	4798      	blx	r3
 80070e2:	3601      	adds	r6, #1
 80070e4:	e7ee      	b.n	80070c4 <__libc_init_array+0xc>
 80070e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80070ea:	4798      	blx	r3
 80070ec:	3601      	adds	r6, #1
 80070ee:	e7f2      	b.n	80070d6 <__libc_init_array+0x1e>
 80070f0:	08009580 	.word	0x08009580
 80070f4:	08009580 	.word	0x08009580
 80070f8:	08009580 	.word	0x08009580
 80070fc:	08009584 	.word	0x08009584

08007100 <__retarget_lock_init_recursive>:
 8007100:	4770      	bx	lr

08007102 <__retarget_lock_acquire_recursive>:
 8007102:	4770      	bx	lr

08007104 <__retarget_lock_release_recursive>:
 8007104:	4770      	bx	lr

08007106 <quorem>:
 8007106:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800710a:	6903      	ldr	r3, [r0, #16]
 800710c:	690c      	ldr	r4, [r1, #16]
 800710e:	42a3      	cmp	r3, r4
 8007110:	4607      	mov	r7, r0
 8007112:	db7e      	blt.n	8007212 <quorem+0x10c>
 8007114:	3c01      	subs	r4, #1
 8007116:	f101 0814 	add.w	r8, r1, #20
 800711a:	00a3      	lsls	r3, r4, #2
 800711c:	f100 0514 	add.w	r5, r0, #20
 8007120:	9300      	str	r3, [sp, #0]
 8007122:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007126:	9301      	str	r3, [sp, #4]
 8007128:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800712c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007130:	3301      	adds	r3, #1
 8007132:	429a      	cmp	r2, r3
 8007134:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007138:	fbb2 f6f3 	udiv	r6, r2, r3
 800713c:	d32e      	bcc.n	800719c <quorem+0x96>
 800713e:	f04f 0a00 	mov.w	sl, #0
 8007142:	46c4      	mov	ip, r8
 8007144:	46ae      	mov	lr, r5
 8007146:	46d3      	mov	fp, sl
 8007148:	f85c 3b04 	ldr.w	r3, [ip], #4
 800714c:	b298      	uxth	r0, r3
 800714e:	fb06 a000 	mla	r0, r6, r0, sl
 8007152:	0c02      	lsrs	r2, r0, #16
 8007154:	0c1b      	lsrs	r3, r3, #16
 8007156:	fb06 2303 	mla	r3, r6, r3, r2
 800715a:	f8de 2000 	ldr.w	r2, [lr]
 800715e:	b280      	uxth	r0, r0
 8007160:	b292      	uxth	r2, r2
 8007162:	1a12      	subs	r2, r2, r0
 8007164:	445a      	add	r2, fp
 8007166:	f8de 0000 	ldr.w	r0, [lr]
 800716a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800716e:	b29b      	uxth	r3, r3
 8007170:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007174:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007178:	b292      	uxth	r2, r2
 800717a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800717e:	45e1      	cmp	r9, ip
 8007180:	f84e 2b04 	str.w	r2, [lr], #4
 8007184:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007188:	d2de      	bcs.n	8007148 <quorem+0x42>
 800718a:	9b00      	ldr	r3, [sp, #0]
 800718c:	58eb      	ldr	r3, [r5, r3]
 800718e:	b92b      	cbnz	r3, 800719c <quorem+0x96>
 8007190:	9b01      	ldr	r3, [sp, #4]
 8007192:	3b04      	subs	r3, #4
 8007194:	429d      	cmp	r5, r3
 8007196:	461a      	mov	r2, r3
 8007198:	d32f      	bcc.n	80071fa <quorem+0xf4>
 800719a:	613c      	str	r4, [r7, #16]
 800719c:	4638      	mov	r0, r7
 800719e:	f001 f979 	bl	8008494 <__mcmp>
 80071a2:	2800      	cmp	r0, #0
 80071a4:	db25      	blt.n	80071f2 <quorem+0xec>
 80071a6:	4629      	mov	r1, r5
 80071a8:	2000      	movs	r0, #0
 80071aa:	f858 2b04 	ldr.w	r2, [r8], #4
 80071ae:	f8d1 c000 	ldr.w	ip, [r1]
 80071b2:	fa1f fe82 	uxth.w	lr, r2
 80071b6:	fa1f f38c 	uxth.w	r3, ip
 80071ba:	eba3 030e 	sub.w	r3, r3, lr
 80071be:	4403      	add	r3, r0
 80071c0:	0c12      	lsrs	r2, r2, #16
 80071c2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80071c6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80071ca:	b29b      	uxth	r3, r3
 80071cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80071d0:	45c1      	cmp	r9, r8
 80071d2:	f841 3b04 	str.w	r3, [r1], #4
 80071d6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80071da:	d2e6      	bcs.n	80071aa <quorem+0xa4>
 80071dc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80071e0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80071e4:	b922      	cbnz	r2, 80071f0 <quorem+0xea>
 80071e6:	3b04      	subs	r3, #4
 80071e8:	429d      	cmp	r5, r3
 80071ea:	461a      	mov	r2, r3
 80071ec:	d30b      	bcc.n	8007206 <quorem+0x100>
 80071ee:	613c      	str	r4, [r7, #16]
 80071f0:	3601      	adds	r6, #1
 80071f2:	4630      	mov	r0, r6
 80071f4:	b003      	add	sp, #12
 80071f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071fa:	6812      	ldr	r2, [r2, #0]
 80071fc:	3b04      	subs	r3, #4
 80071fe:	2a00      	cmp	r2, #0
 8007200:	d1cb      	bne.n	800719a <quorem+0x94>
 8007202:	3c01      	subs	r4, #1
 8007204:	e7c6      	b.n	8007194 <quorem+0x8e>
 8007206:	6812      	ldr	r2, [r2, #0]
 8007208:	3b04      	subs	r3, #4
 800720a:	2a00      	cmp	r2, #0
 800720c:	d1ef      	bne.n	80071ee <quorem+0xe8>
 800720e:	3c01      	subs	r4, #1
 8007210:	e7ea      	b.n	80071e8 <quorem+0xe2>
 8007212:	2000      	movs	r0, #0
 8007214:	e7ee      	b.n	80071f4 <quorem+0xee>
	...

08007218 <_dtoa_r>:
 8007218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800721c:	69c7      	ldr	r7, [r0, #28]
 800721e:	b099      	sub	sp, #100	@ 0x64
 8007220:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007224:	ec55 4b10 	vmov	r4, r5, d0
 8007228:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800722a:	9109      	str	r1, [sp, #36]	@ 0x24
 800722c:	4683      	mov	fp, r0
 800722e:	920e      	str	r2, [sp, #56]	@ 0x38
 8007230:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007232:	b97f      	cbnz	r7, 8007254 <_dtoa_r+0x3c>
 8007234:	2010      	movs	r0, #16
 8007236:	f000 fdfd 	bl	8007e34 <malloc>
 800723a:	4602      	mov	r2, r0
 800723c:	f8cb 001c 	str.w	r0, [fp, #28]
 8007240:	b920      	cbnz	r0, 800724c <_dtoa_r+0x34>
 8007242:	4ba7      	ldr	r3, [pc, #668]	@ (80074e0 <_dtoa_r+0x2c8>)
 8007244:	21ef      	movs	r1, #239	@ 0xef
 8007246:	48a7      	ldr	r0, [pc, #668]	@ (80074e4 <_dtoa_r+0x2cc>)
 8007248:	f001 fc68 	bl	8008b1c <__assert_func>
 800724c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007250:	6007      	str	r7, [r0, #0]
 8007252:	60c7      	str	r7, [r0, #12]
 8007254:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007258:	6819      	ldr	r1, [r3, #0]
 800725a:	b159      	cbz	r1, 8007274 <_dtoa_r+0x5c>
 800725c:	685a      	ldr	r2, [r3, #4]
 800725e:	604a      	str	r2, [r1, #4]
 8007260:	2301      	movs	r3, #1
 8007262:	4093      	lsls	r3, r2
 8007264:	608b      	str	r3, [r1, #8]
 8007266:	4658      	mov	r0, fp
 8007268:	f000 feda 	bl	8008020 <_Bfree>
 800726c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007270:	2200      	movs	r2, #0
 8007272:	601a      	str	r2, [r3, #0]
 8007274:	1e2b      	subs	r3, r5, #0
 8007276:	bfb9      	ittee	lt
 8007278:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800727c:	9303      	strlt	r3, [sp, #12]
 800727e:	2300      	movge	r3, #0
 8007280:	6033      	strge	r3, [r6, #0]
 8007282:	9f03      	ldr	r7, [sp, #12]
 8007284:	4b98      	ldr	r3, [pc, #608]	@ (80074e8 <_dtoa_r+0x2d0>)
 8007286:	bfbc      	itt	lt
 8007288:	2201      	movlt	r2, #1
 800728a:	6032      	strlt	r2, [r6, #0]
 800728c:	43bb      	bics	r3, r7
 800728e:	d112      	bne.n	80072b6 <_dtoa_r+0x9e>
 8007290:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007292:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007296:	6013      	str	r3, [r2, #0]
 8007298:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800729c:	4323      	orrs	r3, r4
 800729e:	f000 854d 	beq.w	8007d3c <_dtoa_r+0xb24>
 80072a2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80072a4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80074fc <_dtoa_r+0x2e4>
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	f000 854f 	beq.w	8007d4c <_dtoa_r+0xb34>
 80072ae:	f10a 0303 	add.w	r3, sl, #3
 80072b2:	f000 bd49 	b.w	8007d48 <_dtoa_r+0xb30>
 80072b6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80072ba:	2200      	movs	r2, #0
 80072bc:	ec51 0b17 	vmov	r0, r1, d7
 80072c0:	2300      	movs	r3, #0
 80072c2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80072c6:	f7f9 fc2f 	bl	8000b28 <__aeabi_dcmpeq>
 80072ca:	4680      	mov	r8, r0
 80072cc:	b158      	cbz	r0, 80072e6 <_dtoa_r+0xce>
 80072ce:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80072d0:	2301      	movs	r3, #1
 80072d2:	6013      	str	r3, [r2, #0]
 80072d4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80072d6:	b113      	cbz	r3, 80072de <_dtoa_r+0xc6>
 80072d8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80072da:	4b84      	ldr	r3, [pc, #528]	@ (80074ec <_dtoa_r+0x2d4>)
 80072dc:	6013      	str	r3, [r2, #0]
 80072de:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007500 <_dtoa_r+0x2e8>
 80072e2:	f000 bd33 	b.w	8007d4c <_dtoa_r+0xb34>
 80072e6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80072ea:	aa16      	add	r2, sp, #88	@ 0x58
 80072ec:	a917      	add	r1, sp, #92	@ 0x5c
 80072ee:	4658      	mov	r0, fp
 80072f0:	f001 f980 	bl	80085f4 <__d2b>
 80072f4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80072f8:	4681      	mov	r9, r0
 80072fa:	2e00      	cmp	r6, #0
 80072fc:	d077      	beq.n	80073ee <_dtoa_r+0x1d6>
 80072fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007300:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007304:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007308:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800730c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007310:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007314:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007318:	4619      	mov	r1, r3
 800731a:	2200      	movs	r2, #0
 800731c:	4b74      	ldr	r3, [pc, #464]	@ (80074f0 <_dtoa_r+0x2d8>)
 800731e:	f7f8 ffe3 	bl	80002e8 <__aeabi_dsub>
 8007322:	a369      	add	r3, pc, #420	@ (adr r3, 80074c8 <_dtoa_r+0x2b0>)
 8007324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007328:	f7f9 f996 	bl	8000658 <__aeabi_dmul>
 800732c:	a368      	add	r3, pc, #416	@ (adr r3, 80074d0 <_dtoa_r+0x2b8>)
 800732e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007332:	f7f8 ffdb 	bl	80002ec <__adddf3>
 8007336:	4604      	mov	r4, r0
 8007338:	4630      	mov	r0, r6
 800733a:	460d      	mov	r5, r1
 800733c:	f7f9 f922 	bl	8000584 <__aeabi_i2d>
 8007340:	a365      	add	r3, pc, #404	@ (adr r3, 80074d8 <_dtoa_r+0x2c0>)
 8007342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007346:	f7f9 f987 	bl	8000658 <__aeabi_dmul>
 800734a:	4602      	mov	r2, r0
 800734c:	460b      	mov	r3, r1
 800734e:	4620      	mov	r0, r4
 8007350:	4629      	mov	r1, r5
 8007352:	f7f8 ffcb 	bl	80002ec <__adddf3>
 8007356:	4604      	mov	r4, r0
 8007358:	460d      	mov	r5, r1
 800735a:	f7f9 fc2d 	bl	8000bb8 <__aeabi_d2iz>
 800735e:	2200      	movs	r2, #0
 8007360:	4607      	mov	r7, r0
 8007362:	2300      	movs	r3, #0
 8007364:	4620      	mov	r0, r4
 8007366:	4629      	mov	r1, r5
 8007368:	f7f9 fbe8 	bl	8000b3c <__aeabi_dcmplt>
 800736c:	b140      	cbz	r0, 8007380 <_dtoa_r+0x168>
 800736e:	4638      	mov	r0, r7
 8007370:	f7f9 f908 	bl	8000584 <__aeabi_i2d>
 8007374:	4622      	mov	r2, r4
 8007376:	462b      	mov	r3, r5
 8007378:	f7f9 fbd6 	bl	8000b28 <__aeabi_dcmpeq>
 800737c:	b900      	cbnz	r0, 8007380 <_dtoa_r+0x168>
 800737e:	3f01      	subs	r7, #1
 8007380:	2f16      	cmp	r7, #22
 8007382:	d851      	bhi.n	8007428 <_dtoa_r+0x210>
 8007384:	4b5b      	ldr	r3, [pc, #364]	@ (80074f4 <_dtoa_r+0x2dc>)
 8007386:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800738a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800738e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007392:	f7f9 fbd3 	bl	8000b3c <__aeabi_dcmplt>
 8007396:	2800      	cmp	r0, #0
 8007398:	d048      	beq.n	800742c <_dtoa_r+0x214>
 800739a:	3f01      	subs	r7, #1
 800739c:	2300      	movs	r3, #0
 800739e:	9312      	str	r3, [sp, #72]	@ 0x48
 80073a0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80073a2:	1b9b      	subs	r3, r3, r6
 80073a4:	1e5a      	subs	r2, r3, #1
 80073a6:	bf44      	itt	mi
 80073a8:	f1c3 0801 	rsbmi	r8, r3, #1
 80073ac:	2300      	movmi	r3, #0
 80073ae:	9208      	str	r2, [sp, #32]
 80073b0:	bf54      	ite	pl
 80073b2:	f04f 0800 	movpl.w	r8, #0
 80073b6:	9308      	strmi	r3, [sp, #32]
 80073b8:	2f00      	cmp	r7, #0
 80073ba:	db39      	blt.n	8007430 <_dtoa_r+0x218>
 80073bc:	9b08      	ldr	r3, [sp, #32]
 80073be:	970f      	str	r7, [sp, #60]	@ 0x3c
 80073c0:	443b      	add	r3, r7
 80073c2:	9308      	str	r3, [sp, #32]
 80073c4:	2300      	movs	r3, #0
 80073c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80073c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073ca:	2b09      	cmp	r3, #9
 80073cc:	d864      	bhi.n	8007498 <_dtoa_r+0x280>
 80073ce:	2b05      	cmp	r3, #5
 80073d0:	bfc4      	itt	gt
 80073d2:	3b04      	subgt	r3, #4
 80073d4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80073d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073d8:	f1a3 0302 	sub.w	r3, r3, #2
 80073dc:	bfcc      	ite	gt
 80073de:	2400      	movgt	r4, #0
 80073e0:	2401      	movle	r4, #1
 80073e2:	2b03      	cmp	r3, #3
 80073e4:	d863      	bhi.n	80074ae <_dtoa_r+0x296>
 80073e6:	e8df f003 	tbb	[pc, r3]
 80073ea:	372a      	.short	0x372a
 80073ec:	5535      	.short	0x5535
 80073ee:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80073f2:	441e      	add	r6, r3
 80073f4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80073f8:	2b20      	cmp	r3, #32
 80073fa:	bfc1      	itttt	gt
 80073fc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007400:	409f      	lslgt	r7, r3
 8007402:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007406:	fa24 f303 	lsrgt.w	r3, r4, r3
 800740a:	bfd6      	itet	le
 800740c:	f1c3 0320 	rsble	r3, r3, #32
 8007410:	ea47 0003 	orrgt.w	r0, r7, r3
 8007414:	fa04 f003 	lslle.w	r0, r4, r3
 8007418:	f7f9 f8a4 	bl	8000564 <__aeabi_ui2d>
 800741c:	2201      	movs	r2, #1
 800741e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007422:	3e01      	subs	r6, #1
 8007424:	9214      	str	r2, [sp, #80]	@ 0x50
 8007426:	e777      	b.n	8007318 <_dtoa_r+0x100>
 8007428:	2301      	movs	r3, #1
 800742a:	e7b8      	b.n	800739e <_dtoa_r+0x186>
 800742c:	9012      	str	r0, [sp, #72]	@ 0x48
 800742e:	e7b7      	b.n	80073a0 <_dtoa_r+0x188>
 8007430:	427b      	negs	r3, r7
 8007432:	930a      	str	r3, [sp, #40]	@ 0x28
 8007434:	2300      	movs	r3, #0
 8007436:	eba8 0807 	sub.w	r8, r8, r7
 800743a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800743c:	e7c4      	b.n	80073c8 <_dtoa_r+0x1b0>
 800743e:	2300      	movs	r3, #0
 8007440:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007442:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007444:	2b00      	cmp	r3, #0
 8007446:	dc35      	bgt.n	80074b4 <_dtoa_r+0x29c>
 8007448:	2301      	movs	r3, #1
 800744a:	9300      	str	r3, [sp, #0]
 800744c:	9307      	str	r3, [sp, #28]
 800744e:	461a      	mov	r2, r3
 8007450:	920e      	str	r2, [sp, #56]	@ 0x38
 8007452:	e00b      	b.n	800746c <_dtoa_r+0x254>
 8007454:	2301      	movs	r3, #1
 8007456:	e7f3      	b.n	8007440 <_dtoa_r+0x228>
 8007458:	2300      	movs	r3, #0
 800745a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800745c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800745e:	18fb      	adds	r3, r7, r3
 8007460:	9300      	str	r3, [sp, #0]
 8007462:	3301      	adds	r3, #1
 8007464:	2b01      	cmp	r3, #1
 8007466:	9307      	str	r3, [sp, #28]
 8007468:	bfb8      	it	lt
 800746a:	2301      	movlt	r3, #1
 800746c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007470:	2100      	movs	r1, #0
 8007472:	2204      	movs	r2, #4
 8007474:	f102 0514 	add.w	r5, r2, #20
 8007478:	429d      	cmp	r5, r3
 800747a:	d91f      	bls.n	80074bc <_dtoa_r+0x2a4>
 800747c:	6041      	str	r1, [r0, #4]
 800747e:	4658      	mov	r0, fp
 8007480:	f000 fd8e 	bl	8007fa0 <_Balloc>
 8007484:	4682      	mov	sl, r0
 8007486:	2800      	cmp	r0, #0
 8007488:	d13c      	bne.n	8007504 <_dtoa_r+0x2ec>
 800748a:	4b1b      	ldr	r3, [pc, #108]	@ (80074f8 <_dtoa_r+0x2e0>)
 800748c:	4602      	mov	r2, r0
 800748e:	f240 11af 	movw	r1, #431	@ 0x1af
 8007492:	e6d8      	b.n	8007246 <_dtoa_r+0x2e>
 8007494:	2301      	movs	r3, #1
 8007496:	e7e0      	b.n	800745a <_dtoa_r+0x242>
 8007498:	2401      	movs	r4, #1
 800749a:	2300      	movs	r3, #0
 800749c:	9309      	str	r3, [sp, #36]	@ 0x24
 800749e:	940b      	str	r4, [sp, #44]	@ 0x2c
 80074a0:	f04f 33ff 	mov.w	r3, #4294967295
 80074a4:	9300      	str	r3, [sp, #0]
 80074a6:	9307      	str	r3, [sp, #28]
 80074a8:	2200      	movs	r2, #0
 80074aa:	2312      	movs	r3, #18
 80074ac:	e7d0      	b.n	8007450 <_dtoa_r+0x238>
 80074ae:	2301      	movs	r3, #1
 80074b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80074b2:	e7f5      	b.n	80074a0 <_dtoa_r+0x288>
 80074b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80074b6:	9300      	str	r3, [sp, #0]
 80074b8:	9307      	str	r3, [sp, #28]
 80074ba:	e7d7      	b.n	800746c <_dtoa_r+0x254>
 80074bc:	3101      	adds	r1, #1
 80074be:	0052      	lsls	r2, r2, #1
 80074c0:	e7d8      	b.n	8007474 <_dtoa_r+0x25c>
 80074c2:	bf00      	nop
 80074c4:	f3af 8000 	nop.w
 80074c8:	636f4361 	.word	0x636f4361
 80074cc:	3fd287a7 	.word	0x3fd287a7
 80074d0:	8b60c8b3 	.word	0x8b60c8b3
 80074d4:	3fc68a28 	.word	0x3fc68a28
 80074d8:	509f79fb 	.word	0x509f79fb
 80074dc:	3fd34413 	.word	0x3fd34413
 80074e0:	08009249 	.word	0x08009249
 80074e4:	08009260 	.word	0x08009260
 80074e8:	7ff00000 	.word	0x7ff00000
 80074ec:	08009219 	.word	0x08009219
 80074f0:	3ff80000 	.word	0x3ff80000
 80074f4:	08009358 	.word	0x08009358
 80074f8:	080092b8 	.word	0x080092b8
 80074fc:	08009245 	.word	0x08009245
 8007500:	08009218 	.word	0x08009218
 8007504:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007508:	6018      	str	r0, [r3, #0]
 800750a:	9b07      	ldr	r3, [sp, #28]
 800750c:	2b0e      	cmp	r3, #14
 800750e:	f200 80a4 	bhi.w	800765a <_dtoa_r+0x442>
 8007512:	2c00      	cmp	r4, #0
 8007514:	f000 80a1 	beq.w	800765a <_dtoa_r+0x442>
 8007518:	2f00      	cmp	r7, #0
 800751a:	dd33      	ble.n	8007584 <_dtoa_r+0x36c>
 800751c:	4bad      	ldr	r3, [pc, #692]	@ (80077d4 <_dtoa_r+0x5bc>)
 800751e:	f007 020f 	and.w	r2, r7, #15
 8007522:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007526:	ed93 7b00 	vldr	d7, [r3]
 800752a:	05f8      	lsls	r0, r7, #23
 800752c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007530:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007534:	d516      	bpl.n	8007564 <_dtoa_r+0x34c>
 8007536:	4ba8      	ldr	r3, [pc, #672]	@ (80077d8 <_dtoa_r+0x5c0>)
 8007538:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800753c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007540:	f7f9 f9b4 	bl	80008ac <__aeabi_ddiv>
 8007544:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007548:	f004 040f 	and.w	r4, r4, #15
 800754c:	2603      	movs	r6, #3
 800754e:	4da2      	ldr	r5, [pc, #648]	@ (80077d8 <_dtoa_r+0x5c0>)
 8007550:	b954      	cbnz	r4, 8007568 <_dtoa_r+0x350>
 8007552:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007556:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800755a:	f7f9 f9a7 	bl	80008ac <__aeabi_ddiv>
 800755e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007562:	e028      	b.n	80075b6 <_dtoa_r+0x39e>
 8007564:	2602      	movs	r6, #2
 8007566:	e7f2      	b.n	800754e <_dtoa_r+0x336>
 8007568:	07e1      	lsls	r1, r4, #31
 800756a:	d508      	bpl.n	800757e <_dtoa_r+0x366>
 800756c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007570:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007574:	f7f9 f870 	bl	8000658 <__aeabi_dmul>
 8007578:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800757c:	3601      	adds	r6, #1
 800757e:	1064      	asrs	r4, r4, #1
 8007580:	3508      	adds	r5, #8
 8007582:	e7e5      	b.n	8007550 <_dtoa_r+0x338>
 8007584:	f000 80d2 	beq.w	800772c <_dtoa_r+0x514>
 8007588:	427c      	negs	r4, r7
 800758a:	4b92      	ldr	r3, [pc, #584]	@ (80077d4 <_dtoa_r+0x5bc>)
 800758c:	4d92      	ldr	r5, [pc, #584]	@ (80077d8 <_dtoa_r+0x5c0>)
 800758e:	f004 020f 	and.w	r2, r4, #15
 8007592:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800759a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800759e:	f7f9 f85b 	bl	8000658 <__aeabi_dmul>
 80075a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075a6:	1124      	asrs	r4, r4, #4
 80075a8:	2300      	movs	r3, #0
 80075aa:	2602      	movs	r6, #2
 80075ac:	2c00      	cmp	r4, #0
 80075ae:	f040 80b2 	bne.w	8007716 <_dtoa_r+0x4fe>
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d1d3      	bne.n	800755e <_dtoa_r+0x346>
 80075b6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80075b8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	f000 80b7 	beq.w	8007730 <_dtoa_r+0x518>
 80075c2:	4b86      	ldr	r3, [pc, #536]	@ (80077dc <_dtoa_r+0x5c4>)
 80075c4:	2200      	movs	r2, #0
 80075c6:	4620      	mov	r0, r4
 80075c8:	4629      	mov	r1, r5
 80075ca:	f7f9 fab7 	bl	8000b3c <__aeabi_dcmplt>
 80075ce:	2800      	cmp	r0, #0
 80075d0:	f000 80ae 	beq.w	8007730 <_dtoa_r+0x518>
 80075d4:	9b07      	ldr	r3, [sp, #28]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	f000 80aa 	beq.w	8007730 <_dtoa_r+0x518>
 80075dc:	9b00      	ldr	r3, [sp, #0]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	dd37      	ble.n	8007652 <_dtoa_r+0x43a>
 80075e2:	1e7b      	subs	r3, r7, #1
 80075e4:	9304      	str	r3, [sp, #16]
 80075e6:	4620      	mov	r0, r4
 80075e8:	4b7d      	ldr	r3, [pc, #500]	@ (80077e0 <_dtoa_r+0x5c8>)
 80075ea:	2200      	movs	r2, #0
 80075ec:	4629      	mov	r1, r5
 80075ee:	f7f9 f833 	bl	8000658 <__aeabi_dmul>
 80075f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075f6:	9c00      	ldr	r4, [sp, #0]
 80075f8:	3601      	adds	r6, #1
 80075fa:	4630      	mov	r0, r6
 80075fc:	f7f8 ffc2 	bl	8000584 <__aeabi_i2d>
 8007600:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007604:	f7f9 f828 	bl	8000658 <__aeabi_dmul>
 8007608:	4b76      	ldr	r3, [pc, #472]	@ (80077e4 <_dtoa_r+0x5cc>)
 800760a:	2200      	movs	r2, #0
 800760c:	f7f8 fe6e 	bl	80002ec <__adddf3>
 8007610:	4605      	mov	r5, r0
 8007612:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007616:	2c00      	cmp	r4, #0
 8007618:	f040 808d 	bne.w	8007736 <_dtoa_r+0x51e>
 800761c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007620:	4b71      	ldr	r3, [pc, #452]	@ (80077e8 <_dtoa_r+0x5d0>)
 8007622:	2200      	movs	r2, #0
 8007624:	f7f8 fe60 	bl	80002e8 <__aeabi_dsub>
 8007628:	4602      	mov	r2, r0
 800762a:	460b      	mov	r3, r1
 800762c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007630:	462a      	mov	r2, r5
 8007632:	4633      	mov	r3, r6
 8007634:	f7f9 faa0 	bl	8000b78 <__aeabi_dcmpgt>
 8007638:	2800      	cmp	r0, #0
 800763a:	f040 828b 	bne.w	8007b54 <_dtoa_r+0x93c>
 800763e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007642:	462a      	mov	r2, r5
 8007644:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007648:	f7f9 fa78 	bl	8000b3c <__aeabi_dcmplt>
 800764c:	2800      	cmp	r0, #0
 800764e:	f040 8128 	bne.w	80078a2 <_dtoa_r+0x68a>
 8007652:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007656:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800765a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800765c:	2b00      	cmp	r3, #0
 800765e:	f2c0 815a 	blt.w	8007916 <_dtoa_r+0x6fe>
 8007662:	2f0e      	cmp	r7, #14
 8007664:	f300 8157 	bgt.w	8007916 <_dtoa_r+0x6fe>
 8007668:	4b5a      	ldr	r3, [pc, #360]	@ (80077d4 <_dtoa_r+0x5bc>)
 800766a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800766e:	ed93 7b00 	vldr	d7, [r3]
 8007672:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007674:	2b00      	cmp	r3, #0
 8007676:	ed8d 7b00 	vstr	d7, [sp]
 800767a:	da03      	bge.n	8007684 <_dtoa_r+0x46c>
 800767c:	9b07      	ldr	r3, [sp, #28]
 800767e:	2b00      	cmp	r3, #0
 8007680:	f340 8101 	ble.w	8007886 <_dtoa_r+0x66e>
 8007684:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007688:	4656      	mov	r6, sl
 800768a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800768e:	4620      	mov	r0, r4
 8007690:	4629      	mov	r1, r5
 8007692:	f7f9 f90b 	bl	80008ac <__aeabi_ddiv>
 8007696:	f7f9 fa8f 	bl	8000bb8 <__aeabi_d2iz>
 800769a:	4680      	mov	r8, r0
 800769c:	f7f8 ff72 	bl	8000584 <__aeabi_i2d>
 80076a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80076a4:	f7f8 ffd8 	bl	8000658 <__aeabi_dmul>
 80076a8:	4602      	mov	r2, r0
 80076aa:	460b      	mov	r3, r1
 80076ac:	4620      	mov	r0, r4
 80076ae:	4629      	mov	r1, r5
 80076b0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80076b4:	f7f8 fe18 	bl	80002e8 <__aeabi_dsub>
 80076b8:	f806 4b01 	strb.w	r4, [r6], #1
 80076bc:	9d07      	ldr	r5, [sp, #28]
 80076be:	eba6 040a 	sub.w	r4, r6, sl
 80076c2:	42a5      	cmp	r5, r4
 80076c4:	4602      	mov	r2, r0
 80076c6:	460b      	mov	r3, r1
 80076c8:	f040 8117 	bne.w	80078fa <_dtoa_r+0x6e2>
 80076cc:	f7f8 fe0e 	bl	80002ec <__adddf3>
 80076d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80076d4:	4604      	mov	r4, r0
 80076d6:	460d      	mov	r5, r1
 80076d8:	f7f9 fa4e 	bl	8000b78 <__aeabi_dcmpgt>
 80076dc:	2800      	cmp	r0, #0
 80076de:	f040 80f9 	bne.w	80078d4 <_dtoa_r+0x6bc>
 80076e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80076e6:	4620      	mov	r0, r4
 80076e8:	4629      	mov	r1, r5
 80076ea:	f7f9 fa1d 	bl	8000b28 <__aeabi_dcmpeq>
 80076ee:	b118      	cbz	r0, 80076f8 <_dtoa_r+0x4e0>
 80076f0:	f018 0f01 	tst.w	r8, #1
 80076f4:	f040 80ee 	bne.w	80078d4 <_dtoa_r+0x6bc>
 80076f8:	4649      	mov	r1, r9
 80076fa:	4658      	mov	r0, fp
 80076fc:	f000 fc90 	bl	8008020 <_Bfree>
 8007700:	2300      	movs	r3, #0
 8007702:	7033      	strb	r3, [r6, #0]
 8007704:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007706:	3701      	adds	r7, #1
 8007708:	601f      	str	r7, [r3, #0]
 800770a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800770c:	2b00      	cmp	r3, #0
 800770e:	f000 831d 	beq.w	8007d4c <_dtoa_r+0xb34>
 8007712:	601e      	str	r6, [r3, #0]
 8007714:	e31a      	b.n	8007d4c <_dtoa_r+0xb34>
 8007716:	07e2      	lsls	r2, r4, #31
 8007718:	d505      	bpl.n	8007726 <_dtoa_r+0x50e>
 800771a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800771e:	f7f8 ff9b 	bl	8000658 <__aeabi_dmul>
 8007722:	3601      	adds	r6, #1
 8007724:	2301      	movs	r3, #1
 8007726:	1064      	asrs	r4, r4, #1
 8007728:	3508      	adds	r5, #8
 800772a:	e73f      	b.n	80075ac <_dtoa_r+0x394>
 800772c:	2602      	movs	r6, #2
 800772e:	e742      	b.n	80075b6 <_dtoa_r+0x39e>
 8007730:	9c07      	ldr	r4, [sp, #28]
 8007732:	9704      	str	r7, [sp, #16]
 8007734:	e761      	b.n	80075fa <_dtoa_r+0x3e2>
 8007736:	4b27      	ldr	r3, [pc, #156]	@ (80077d4 <_dtoa_r+0x5bc>)
 8007738:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800773a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800773e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007742:	4454      	add	r4, sl
 8007744:	2900      	cmp	r1, #0
 8007746:	d053      	beq.n	80077f0 <_dtoa_r+0x5d8>
 8007748:	4928      	ldr	r1, [pc, #160]	@ (80077ec <_dtoa_r+0x5d4>)
 800774a:	2000      	movs	r0, #0
 800774c:	f7f9 f8ae 	bl	80008ac <__aeabi_ddiv>
 8007750:	4633      	mov	r3, r6
 8007752:	462a      	mov	r2, r5
 8007754:	f7f8 fdc8 	bl	80002e8 <__aeabi_dsub>
 8007758:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800775c:	4656      	mov	r6, sl
 800775e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007762:	f7f9 fa29 	bl	8000bb8 <__aeabi_d2iz>
 8007766:	4605      	mov	r5, r0
 8007768:	f7f8 ff0c 	bl	8000584 <__aeabi_i2d>
 800776c:	4602      	mov	r2, r0
 800776e:	460b      	mov	r3, r1
 8007770:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007774:	f7f8 fdb8 	bl	80002e8 <__aeabi_dsub>
 8007778:	3530      	adds	r5, #48	@ 0x30
 800777a:	4602      	mov	r2, r0
 800777c:	460b      	mov	r3, r1
 800777e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007782:	f806 5b01 	strb.w	r5, [r6], #1
 8007786:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800778a:	f7f9 f9d7 	bl	8000b3c <__aeabi_dcmplt>
 800778e:	2800      	cmp	r0, #0
 8007790:	d171      	bne.n	8007876 <_dtoa_r+0x65e>
 8007792:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007796:	4911      	ldr	r1, [pc, #68]	@ (80077dc <_dtoa_r+0x5c4>)
 8007798:	2000      	movs	r0, #0
 800779a:	f7f8 fda5 	bl	80002e8 <__aeabi_dsub>
 800779e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80077a2:	f7f9 f9cb 	bl	8000b3c <__aeabi_dcmplt>
 80077a6:	2800      	cmp	r0, #0
 80077a8:	f040 8095 	bne.w	80078d6 <_dtoa_r+0x6be>
 80077ac:	42a6      	cmp	r6, r4
 80077ae:	f43f af50 	beq.w	8007652 <_dtoa_r+0x43a>
 80077b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80077b6:	4b0a      	ldr	r3, [pc, #40]	@ (80077e0 <_dtoa_r+0x5c8>)
 80077b8:	2200      	movs	r2, #0
 80077ba:	f7f8 ff4d 	bl	8000658 <__aeabi_dmul>
 80077be:	4b08      	ldr	r3, [pc, #32]	@ (80077e0 <_dtoa_r+0x5c8>)
 80077c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80077c4:	2200      	movs	r2, #0
 80077c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077ca:	f7f8 ff45 	bl	8000658 <__aeabi_dmul>
 80077ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80077d2:	e7c4      	b.n	800775e <_dtoa_r+0x546>
 80077d4:	08009358 	.word	0x08009358
 80077d8:	08009330 	.word	0x08009330
 80077dc:	3ff00000 	.word	0x3ff00000
 80077e0:	40240000 	.word	0x40240000
 80077e4:	401c0000 	.word	0x401c0000
 80077e8:	40140000 	.word	0x40140000
 80077ec:	3fe00000 	.word	0x3fe00000
 80077f0:	4631      	mov	r1, r6
 80077f2:	4628      	mov	r0, r5
 80077f4:	f7f8 ff30 	bl	8000658 <__aeabi_dmul>
 80077f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80077fc:	9415      	str	r4, [sp, #84]	@ 0x54
 80077fe:	4656      	mov	r6, sl
 8007800:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007804:	f7f9 f9d8 	bl	8000bb8 <__aeabi_d2iz>
 8007808:	4605      	mov	r5, r0
 800780a:	f7f8 febb 	bl	8000584 <__aeabi_i2d>
 800780e:	4602      	mov	r2, r0
 8007810:	460b      	mov	r3, r1
 8007812:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007816:	f7f8 fd67 	bl	80002e8 <__aeabi_dsub>
 800781a:	3530      	adds	r5, #48	@ 0x30
 800781c:	f806 5b01 	strb.w	r5, [r6], #1
 8007820:	4602      	mov	r2, r0
 8007822:	460b      	mov	r3, r1
 8007824:	42a6      	cmp	r6, r4
 8007826:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800782a:	f04f 0200 	mov.w	r2, #0
 800782e:	d124      	bne.n	800787a <_dtoa_r+0x662>
 8007830:	4bac      	ldr	r3, [pc, #688]	@ (8007ae4 <_dtoa_r+0x8cc>)
 8007832:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007836:	f7f8 fd59 	bl	80002ec <__adddf3>
 800783a:	4602      	mov	r2, r0
 800783c:	460b      	mov	r3, r1
 800783e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007842:	f7f9 f999 	bl	8000b78 <__aeabi_dcmpgt>
 8007846:	2800      	cmp	r0, #0
 8007848:	d145      	bne.n	80078d6 <_dtoa_r+0x6be>
 800784a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800784e:	49a5      	ldr	r1, [pc, #660]	@ (8007ae4 <_dtoa_r+0x8cc>)
 8007850:	2000      	movs	r0, #0
 8007852:	f7f8 fd49 	bl	80002e8 <__aeabi_dsub>
 8007856:	4602      	mov	r2, r0
 8007858:	460b      	mov	r3, r1
 800785a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800785e:	f7f9 f96d 	bl	8000b3c <__aeabi_dcmplt>
 8007862:	2800      	cmp	r0, #0
 8007864:	f43f aef5 	beq.w	8007652 <_dtoa_r+0x43a>
 8007868:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800786a:	1e73      	subs	r3, r6, #1
 800786c:	9315      	str	r3, [sp, #84]	@ 0x54
 800786e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007872:	2b30      	cmp	r3, #48	@ 0x30
 8007874:	d0f8      	beq.n	8007868 <_dtoa_r+0x650>
 8007876:	9f04      	ldr	r7, [sp, #16]
 8007878:	e73e      	b.n	80076f8 <_dtoa_r+0x4e0>
 800787a:	4b9b      	ldr	r3, [pc, #620]	@ (8007ae8 <_dtoa_r+0x8d0>)
 800787c:	f7f8 feec 	bl	8000658 <__aeabi_dmul>
 8007880:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007884:	e7bc      	b.n	8007800 <_dtoa_r+0x5e8>
 8007886:	d10c      	bne.n	80078a2 <_dtoa_r+0x68a>
 8007888:	4b98      	ldr	r3, [pc, #608]	@ (8007aec <_dtoa_r+0x8d4>)
 800788a:	2200      	movs	r2, #0
 800788c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007890:	f7f8 fee2 	bl	8000658 <__aeabi_dmul>
 8007894:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007898:	f7f9 f964 	bl	8000b64 <__aeabi_dcmpge>
 800789c:	2800      	cmp	r0, #0
 800789e:	f000 8157 	beq.w	8007b50 <_dtoa_r+0x938>
 80078a2:	2400      	movs	r4, #0
 80078a4:	4625      	mov	r5, r4
 80078a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80078a8:	43db      	mvns	r3, r3
 80078aa:	9304      	str	r3, [sp, #16]
 80078ac:	4656      	mov	r6, sl
 80078ae:	2700      	movs	r7, #0
 80078b0:	4621      	mov	r1, r4
 80078b2:	4658      	mov	r0, fp
 80078b4:	f000 fbb4 	bl	8008020 <_Bfree>
 80078b8:	2d00      	cmp	r5, #0
 80078ba:	d0dc      	beq.n	8007876 <_dtoa_r+0x65e>
 80078bc:	b12f      	cbz	r7, 80078ca <_dtoa_r+0x6b2>
 80078be:	42af      	cmp	r7, r5
 80078c0:	d003      	beq.n	80078ca <_dtoa_r+0x6b2>
 80078c2:	4639      	mov	r1, r7
 80078c4:	4658      	mov	r0, fp
 80078c6:	f000 fbab 	bl	8008020 <_Bfree>
 80078ca:	4629      	mov	r1, r5
 80078cc:	4658      	mov	r0, fp
 80078ce:	f000 fba7 	bl	8008020 <_Bfree>
 80078d2:	e7d0      	b.n	8007876 <_dtoa_r+0x65e>
 80078d4:	9704      	str	r7, [sp, #16]
 80078d6:	4633      	mov	r3, r6
 80078d8:	461e      	mov	r6, r3
 80078da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80078de:	2a39      	cmp	r2, #57	@ 0x39
 80078e0:	d107      	bne.n	80078f2 <_dtoa_r+0x6da>
 80078e2:	459a      	cmp	sl, r3
 80078e4:	d1f8      	bne.n	80078d8 <_dtoa_r+0x6c0>
 80078e6:	9a04      	ldr	r2, [sp, #16]
 80078e8:	3201      	adds	r2, #1
 80078ea:	9204      	str	r2, [sp, #16]
 80078ec:	2230      	movs	r2, #48	@ 0x30
 80078ee:	f88a 2000 	strb.w	r2, [sl]
 80078f2:	781a      	ldrb	r2, [r3, #0]
 80078f4:	3201      	adds	r2, #1
 80078f6:	701a      	strb	r2, [r3, #0]
 80078f8:	e7bd      	b.n	8007876 <_dtoa_r+0x65e>
 80078fa:	4b7b      	ldr	r3, [pc, #492]	@ (8007ae8 <_dtoa_r+0x8d0>)
 80078fc:	2200      	movs	r2, #0
 80078fe:	f7f8 feab 	bl	8000658 <__aeabi_dmul>
 8007902:	2200      	movs	r2, #0
 8007904:	2300      	movs	r3, #0
 8007906:	4604      	mov	r4, r0
 8007908:	460d      	mov	r5, r1
 800790a:	f7f9 f90d 	bl	8000b28 <__aeabi_dcmpeq>
 800790e:	2800      	cmp	r0, #0
 8007910:	f43f aebb 	beq.w	800768a <_dtoa_r+0x472>
 8007914:	e6f0      	b.n	80076f8 <_dtoa_r+0x4e0>
 8007916:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007918:	2a00      	cmp	r2, #0
 800791a:	f000 80db 	beq.w	8007ad4 <_dtoa_r+0x8bc>
 800791e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007920:	2a01      	cmp	r2, #1
 8007922:	f300 80bf 	bgt.w	8007aa4 <_dtoa_r+0x88c>
 8007926:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007928:	2a00      	cmp	r2, #0
 800792a:	f000 80b7 	beq.w	8007a9c <_dtoa_r+0x884>
 800792e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007932:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007934:	4646      	mov	r6, r8
 8007936:	9a08      	ldr	r2, [sp, #32]
 8007938:	2101      	movs	r1, #1
 800793a:	441a      	add	r2, r3
 800793c:	4658      	mov	r0, fp
 800793e:	4498      	add	r8, r3
 8007940:	9208      	str	r2, [sp, #32]
 8007942:	f000 fc21 	bl	8008188 <__i2b>
 8007946:	4605      	mov	r5, r0
 8007948:	b15e      	cbz	r6, 8007962 <_dtoa_r+0x74a>
 800794a:	9b08      	ldr	r3, [sp, #32]
 800794c:	2b00      	cmp	r3, #0
 800794e:	dd08      	ble.n	8007962 <_dtoa_r+0x74a>
 8007950:	42b3      	cmp	r3, r6
 8007952:	9a08      	ldr	r2, [sp, #32]
 8007954:	bfa8      	it	ge
 8007956:	4633      	movge	r3, r6
 8007958:	eba8 0803 	sub.w	r8, r8, r3
 800795c:	1af6      	subs	r6, r6, r3
 800795e:	1ad3      	subs	r3, r2, r3
 8007960:	9308      	str	r3, [sp, #32]
 8007962:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007964:	b1f3      	cbz	r3, 80079a4 <_dtoa_r+0x78c>
 8007966:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007968:	2b00      	cmp	r3, #0
 800796a:	f000 80b7 	beq.w	8007adc <_dtoa_r+0x8c4>
 800796e:	b18c      	cbz	r4, 8007994 <_dtoa_r+0x77c>
 8007970:	4629      	mov	r1, r5
 8007972:	4622      	mov	r2, r4
 8007974:	4658      	mov	r0, fp
 8007976:	f000 fcc7 	bl	8008308 <__pow5mult>
 800797a:	464a      	mov	r2, r9
 800797c:	4601      	mov	r1, r0
 800797e:	4605      	mov	r5, r0
 8007980:	4658      	mov	r0, fp
 8007982:	f000 fc17 	bl	80081b4 <__multiply>
 8007986:	4649      	mov	r1, r9
 8007988:	9004      	str	r0, [sp, #16]
 800798a:	4658      	mov	r0, fp
 800798c:	f000 fb48 	bl	8008020 <_Bfree>
 8007990:	9b04      	ldr	r3, [sp, #16]
 8007992:	4699      	mov	r9, r3
 8007994:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007996:	1b1a      	subs	r2, r3, r4
 8007998:	d004      	beq.n	80079a4 <_dtoa_r+0x78c>
 800799a:	4649      	mov	r1, r9
 800799c:	4658      	mov	r0, fp
 800799e:	f000 fcb3 	bl	8008308 <__pow5mult>
 80079a2:	4681      	mov	r9, r0
 80079a4:	2101      	movs	r1, #1
 80079a6:	4658      	mov	r0, fp
 80079a8:	f000 fbee 	bl	8008188 <__i2b>
 80079ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80079ae:	4604      	mov	r4, r0
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	f000 81cf 	beq.w	8007d54 <_dtoa_r+0xb3c>
 80079b6:	461a      	mov	r2, r3
 80079b8:	4601      	mov	r1, r0
 80079ba:	4658      	mov	r0, fp
 80079bc:	f000 fca4 	bl	8008308 <__pow5mult>
 80079c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079c2:	2b01      	cmp	r3, #1
 80079c4:	4604      	mov	r4, r0
 80079c6:	f300 8095 	bgt.w	8007af4 <_dtoa_r+0x8dc>
 80079ca:	9b02      	ldr	r3, [sp, #8]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	f040 8087 	bne.w	8007ae0 <_dtoa_r+0x8c8>
 80079d2:	9b03      	ldr	r3, [sp, #12]
 80079d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80079d8:	2b00      	cmp	r3, #0
 80079da:	f040 8089 	bne.w	8007af0 <_dtoa_r+0x8d8>
 80079de:	9b03      	ldr	r3, [sp, #12]
 80079e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80079e4:	0d1b      	lsrs	r3, r3, #20
 80079e6:	051b      	lsls	r3, r3, #20
 80079e8:	b12b      	cbz	r3, 80079f6 <_dtoa_r+0x7de>
 80079ea:	9b08      	ldr	r3, [sp, #32]
 80079ec:	3301      	adds	r3, #1
 80079ee:	9308      	str	r3, [sp, #32]
 80079f0:	f108 0801 	add.w	r8, r8, #1
 80079f4:	2301      	movs	r3, #1
 80079f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80079f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	f000 81b0 	beq.w	8007d60 <_dtoa_r+0xb48>
 8007a00:	6923      	ldr	r3, [r4, #16]
 8007a02:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007a06:	6918      	ldr	r0, [r3, #16]
 8007a08:	f000 fb72 	bl	80080f0 <__hi0bits>
 8007a0c:	f1c0 0020 	rsb	r0, r0, #32
 8007a10:	9b08      	ldr	r3, [sp, #32]
 8007a12:	4418      	add	r0, r3
 8007a14:	f010 001f 	ands.w	r0, r0, #31
 8007a18:	d077      	beq.n	8007b0a <_dtoa_r+0x8f2>
 8007a1a:	f1c0 0320 	rsb	r3, r0, #32
 8007a1e:	2b04      	cmp	r3, #4
 8007a20:	dd6b      	ble.n	8007afa <_dtoa_r+0x8e2>
 8007a22:	9b08      	ldr	r3, [sp, #32]
 8007a24:	f1c0 001c 	rsb	r0, r0, #28
 8007a28:	4403      	add	r3, r0
 8007a2a:	4480      	add	r8, r0
 8007a2c:	4406      	add	r6, r0
 8007a2e:	9308      	str	r3, [sp, #32]
 8007a30:	f1b8 0f00 	cmp.w	r8, #0
 8007a34:	dd05      	ble.n	8007a42 <_dtoa_r+0x82a>
 8007a36:	4649      	mov	r1, r9
 8007a38:	4642      	mov	r2, r8
 8007a3a:	4658      	mov	r0, fp
 8007a3c:	f000 fcbe 	bl	80083bc <__lshift>
 8007a40:	4681      	mov	r9, r0
 8007a42:	9b08      	ldr	r3, [sp, #32]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	dd05      	ble.n	8007a54 <_dtoa_r+0x83c>
 8007a48:	4621      	mov	r1, r4
 8007a4a:	461a      	mov	r2, r3
 8007a4c:	4658      	mov	r0, fp
 8007a4e:	f000 fcb5 	bl	80083bc <__lshift>
 8007a52:	4604      	mov	r4, r0
 8007a54:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d059      	beq.n	8007b0e <_dtoa_r+0x8f6>
 8007a5a:	4621      	mov	r1, r4
 8007a5c:	4648      	mov	r0, r9
 8007a5e:	f000 fd19 	bl	8008494 <__mcmp>
 8007a62:	2800      	cmp	r0, #0
 8007a64:	da53      	bge.n	8007b0e <_dtoa_r+0x8f6>
 8007a66:	1e7b      	subs	r3, r7, #1
 8007a68:	9304      	str	r3, [sp, #16]
 8007a6a:	4649      	mov	r1, r9
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	220a      	movs	r2, #10
 8007a70:	4658      	mov	r0, fp
 8007a72:	f000 faf7 	bl	8008064 <__multadd>
 8007a76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007a78:	4681      	mov	r9, r0
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	f000 8172 	beq.w	8007d64 <_dtoa_r+0xb4c>
 8007a80:	2300      	movs	r3, #0
 8007a82:	4629      	mov	r1, r5
 8007a84:	220a      	movs	r2, #10
 8007a86:	4658      	mov	r0, fp
 8007a88:	f000 faec 	bl	8008064 <__multadd>
 8007a8c:	9b00      	ldr	r3, [sp, #0]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	4605      	mov	r5, r0
 8007a92:	dc67      	bgt.n	8007b64 <_dtoa_r+0x94c>
 8007a94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a96:	2b02      	cmp	r3, #2
 8007a98:	dc41      	bgt.n	8007b1e <_dtoa_r+0x906>
 8007a9a:	e063      	b.n	8007b64 <_dtoa_r+0x94c>
 8007a9c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007a9e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007aa2:	e746      	b.n	8007932 <_dtoa_r+0x71a>
 8007aa4:	9b07      	ldr	r3, [sp, #28]
 8007aa6:	1e5c      	subs	r4, r3, #1
 8007aa8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007aaa:	42a3      	cmp	r3, r4
 8007aac:	bfbf      	itttt	lt
 8007aae:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007ab0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007ab2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007ab4:	1ae3      	sublt	r3, r4, r3
 8007ab6:	bfb4      	ite	lt
 8007ab8:	18d2      	addlt	r2, r2, r3
 8007aba:	1b1c      	subge	r4, r3, r4
 8007abc:	9b07      	ldr	r3, [sp, #28]
 8007abe:	bfbc      	itt	lt
 8007ac0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007ac2:	2400      	movlt	r4, #0
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	bfb5      	itete	lt
 8007ac8:	eba8 0603 	sublt.w	r6, r8, r3
 8007acc:	9b07      	ldrge	r3, [sp, #28]
 8007ace:	2300      	movlt	r3, #0
 8007ad0:	4646      	movge	r6, r8
 8007ad2:	e730      	b.n	8007936 <_dtoa_r+0x71e>
 8007ad4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007ad6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007ad8:	4646      	mov	r6, r8
 8007ada:	e735      	b.n	8007948 <_dtoa_r+0x730>
 8007adc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007ade:	e75c      	b.n	800799a <_dtoa_r+0x782>
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	e788      	b.n	80079f6 <_dtoa_r+0x7de>
 8007ae4:	3fe00000 	.word	0x3fe00000
 8007ae8:	40240000 	.word	0x40240000
 8007aec:	40140000 	.word	0x40140000
 8007af0:	9b02      	ldr	r3, [sp, #8]
 8007af2:	e780      	b.n	80079f6 <_dtoa_r+0x7de>
 8007af4:	2300      	movs	r3, #0
 8007af6:	930a      	str	r3, [sp, #40]	@ 0x28
 8007af8:	e782      	b.n	8007a00 <_dtoa_r+0x7e8>
 8007afa:	d099      	beq.n	8007a30 <_dtoa_r+0x818>
 8007afc:	9a08      	ldr	r2, [sp, #32]
 8007afe:	331c      	adds	r3, #28
 8007b00:	441a      	add	r2, r3
 8007b02:	4498      	add	r8, r3
 8007b04:	441e      	add	r6, r3
 8007b06:	9208      	str	r2, [sp, #32]
 8007b08:	e792      	b.n	8007a30 <_dtoa_r+0x818>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	e7f6      	b.n	8007afc <_dtoa_r+0x8e4>
 8007b0e:	9b07      	ldr	r3, [sp, #28]
 8007b10:	9704      	str	r7, [sp, #16]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	dc20      	bgt.n	8007b58 <_dtoa_r+0x940>
 8007b16:	9300      	str	r3, [sp, #0]
 8007b18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b1a:	2b02      	cmp	r3, #2
 8007b1c:	dd1e      	ble.n	8007b5c <_dtoa_r+0x944>
 8007b1e:	9b00      	ldr	r3, [sp, #0]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	f47f aec0 	bne.w	80078a6 <_dtoa_r+0x68e>
 8007b26:	4621      	mov	r1, r4
 8007b28:	2205      	movs	r2, #5
 8007b2a:	4658      	mov	r0, fp
 8007b2c:	f000 fa9a 	bl	8008064 <__multadd>
 8007b30:	4601      	mov	r1, r0
 8007b32:	4604      	mov	r4, r0
 8007b34:	4648      	mov	r0, r9
 8007b36:	f000 fcad 	bl	8008494 <__mcmp>
 8007b3a:	2800      	cmp	r0, #0
 8007b3c:	f77f aeb3 	ble.w	80078a6 <_dtoa_r+0x68e>
 8007b40:	4656      	mov	r6, sl
 8007b42:	2331      	movs	r3, #49	@ 0x31
 8007b44:	f806 3b01 	strb.w	r3, [r6], #1
 8007b48:	9b04      	ldr	r3, [sp, #16]
 8007b4a:	3301      	adds	r3, #1
 8007b4c:	9304      	str	r3, [sp, #16]
 8007b4e:	e6ae      	b.n	80078ae <_dtoa_r+0x696>
 8007b50:	9c07      	ldr	r4, [sp, #28]
 8007b52:	9704      	str	r7, [sp, #16]
 8007b54:	4625      	mov	r5, r4
 8007b56:	e7f3      	b.n	8007b40 <_dtoa_r+0x928>
 8007b58:	9b07      	ldr	r3, [sp, #28]
 8007b5a:	9300      	str	r3, [sp, #0]
 8007b5c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	f000 8104 	beq.w	8007d6c <_dtoa_r+0xb54>
 8007b64:	2e00      	cmp	r6, #0
 8007b66:	dd05      	ble.n	8007b74 <_dtoa_r+0x95c>
 8007b68:	4629      	mov	r1, r5
 8007b6a:	4632      	mov	r2, r6
 8007b6c:	4658      	mov	r0, fp
 8007b6e:	f000 fc25 	bl	80083bc <__lshift>
 8007b72:	4605      	mov	r5, r0
 8007b74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d05a      	beq.n	8007c30 <_dtoa_r+0xa18>
 8007b7a:	6869      	ldr	r1, [r5, #4]
 8007b7c:	4658      	mov	r0, fp
 8007b7e:	f000 fa0f 	bl	8007fa0 <_Balloc>
 8007b82:	4606      	mov	r6, r0
 8007b84:	b928      	cbnz	r0, 8007b92 <_dtoa_r+0x97a>
 8007b86:	4b84      	ldr	r3, [pc, #528]	@ (8007d98 <_dtoa_r+0xb80>)
 8007b88:	4602      	mov	r2, r0
 8007b8a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007b8e:	f7ff bb5a 	b.w	8007246 <_dtoa_r+0x2e>
 8007b92:	692a      	ldr	r2, [r5, #16]
 8007b94:	3202      	adds	r2, #2
 8007b96:	0092      	lsls	r2, r2, #2
 8007b98:	f105 010c 	add.w	r1, r5, #12
 8007b9c:	300c      	adds	r0, #12
 8007b9e:	f000 ffaf 	bl	8008b00 <memcpy>
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	4631      	mov	r1, r6
 8007ba6:	4658      	mov	r0, fp
 8007ba8:	f000 fc08 	bl	80083bc <__lshift>
 8007bac:	f10a 0301 	add.w	r3, sl, #1
 8007bb0:	9307      	str	r3, [sp, #28]
 8007bb2:	9b00      	ldr	r3, [sp, #0]
 8007bb4:	4453      	add	r3, sl
 8007bb6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007bb8:	9b02      	ldr	r3, [sp, #8]
 8007bba:	f003 0301 	and.w	r3, r3, #1
 8007bbe:	462f      	mov	r7, r5
 8007bc0:	930a      	str	r3, [sp, #40]	@ 0x28
 8007bc2:	4605      	mov	r5, r0
 8007bc4:	9b07      	ldr	r3, [sp, #28]
 8007bc6:	4621      	mov	r1, r4
 8007bc8:	3b01      	subs	r3, #1
 8007bca:	4648      	mov	r0, r9
 8007bcc:	9300      	str	r3, [sp, #0]
 8007bce:	f7ff fa9a 	bl	8007106 <quorem>
 8007bd2:	4639      	mov	r1, r7
 8007bd4:	9002      	str	r0, [sp, #8]
 8007bd6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007bda:	4648      	mov	r0, r9
 8007bdc:	f000 fc5a 	bl	8008494 <__mcmp>
 8007be0:	462a      	mov	r2, r5
 8007be2:	9008      	str	r0, [sp, #32]
 8007be4:	4621      	mov	r1, r4
 8007be6:	4658      	mov	r0, fp
 8007be8:	f000 fc70 	bl	80084cc <__mdiff>
 8007bec:	68c2      	ldr	r2, [r0, #12]
 8007bee:	4606      	mov	r6, r0
 8007bf0:	bb02      	cbnz	r2, 8007c34 <_dtoa_r+0xa1c>
 8007bf2:	4601      	mov	r1, r0
 8007bf4:	4648      	mov	r0, r9
 8007bf6:	f000 fc4d 	bl	8008494 <__mcmp>
 8007bfa:	4602      	mov	r2, r0
 8007bfc:	4631      	mov	r1, r6
 8007bfe:	4658      	mov	r0, fp
 8007c00:	920e      	str	r2, [sp, #56]	@ 0x38
 8007c02:	f000 fa0d 	bl	8008020 <_Bfree>
 8007c06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c08:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007c0a:	9e07      	ldr	r6, [sp, #28]
 8007c0c:	ea43 0102 	orr.w	r1, r3, r2
 8007c10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c12:	4319      	orrs	r1, r3
 8007c14:	d110      	bne.n	8007c38 <_dtoa_r+0xa20>
 8007c16:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007c1a:	d029      	beq.n	8007c70 <_dtoa_r+0xa58>
 8007c1c:	9b08      	ldr	r3, [sp, #32]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	dd02      	ble.n	8007c28 <_dtoa_r+0xa10>
 8007c22:	9b02      	ldr	r3, [sp, #8]
 8007c24:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007c28:	9b00      	ldr	r3, [sp, #0]
 8007c2a:	f883 8000 	strb.w	r8, [r3]
 8007c2e:	e63f      	b.n	80078b0 <_dtoa_r+0x698>
 8007c30:	4628      	mov	r0, r5
 8007c32:	e7bb      	b.n	8007bac <_dtoa_r+0x994>
 8007c34:	2201      	movs	r2, #1
 8007c36:	e7e1      	b.n	8007bfc <_dtoa_r+0x9e4>
 8007c38:	9b08      	ldr	r3, [sp, #32]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	db04      	blt.n	8007c48 <_dtoa_r+0xa30>
 8007c3e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007c40:	430b      	orrs	r3, r1
 8007c42:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007c44:	430b      	orrs	r3, r1
 8007c46:	d120      	bne.n	8007c8a <_dtoa_r+0xa72>
 8007c48:	2a00      	cmp	r2, #0
 8007c4a:	dded      	ble.n	8007c28 <_dtoa_r+0xa10>
 8007c4c:	4649      	mov	r1, r9
 8007c4e:	2201      	movs	r2, #1
 8007c50:	4658      	mov	r0, fp
 8007c52:	f000 fbb3 	bl	80083bc <__lshift>
 8007c56:	4621      	mov	r1, r4
 8007c58:	4681      	mov	r9, r0
 8007c5a:	f000 fc1b 	bl	8008494 <__mcmp>
 8007c5e:	2800      	cmp	r0, #0
 8007c60:	dc03      	bgt.n	8007c6a <_dtoa_r+0xa52>
 8007c62:	d1e1      	bne.n	8007c28 <_dtoa_r+0xa10>
 8007c64:	f018 0f01 	tst.w	r8, #1
 8007c68:	d0de      	beq.n	8007c28 <_dtoa_r+0xa10>
 8007c6a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007c6e:	d1d8      	bne.n	8007c22 <_dtoa_r+0xa0a>
 8007c70:	9a00      	ldr	r2, [sp, #0]
 8007c72:	2339      	movs	r3, #57	@ 0x39
 8007c74:	7013      	strb	r3, [r2, #0]
 8007c76:	4633      	mov	r3, r6
 8007c78:	461e      	mov	r6, r3
 8007c7a:	3b01      	subs	r3, #1
 8007c7c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007c80:	2a39      	cmp	r2, #57	@ 0x39
 8007c82:	d052      	beq.n	8007d2a <_dtoa_r+0xb12>
 8007c84:	3201      	adds	r2, #1
 8007c86:	701a      	strb	r2, [r3, #0]
 8007c88:	e612      	b.n	80078b0 <_dtoa_r+0x698>
 8007c8a:	2a00      	cmp	r2, #0
 8007c8c:	dd07      	ble.n	8007c9e <_dtoa_r+0xa86>
 8007c8e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007c92:	d0ed      	beq.n	8007c70 <_dtoa_r+0xa58>
 8007c94:	9a00      	ldr	r2, [sp, #0]
 8007c96:	f108 0301 	add.w	r3, r8, #1
 8007c9a:	7013      	strb	r3, [r2, #0]
 8007c9c:	e608      	b.n	80078b0 <_dtoa_r+0x698>
 8007c9e:	9b07      	ldr	r3, [sp, #28]
 8007ca0:	9a07      	ldr	r2, [sp, #28]
 8007ca2:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007ca6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d028      	beq.n	8007cfe <_dtoa_r+0xae6>
 8007cac:	4649      	mov	r1, r9
 8007cae:	2300      	movs	r3, #0
 8007cb0:	220a      	movs	r2, #10
 8007cb2:	4658      	mov	r0, fp
 8007cb4:	f000 f9d6 	bl	8008064 <__multadd>
 8007cb8:	42af      	cmp	r7, r5
 8007cba:	4681      	mov	r9, r0
 8007cbc:	f04f 0300 	mov.w	r3, #0
 8007cc0:	f04f 020a 	mov.w	r2, #10
 8007cc4:	4639      	mov	r1, r7
 8007cc6:	4658      	mov	r0, fp
 8007cc8:	d107      	bne.n	8007cda <_dtoa_r+0xac2>
 8007cca:	f000 f9cb 	bl	8008064 <__multadd>
 8007cce:	4607      	mov	r7, r0
 8007cd0:	4605      	mov	r5, r0
 8007cd2:	9b07      	ldr	r3, [sp, #28]
 8007cd4:	3301      	adds	r3, #1
 8007cd6:	9307      	str	r3, [sp, #28]
 8007cd8:	e774      	b.n	8007bc4 <_dtoa_r+0x9ac>
 8007cda:	f000 f9c3 	bl	8008064 <__multadd>
 8007cde:	4629      	mov	r1, r5
 8007ce0:	4607      	mov	r7, r0
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	220a      	movs	r2, #10
 8007ce6:	4658      	mov	r0, fp
 8007ce8:	f000 f9bc 	bl	8008064 <__multadd>
 8007cec:	4605      	mov	r5, r0
 8007cee:	e7f0      	b.n	8007cd2 <_dtoa_r+0xaba>
 8007cf0:	9b00      	ldr	r3, [sp, #0]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	bfcc      	ite	gt
 8007cf6:	461e      	movgt	r6, r3
 8007cf8:	2601      	movle	r6, #1
 8007cfa:	4456      	add	r6, sl
 8007cfc:	2700      	movs	r7, #0
 8007cfe:	4649      	mov	r1, r9
 8007d00:	2201      	movs	r2, #1
 8007d02:	4658      	mov	r0, fp
 8007d04:	f000 fb5a 	bl	80083bc <__lshift>
 8007d08:	4621      	mov	r1, r4
 8007d0a:	4681      	mov	r9, r0
 8007d0c:	f000 fbc2 	bl	8008494 <__mcmp>
 8007d10:	2800      	cmp	r0, #0
 8007d12:	dcb0      	bgt.n	8007c76 <_dtoa_r+0xa5e>
 8007d14:	d102      	bne.n	8007d1c <_dtoa_r+0xb04>
 8007d16:	f018 0f01 	tst.w	r8, #1
 8007d1a:	d1ac      	bne.n	8007c76 <_dtoa_r+0xa5e>
 8007d1c:	4633      	mov	r3, r6
 8007d1e:	461e      	mov	r6, r3
 8007d20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007d24:	2a30      	cmp	r2, #48	@ 0x30
 8007d26:	d0fa      	beq.n	8007d1e <_dtoa_r+0xb06>
 8007d28:	e5c2      	b.n	80078b0 <_dtoa_r+0x698>
 8007d2a:	459a      	cmp	sl, r3
 8007d2c:	d1a4      	bne.n	8007c78 <_dtoa_r+0xa60>
 8007d2e:	9b04      	ldr	r3, [sp, #16]
 8007d30:	3301      	adds	r3, #1
 8007d32:	9304      	str	r3, [sp, #16]
 8007d34:	2331      	movs	r3, #49	@ 0x31
 8007d36:	f88a 3000 	strb.w	r3, [sl]
 8007d3a:	e5b9      	b.n	80078b0 <_dtoa_r+0x698>
 8007d3c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007d3e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007d9c <_dtoa_r+0xb84>
 8007d42:	b11b      	cbz	r3, 8007d4c <_dtoa_r+0xb34>
 8007d44:	f10a 0308 	add.w	r3, sl, #8
 8007d48:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007d4a:	6013      	str	r3, [r2, #0]
 8007d4c:	4650      	mov	r0, sl
 8007d4e:	b019      	add	sp, #100	@ 0x64
 8007d50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d56:	2b01      	cmp	r3, #1
 8007d58:	f77f ae37 	ble.w	80079ca <_dtoa_r+0x7b2>
 8007d5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007d5e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007d60:	2001      	movs	r0, #1
 8007d62:	e655      	b.n	8007a10 <_dtoa_r+0x7f8>
 8007d64:	9b00      	ldr	r3, [sp, #0]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	f77f aed6 	ble.w	8007b18 <_dtoa_r+0x900>
 8007d6c:	4656      	mov	r6, sl
 8007d6e:	4621      	mov	r1, r4
 8007d70:	4648      	mov	r0, r9
 8007d72:	f7ff f9c8 	bl	8007106 <quorem>
 8007d76:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007d7a:	f806 8b01 	strb.w	r8, [r6], #1
 8007d7e:	9b00      	ldr	r3, [sp, #0]
 8007d80:	eba6 020a 	sub.w	r2, r6, sl
 8007d84:	4293      	cmp	r3, r2
 8007d86:	ddb3      	ble.n	8007cf0 <_dtoa_r+0xad8>
 8007d88:	4649      	mov	r1, r9
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	220a      	movs	r2, #10
 8007d8e:	4658      	mov	r0, fp
 8007d90:	f000 f968 	bl	8008064 <__multadd>
 8007d94:	4681      	mov	r9, r0
 8007d96:	e7ea      	b.n	8007d6e <_dtoa_r+0xb56>
 8007d98:	080092b8 	.word	0x080092b8
 8007d9c:	0800923c 	.word	0x0800923c

08007da0 <_free_r>:
 8007da0:	b538      	push	{r3, r4, r5, lr}
 8007da2:	4605      	mov	r5, r0
 8007da4:	2900      	cmp	r1, #0
 8007da6:	d041      	beq.n	8007e2c <_free_r+0x8c>
 8007da8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007dac:	1f0c      	subs	r4, r1, #4
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	bfb8      	it	lt
 8007db2:	18e4      	addlt	r4, r4, r3
 8007db4:	f000 f8e8 	bl	8007f88 <__malloc_lock>
 8007db8:	4a1d      	ldr	r2, [pc, #116]	@ (8007e30 <_free_r+0x90>)
 8007dba:	6813      	ldr	r3, [r2, #0]
 8007dbc:	b933      	cbnz	r3, 8007dcc <_free_r+0x2c>
 8007dbe:	6063      	str	r3, [r4, #4]
 8007dc0:	6014      	str	r4, [r2, #0]
 8007dc2:	4628      	mov	r0, r5
 8007dc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007dc8:	f000 b8e4 	b.w	8007f94 <__malloc_unlock>
 8007dcc:	42a3      	cmp	r3, r4
 8007dce:	d908      	bls.n	8007de2 <_free_r+0x42>
 8007dd0:	6820      	ldr	r0, [r4, #0]
 8007dd2:	1821      	adds	r1, r4, r0
 8007dd4:	428b      	cmp	r3, r1
 8007dd6:	bf01      	itttt	eq
 8007dd8:	6819      	ldreq	r1, [r3, #0]
 8007dda:	685b      	ldreq	r3, [r3, #4]
 8007ddc:	1809      	addeq	r1, r1, r0
 8007dde:	6021      	streq	r1, [r4, #0]
 8007de0:	e7ed      	b.n	8007dbe <_free_r+0x1e>
 8007de2:	461a      	mov	r2, r3
 8007de4:	685b      	ldr	r3, [r3, #4]
 8007de6:	b10b      	cbz	r3, 8007dec <_free_r+0x4c>
 8007de8:	42a3      	cmp	r3, r4
 8007dea:	d9fa      	bls.n	8007de2 <_free_r+0x42>
 8007dec:	6811      	ldr	r1, [r2, #0]
 8007dee:	1850      	adds	r0, r2, r1
 8007df0:	42a0      	cmp	r0, r4
 8007df2:	d10b      	bne.n	8007e0c <_free_r+0x6c>
 8007df4:	6820      	ldr	r0, [r4, #0]
 8007df6:	4401      	add	r1, r0
 8007df8:	1850      	adds	r0, r2, r1
 8007dfa:	4283      	cmp	r3, r0
 8007dfc:	6011      	str	r1, [r2, #0]
 8007dfe:	d1e0      	bne.n	8007dc2 <_free_r+0x22>
 8007e00:	6818      	ldr	r0, [r3, #0]
 8007e02:	685b      	ldr	r3, [r3, #4]
 8007e04:	6053      	str	r3, [r2, #4]
 8007e06:	4408      	add	r0, r1
 8007e08:	6010      	str	r0, [r2, #0]
 8007e0a:	e7da      	b.n	8007dc2 <_free_r+0x22>
 8007e0c:	d902      	bls.n	8007e14 <_free_r+0x74>
 8007e0e:	230c      	movs	r3, #12
 8007e10:	602b      	str	r3, [r5, #0]
 8007e12:	e7d6      	b.n	8007dc2 <_free_r+0x22>
 8007e14:	6820      	ldr	r0, [r4, #0]
 8007e16:	1821      	adds	r1, r4, r0
 8007e18:	428b      	cmp	r3, r1
 8007e1a:	bf04      	itt	eq
 8007e1c:	6819      	ldreq	r1, [r3, #0]
 8007e1e:	685b      	ldreq	r3, [r3, #4]
 8007e20:	6063      	str	r3, [r4, #4]
 8007e22:	bf04      	itt	eq
 8007e24:	1809      	addeq	r1, r1, r0
 8007e26:	6021      	streq	r1, [r4, #0]
 8007e28:	6054      	str	r4, [r2, #4]
 8007e2a:	e7ca      	b.n	8007dc2 <_free_r+0x22>
 8007e2c:	bd38      	pop	{r3, r4, r5, pc}
 8007e2e:	bf00      	nop
 8007e30:	2000052c 	.word	0x2000052c

08007e34 <malloc>:
 8007e34:	4b02      	ldr	r3, [pc, #8]	@ (8007e40 <malloc+0xc>)
 8007e36:	4601      	mov	r1, r0
 8007e38:	6818      	ldr	r0, [r3, #0]
 8007e3a:	f000 b825 	b.w	8007e88 <_malloc_r>
 8007e3e:	bf00      	nop
 8007e40:	20000018 	.word	0x20000018

08007e44 <sbrk_aligned>:
 8007e44:	b570      	push	{r4, r5, r6, lr}
 8007e46:	4e0f      	ldr	r6, [pc, #60]	@ (8007e84 <sbrk_aligned+0x40>)
 8007e48:	460c      	mov	r4, r1
 8007e4a:	6831      	ldr	r1, [r6, #0]
 8007e4c:	4605      	mov	r5, r0
 8007e4e:	b911      	cbnz	r1, 8007e56 <sbrk_aligned+0x12>
 8007e50:	f000 fe46 	bl	8008ae0 <_sbrk_r>
 8007e54:	6030      	str	r0, [r6, #0]
 8007e56:	4621      	mov	r1, r4
 8007e58:	4628      	mov	r0, r5
 8007e5a:	f000 fe41 	bl	8008ae0 <_sbrk_r>
 8007e5e:	1c43      	adds	r3, r0, #1
 8007e60:	d103      	bne.n	8007e6a <sbrk_aligned+0x26>
 8007e62:	f04f 34ff 	mov.w	r4, #4294967295
 8007e66:	4620      	mov	r0, r4
 8007e68:	bd70      	pop	{r4, r5, r6, pc}
 8007e6a:	1cc4      	adds	r4, r0, #3
 8007e6c:	f024 0403 	bic.w	r4, r4, #3
 8007e70:	42a0      	cmp	r0, r4
 8007e72:	d0f8      	beq.n	8007e66 <sbrk_aligned+0x22>
 8007e74:	1a21      	subs	r1, r4, r0
 8007e76:	4628      	mov	r0, r5
 8007e78:	f000 fe32 	bl	8008ae0 <_sbrk_r>
 8007e7c:	3001      	adds	r0, #1
 8007e7e:	d1f2      	bne.n	8007e66 <sbrk_aligned+0x22>
 8007e80:	e7ef      	b.n	8007e62 <sbrk_aligned+0x1e>
 8007e82:	bf00      	nop
 8007e84:	20000528 	.word	0x20000528

08007e88 <_malloc_r>:
 8007e88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e8c:	1ccd      	adds	r5, r1, #3
 8007e8e:	f025 0503 	bic.w	r5, r5, #3
 8007e92:	3508      	adds	r5, #8
 8007e94:	2d0c      	cmp	r5, #12
 8007e96:	bf38      	it	cc
 8007e98:	250c      	movcc	r5, #12
 8007e9a:	2d00      	cmp	r5, #0
 8007e9c:	4606      	mov	r6, r0
 8007e9e:	db01      	blt.n	8007ea4 <_malloc_r+0x1c>
 8007ea0:	42a9      	cmp	r1, r5
 8007ea2:	d904      	bls.n	8007eae <_malloc_r+0x26>
 8007ea4:	230c      	movs	r3, #12
 8007ea6:	6033      	str	r3, [r6, #0]
 8007ea8:	2000      	movs	r0, #0
 8007eaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007eae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007f84 <_malloc_r+0xfc>
 8007eb2:	f000 f869 	bl	8007f88 <__malloc_lock>
 8007eb6:	f8d8 3000 	ldr.w	r3, [r8]
 8007eba:	461c      	mov	r4, r3
 8007ebc:	bb44      	cbnz	r4, 8007f10 <_malloc_r+0x88>
 8007ebe:	4629      	mov	r1, r5
 8007ec0:	4630      	mov	r0, r6
 8007ec2:	f7ff ffbf 	bl	8007e44 <sbrk_aligned>
 8007ec6:	1c43      	adds	r3, r0, #1
 8007ec8:	4604      	mov	r4, r0
 8007eca:	d158      	bne.n	8007f7e <_malloc_r+0xf6>
 8007ecc:	f8d8 4000 	ldr.w	r4, [r8]
 8007ed0:	4627      	mov	r7, r4
 8007ed2:	2f00      	cmp	r7, #0
 8007ed4:	d143      	bne.n	8007f5e <_malloc_r+0xd6>
 8007ed6:	2c00      	cmp	r4, #0
 8007ed8:	d04b      	beq.n	8007f72 <_malloc_r+0xea>
 8007eda:	6823      	ldr	r3, [r4, #0]
 8007edc:	4639      	mov	r1, r7
 8007ede:	4630      	mov	r0, r6
 8007ee0:	eb04 0903 	add.w	r9, r4, r3
 8007ee4:	f000 fdfc 	bl	8008ae0 <_sbrk_r>
 8007ee8:	4581      	cmp	r9, r0
 8007eea:	d142      	bne.n	8007f72 <_malloc_r+0xea>
 8007eec:	6821      	ldr	r1, [r4, #0]
 8007eee:	1a6d      	subs	r5, r5, r1
 8007ef0:	4629      	mov	r1, r5
 8007ef2:	4630      	mov	r0, r6
 8007ef4:	f7ff ffa6 	bl	8007e44 <sbrk_aligned>
 8007ef8:	3001      	adds	r0, #1
 8007efa:	d03a      	beq.n	8007f72 <_malloc_r+0xea>
 8007efc:	6823      	ldr	r3, [r4, #0]
 8007efe:	442b      	add	r3, r5
 8007f00:	6023      	str	r3, [r4, #0]
 8007f02:	f8d8 3000 	ldr.w	r3, [r8]
 8007f06:	685a      	ldr	r2, [r3, #4]
 8007f08:	bb62      	cbnz	r2, 8007f64 <_malloc_r+0xdc>
 8007f0a:	f8c8 7000 	str.w	r7, [r8]
 8007f0e:	e00f      	b.n	8007f30 <_malloc_r+0xa8>
 8007f10:	6822      	ldr	r2, [r4, #0]
 8007f12:	1b52      	subs	r2, r2, r5
 8007f14:	d420      	bmi.n	8007f58 <_malloc_r+0xd0>
 8007f16:	2a0b      	cmp	r2, #11
 8007f18:	d917      	bls.n	8007f4a <_malloc_r+0xc2>
 8007f1a:	1961      	adds	r1, r4, r5
 8007f1c:	42a3      	cmp	r3, r4
 8007f1e:	6025      	str	r5, [r4, #0]
 8007f20:	bf18      	it	ne
 8007f22:	6059      	strne	r1, [r3, #4]
 8007f24:	6863      	ldr	r3, [r4, #4]
 8007f26:	bf08      	it	eq
 8007f28:	f8c8 1000 	streq.w	r1, [r8]
 8007f2c:	5162      	str	r2, [r4, r5]
 8007f2e:	604b      	str	r3, [r1, #4]
 8007f30:	4630      	mov	r0, r6
 8007f32:	f000 f82f 	bl	8007f94 <__malloc_unlock>
 8007f36:	f104 000b 	add.w	r0, r4, #11
 8007f3a:	1d23      	adds	r3, r4, #4
 8007f3c:	f020 0007 	bic.w	r0, r0, #7
 8007f40:	1ac2      	subs	r2, r0, r3
 8007f42:	bf1c      	itt	ne
 8007f44:	1a1b      	subne	r3, r3, r0
 8007f46:	50a3      	strne	r3, [r4, r2]
 8007f48:	e7af      	b.n	8007eaa <_malloc_r+0x22>
 8007f4a:	6862      	ldr	r2, [r4, #4]
 8007f4c:	42a3      	cmp	r3, r4
 8007f4e:	bf0c      	ite	eq
 8007f50:	f8c8 2000 	streq.w	r2, [r8]
 8007f54:	605a      	strne	r2, [r3, #4]
 8007f56:	e7eb      	b.n	8007f30 <_malloc_r+0xa8>
 8007f58:	4623      	mov	r3, r4
 8007f5a:	6864      	ldr	r4, [r4, #4]
 8007f5c:	e7ae      	b.n	8007ebc <_malloc_r+0x34>
 8007f5e:	463c      	mov	r4, r7
 8007f60:	687f      	ldr	r7, [r7, #4]
 8007f62:	e7b6      	b.n	8007ed2 <_malloc_r+0x4a>
 8007f64:	461a      	mov	r2, r3
 8007f66:	685b      	ldr	r3, [r3, #4]
 8007f68:	42a3      	cmp	r3, r4
 8007f6a:	d1fb      	bne.n	8007f64 <_malloc_r+0xdc>
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	6053      	str	r3, [r2, #4]
 8007f70:	e7de      	b.n	8007f30 <_malloc_r+0xa8>
 8007f72:	230c      	movs	r3, #12
 8007f74:	6033      	str	r3, [r6, #0]
 8007f76:	4630      	mov	r0, r6
 8007f78:	f000 f80c 	bl	8007f94 <__malloc_unlock>
 8007f7c:	e794      	b.n	8007ea8 <_malloc_r+0x20>
 8007f7e:	6005      	str	r5, [r0, #0]
 8007f80:	e7d6      	b.n	8007f30 <_malloc_r+0xa8>
 8007f82:	bf00      	nop
 8007f84:	2000052c 	.word	0x2000052c

08007f88 <__malloc_lock>:
 8007f88:	4801      	ldr	r0, [pc, #4]	@ (8007f90 <__malloc_lock+0x8>)
 8007f8a:	f7ff b8ba 	b.w	8007102 <__retarget_lock_acquire_recursive>
 8007f8e:	bf00      	nop
 8007f90:	20000524 	.word	0x20000524

08007f94 <__malloc_unlock>:
 8007f94:	4801      	ldr	r0, [pc, #4]	@ (8007f9c <__malloc_unlock+0x8>)
 8007f96:	f7ff b8b5 	b.w	8007104 <__retarget_lock_release_recursive>
 8007f9a:	bf00      	nop
 8007f9c:	20000524 	.word	0x20000524

08007fa0 <_Balloc>:
 8007fa0:	b570      	push	{r4, r5, r6, lr}
 8007fa2:	69c6      	ldr	r6, [r0, #28]
 8007fa4:	4604      	mov	r4, r0
 8007fa6:	460d      	mov	r5, r1
 8007fa8:	b976      	cbnz	r6, 8007fc8 <_Balloc+0x28>
 8007faa:	2010      	movs	r0, #16
 8007fac:	f7ff ff42 	bl	8007e34 <malloc>
 8007fb0:	4602      	mov	r2, r0
 8007fb2:	61e0      	str	r0, [r4, #28]
 8007fb4:	b920      	cbnz	r0, 8007fc0 <_Balloc+0x20>
 8007fb6:	4b18      	ldr	r3, [pc, #96]	@ (8008018 <_Balloc+0x78>)
 8007fb8:	4818      	ldr	r0, [pc, #96]	@ (800801c <_Balloc+0x7c>)
 8007fba:	216b      	movs	r1, #107	@ 0x6b
 8007fbc:	f000 fdae 	bl	8008b1c <__assert_func>
 8007fc0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007fc4:	6006      	str	r6, [r0, #0]
 8007fc6:	60c6      	str	r6, [r0, #12]
 8007fc8:	69e6      	ldr	r6, [r4, #28]
 8007fca:	68f3      	ldr	r3, [r6, #12]
 8007fcc:	b183      	cbz	r3, 8007ff0 <_Balloc+0x50>
 8007fce:	69e3      	ldr	r3, [r4, #28]
 8007fd0:	68db      	ldr	r3, [r3, #12]
 8007fd2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007fd6:	b9b8      	cbnz	r0, 8008008 <_Balloc+0x68>
 8007fd8:	2101      	movs	r1, #1
 8007fda:	fa01 f605 	lsl.w	r6, r1, r5
 8007fde:	1d72      	adds	r2, r6, #5
 8007fe0:	0092      	lsls	r2, r2, #2
 8007fe2:	4620      	mov	r0, r4
 8007fe4:	f000 fdb8 	bl	8008b58 <_calloc_r>
 8007fe8:	b160      	cbz	r0, 8008004 <_Balloc+0x64>
 8007fea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007fee:	e00e      	b.n	800800e <_Balloc+0x6e>
 8007ff0:	2221      	movs	r2, #33	@ 0x21
 8007ff2:	2104      	movs	r1, #4
 8007ff4:	4620      	mov	r0, r4
 8007ff6:	f000 fdaf 	bl	8008b58 <_calloc_r>
 8007ffa:	69e3      	ldr	r3, [r4, #28]
 8007ffc:	60f0      	str	r0, [r6, #12]
 8007ffe:	68db      	ldr	r3, [r3, #12]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d1e4      	bne.n	8007fce <_Balloc+0x2e>
 8008004:	2000      	movs	r0, #0
 8008006:	bd70      	pop	{r4, r5, r6, pc}
 8008008:	6802      	ldr	r2, [r0, #0]
 800800a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800800e:	2300      	movs	r3, #0
 8008010:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008014:	e7f7      	b.n	8008006 <_Balloc+0x66>
 8008016:	bf00      	nop
 8008018:	08009249 	.word	0x08009249
 800801c:	080092c9 	.word	0x080092c9

08008020 <_Bfree>:
 8008020:	b570      	push	{r4, r5, r6, lr}
 8008022:	69c6      	ldr	r6, [r0, #28]
 8008024:	4605      	mov	r5, r0
 8008026:	460c      	mov	r4, r1
 8008028:	b976      	cbnz	r6, 8008048 <_Bfree+0x28>
 800802a:	2010      	movs	r0, #16
 800802c:	f7ff ff02 	bl	8007e34 <malloc>
 8008030:	4602      	mov	r2, r0
 8008032:	61e8      	str	r0, [r5, #28]
 8008034:	b920      	cbnz	r0, 8008040 <_Bfree+0x20>
 8008036:	4b09      	ldr	r3, [pc, #36]	@ (800805c <_Bfree+0x3c>)
 8008038:	4809      	ldr	r0, [pc, #36]	@ (8008060 <_Bfree+0x40>)
 800803a:	218f      	movs	r1, #143	@ 0x8f
 800803c:	f000 fd6e 	bl	8008b1c <__assert_func>
 8008040:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008044:	6006      	str	r6, [r0, #0]
 8008046:	60c6      	str	r6, [r0, #12]
 8008048:	b13c      	cbz	r4, 800805a <_Bfree+0x3a>
 800804a:	69eb      	ldr	r3, [r5, #28]
 800804c:	6862      	ldr	r2, [r4, #4]
 800804e:	68db      	ldr	r3, [r3, #12]
 8008050:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008054:	6021      	str	r1, [r4, #0]
 8008056:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800805a:	bd70      	pop	{r4, r5, r6, pc}
 800805c:	08009249 	.word	0x08009249
 8008060:	080092c9 	.word	0x080092c9

08008064 <__multadd>:
 8008064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008068:	690d      	ldr	r5, [r1, #16]
 800806a:	4607      	mov	r7, r0
 800806c:	460c      	mov	r4, r1
 800806e:	461e      	mov	r6, r3
 8008070:	f101 0c14 	add.w	ip, r1, #20
 8008074:	2000      	movs	r0, #0
 8008076:	f8dc 3000 	ldr.w	r3, [ip]
 800807a:	b299      	uxth	r1, r3
 800807c:	fb02 6101 	mla	r1, r2, r1, r6
 8008080:	0c1e      	lsrs	r6, r3, #16
 8008082:	0c0b      	lsrs	r3, r1, #16
 8008084:	fb02 3306 	mla	r3, r2, r6, r3
 8008088:	b289      	uxth	r1, r1
 800808a:	3001      	adds	r0, #1
 800808c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008090:	4285      	cmp	r5, r0
 8008092:	f84c 1b04 	str.w	r1, [ip], #4
 8008096:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800809a:	dcec      	bgt.n	8008076 <__multadd+0x12>
 800809c:	b30e      	cbz	r6, 80080e2 <__multadd+0x7e>
 800809e:	68a3      	ldr	r3, [r4, #8]
 80080a0:	42ab      	cmp	r3, r5
 80080a2:	dc19      	bgt.n	80080d8 <__multadd+0x74>
 80080a4:	6861      	ldr	r1, [r4, #4]
 80080a6:	4638      	mov	r0, r7
 80080a8:	3101      	adds	r1, #1
 80080aa:	f7ff ff79 	bl	8007fa0 <_Balloc>
 80080ae:	4680      	mov	r8, r0
 80080b0:	b928      	cbnz	r0, 80080be <__multadd+0x5a>
 80080b2:	4602      	mov	r2, r0
 80080b4:	4b0c      	ldr	r3, [pc, #48]	@ (80080e8 <__multadd+0x84>)
 80080b6:	480d      	ldr	r0, [pc, #52]	@ (80080ec <__multadd+0x88>)
 80080b8:	21ba      	movs	r1, #186	@ 0xba
 80080ba:	f000 fd2f 	bl	8008b1c <__assert_func>
 80080be:	6922      	ldr	r2, [r4, #16]
 80080c0:	3202      	adds	r2, #2
 80080c2:	f104 010c 	add.w	r1, r4, #12
 80080c6:	0092      	lsls	r2, r2, #2
 80080c8:	300c      	adds	r0, #12
 80080ca:	f000 fd19 	bl	8008b00 <memcpy>
 80080ce:	4621      	mov	r1, r4
 80080d0:	4638      	mov	r0, r7
 80080d2:	f7ff ffa5 	bl	8008020 <_Bfree>
 80080d6:	4644      	mov	r4, r8
 80080d8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80080dc:	3501      	adds	r5, #1
 80080de:	615e      	str	r6, [r3, #20]
 80080e0:	6125      	str	r5, [r4, #16]
 80080e2:	4620      	mov	r0, r4
 80080e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080e8:	080092b8 	.word	0x080092b8
 80080ec:	080092c9 	.word	0x080092c9

080080f0 <__hi0bits>:
 80080f0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80080f4:	4603      	mov	r3, r0
 80080f6:	bf36      	itet	cc
 80080f8:	0403      	lslcc	r3, r0, #16
 80080fa:	2000      	movcs	r0, #0
 80080fc:	2010      	movcc	r0, #16
 80080fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008102:	bf3c      	itt	cc
 8008104:	021b      	lslcc	r3, r3, #8
 8008106:	3008      	addcc	r0, #8
 8008108:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800810c:	bf3c      	itt	cc
 800810e:	011b      	lslcc	r3, r3, #4
 8008110:	3004      	addcc	r0, #4
 8008112:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008116:	bf3c      	itt	cc
 8008118:	009b      	lslcc	r3, r3, #2
 800811a:	3002      	addcc	r0, #2
 800811c:	2b00      	cmp	r3, #0
 800811e:	db05      	blt.n	800812c <__hi0bits+0x3c>
 8008120:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008124:	f100 0001 	add.w	r0, r0, #1
 8008128:	bf08      	it	eq
 800812a:	2020      	moveq	r0, #32
 800812c:	4770      	bx	lr

0800812e <__lo0bits>:
 800812e:	6803      	ldr	r3, [r0, #0]
 8008130:	4602      	mov	r2, r0
 8008132:	f013 0007 	ands.w	r0, r3, #7
 8008136:	d00b      	beq.n	8008150 <__lo0bits+0x22>
 8008138:	07d9      	lsls	r1, r3, #31
 800813a:	d421      	bmi.n	8008180 <__lo0bits+0x52>
 800813c:	0798      	lsls	r0, r3, #30
 800813e:	bf49      	itett	mi
 8008140:	085b      	lsrmi	r3, r3, #1
 8008142:	089b      	lsrpl	r3, r3, #2
 8008144:	2001      	movmi	r0, #1
 8008146:	6013      	strmi	r3, [r2, #0]
 8008148:	bf5c      	itt	pl
 800814a:	6013      	strpl	r3, [r2, #0]
 800814c:	2002      	movpl	r0, #2
 800814e:	4770      	bx	lr
 8008150:	b299      	uxth	r1, r3
 8008152:	b909      	cbnz	r1, 8008158 <__lo0bits+0x2a>
 8008154:	0c1b      	lsrs	r3, r3, #16
 8008156:	2010      	movs	r0, #16
 8008158:	b2d9      	uxtb	r1, r3
 800815a:	b909      	cbnz	r1, 8008160 <__lo0bits+0x32>
 800815c:	3008      	adds	r0, #8
 800815e:	0a1b      	lsrs	r3, r3, #8
 8008160:	0719      	lsls	r1, r3, #28
 8008162:	bf04      	itt	eq
 8008164:	091b      	lsreq	r3, r3, #4
 8008166:	3004      	addeq	r0, #4
 8008168:	0799      	lsls	r1, r3, #30
 800816a:	bf04      	itt	eq
 800816c:	089b      	lsreq	r3, r3, #2
 800816e:	3002      	addeq	r0, #2
 8008170:	07d9      	lsls	r1, r3, #31
 8008172:	d403      	bmi.n	800817c <__lo0bits+0x4e>
 8008174:	085b      	lsrs	r3, r3, #1
 8008176:	f100 0001 	add.w	r0, r0, #1
 800817a:	d003      	beq.n	8008184 <__lo0bits+0x56>
 800817c:	6013      	str	r3, [r2, #0]
 800817e:	4770      	bx	lr
 8008180:	2000      	movs	r0, #0
 8008182:	4770      	bx	lr
 8008184:	2020      	movs	r0, #32
 8008186:	4770      	bx	lr

08008188 <__i2b>:
 8008188:	b510      	push	{r4, lr}
 800818a:	460c      	mov	r4, r1
 800818c:	2101      	movs	r1, #1
 800818e:	f7ff ff07 	bl	8007fa0 <_Balloc>
 8008192:	4602      	mov	r2, r0
 8008194:	b928      	cbnz	r0, 80081a2 <__i2b+0x1a>
 8008196:	4b05      	ldr	r3, [pc, #20]	@ (80081ac <__i2b+0x24>)
 8008198:	4805      	ldr	r0, [pc, #20]	@ (80081b0 <__i2b+0x28>)
 800819a:	f240 1145 	movw	r1, #325	@ 0x145
 800819e:	f000 fcbd 	bl	8008b1c <__assert_func>
 80081a2:	2301      	movs	r3, #1
 80081a4:	6144      	str	r4, [r0, #20]
 80081a6:	6103      	str	r3, [r0, #16]
 80081a8:	bd10      	pop	{r4, pc}
 80081aa:	bf00      	nop
 80081ac:	080092b8 	.word	0x080092b8
 80081b0:	080092c9 	.word	0x080092c9

080081b4 <__multiply>:
 80081b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081b8:	4614      	mov	r4, r2
 80081ba:	690a      	ldr	r2, [r1, #16]
 80081bc:	6923      	ldr	r3, [r4, #16]
 80081be:	429a      	cmp	r2, r3
 80081c0:	bfa8      	it	ge
 80081c2:	4623      	movge	r3, r4
 80081c4:	460f      	mov	r7, r1
 80081c6:	bfa4      	itt	ge
 80081c8:	460c      	movge	r4, r1
 80081ca:	461f      	movge	r7, r3
 80081cc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80081d0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80081d4:	68a3      	ldr	r3, [r4, #8]
 80081d6:	6861      	ldr	r1, [r4, #4]
 80081d8:	eb0a 0609 	add.w	r6, sl, r9
 80081dc:	42b3      	cmp	r3, r6
 80081de:	b085      	sub	sp, #20
 80081e0:	bfb8      	it	lt
 80081e2:	3101      	addlt	r1, #1
 80081e4:	f7ff fedc 	bl	8007fa0 <_Balloc>
 80081e8:	b930      	cbnz	r0, 80081f8 <__multiply+0x44>
 80081ea:	4602      	mov	r2, r0
 80081ec:	4b44      	ldr	r3, [pc, #272]	@ (8008300 <__multiply+0x14c>)
 80081ee:	4845      	ldr	r0, [pc, #276]	@ (8008304 <__multiply+0x150>)
 80081f0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80081f4:	f000 fc92 	bl	8008b1c <__assert_func>
 80081f8:	f100 0514 	add.w	r5, r0, #20
 80081fc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008200:	462b      	mov	r3, r5
 8008202:	2200      	movs	r2, #0
 8008204:	4543      	cmp	r3, r8
 8008206:	d321      	bcc.n	800824c <__multiply+0x98>
 8008208:	f107 0114 	add.w	r1, r7, #20
 800820c:	f104 0214 	add.w	r2, r4, #20
 8008210:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008214:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008218:	9302      	str	r3, [sp, #8]
 800821a:	1b13      	subs	r3, r2, r4
 800821c:	3b15      	subs	r3, #21
 800821e:	f023 0303 	bic.w	r3, r3, #3
 8008222:	3304      	adds	r3, #4
 8008224:	f104 0715 	add.w	r7, r4, #21
 8008228:	42ba      	cmp	r2, r7
 800822a:	bf38      	it	cc
 800822c:	2304      	movcc	r3, #4
 800822e:	9301      	str	r3, [sp, #4]
 8008230:	9b02      	ldr	r3, [sp, #8]
 8008232:	9103      	str	r1, [sp, #12]
 8008234:	428b      	cmp	r3, r1
 8008236:	d80c      	bhi.n	8008252 <__multiply+0x9e>
 8008238:	2e00      	cmp	r6, #0
 800823a:	dd03      	ble.n	8008244 <__multiply+0x90>
 800823c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008240:	2b00      	cmp	r3, #0
 8008242:	d05b      	beq.n	80082fc <__multiply+0x148>
 8008244:	6106      	str	r6, [r0, #16]
 8008246:	b005      	add	sp, #20
 8008248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800824c:	f843 2b04 	str.w	r2, [r3], #4
 8008250:	e7d8      	b.n	8008204 <__multiply+0x50>
 8008252:	f8b1 a000 	ldrh.w	sl, [r1]
 8008256:	f1ba 0f00 	cmp.w	sl, #0
 800825a:	d024      	beq.n	80082a6 <__multiply+0xf2>
 800825c:	f104 0e14 	add.w	lr, r4, #20
 8008260:	46a9      	mov	r9, r5
 8008262:	f04f 0c00 	mov.w	ip, #0
 8008266:	f85e 7b04 	ldr.w	r7, [lr], #4
 800826a:	f8d9 3000 	ldr.w	r3, [r9]
 800826e:	fa1f fb87 	uxth.w	fp, r7
 8008272:	b29b      	uxth	r3, r3
 8008274:	fb0a 330b 	mla	r3, sl, fp, r3
 8008278:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800827c:	f8d9 7000 	ldr.w	r7, [r9]
 8008280:	4463      	add	r3, ip
 8008282:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008286:	fb0a c70b 	mla	r7, sl, fp, ip
 800828a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800828e:	b29b      	uxth	r3, r3
 8008290:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008294:	4572      	cmp	r2, lr
 8008296:	f849 3b04 	str.w	r3, [r9], #4
 800829a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800829e:	d8e2      	bhi.n	8008266 <__multiply+0xb2>
 80082a0:	9b01      	ldr	r3, [sp, #4]
 80082a2:	f845 c003 	str.w	ip, [r5, r3]
 80082a6:	9b03      	ldr	r3, [sp, #12]
 80082a8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80082ac:	3104      	adds	r1, #4
 80082ae:	f1b9 0f00 	cmp.w	r9, #0
 80082b2:	d021      	beq.n	80082f8 <__multiply+0x144>
 80082b4:	682b      	ldr	r3, [r5, #0]
 80082b6:	f104 0c14 	add.w	ip, r4, #20
 80082ba:	46ae      	mov	lr, r5
 80082bc:	f04f 0a00 	mov.w	sl, #0
 80082c0:	f8bc b000 	ldrh.w	fp, [ip]
 80082c4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80082c8:	fb09 770b 	mla	r7, r9, fp, r7
 80082cc:	4457      	add	r7, sl
 80082ce:	b29b      	uxth	r3, r3
 80082d0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80082d4:	f84e 3b04 	str.w	r3, [lr], #4
 80082d8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80082dc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80082e0:	f8be 3000 	ldrh.w	r3, [lr]
 80082e4:	fb09 330a 	mla	r3, r9, sl, r3
 80082e8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80082ec:	4562      	cmp	r2, ip
 80082ee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80082f2:	d8e5      	bhi.n	80082c0 <__multiply+0x10c>
 80082f4:	9f01      	ldr	r7, [sp, #4]
 80082f6:	51eb      	str	r3, [r5, r7]
 80082f8:	3504      	adds	r5, #4
 80082fa:	e799      	b.n	8008230 <__multiply+0x7c>
 80082fc:	3e01      	subs	r6, #1
 80082fe:	e79b      	b.n	8008238 <__multiply+0x84>
 8008300:	080092b8 	.word	0x080092b8
 8008304:	080092c9 	.word	0x080092c9

08008308 <__pow5mult>:
 8008308:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800830c:	4615      	mov	r5, r2
 800830e:	f012 0203 	ands.w	r2, r2, #3
 8008312:	4607      	mov	r7, r0
 8008314:	460e      	mov	r6, r1
 8008316:	d007      	beq.n	8008328 <__pow5mult+0x20>
 8008318:	4c25      	ldr	r4, [pc, #148]	@ (80083b0 <__pow5mult+0xa8>)
 800831a:	3a01      	subs	r2, #1
 800831c:	2300      	movs	r3, #0
 800831e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008322:	f7ff fe9f 	bl	8008064 <__multadd>
 8008326:	4606      	mov	r6, r0
 8008328:	10ad      	asrs	r5, r5, #2
 800832a:	d03d      	beq.n	80083a8 <__pow5mult+0xa0>
 800832c:	69fc      	ldr	r4, [r7, #28]
 800832e:	b97c      	cbnz	r4, 8008350 <__pow5mult+0x48>
 8008330:	2010      	movs	r0, #16
 8008332:	f7ff fd7f 	bl	8007e34 <malloc>
 8008336:	4602      	mov	r2, r0
 8008338:	61f8      	str	r0, [r7, #28]
 800833a:	b928      	cbnz	r0, 8008348 <__pow5mult+0x40>
 800833c:	4b1d      	ldr	r3, [pc, #116]	@ (80083b4 <__pow5mult+0xac>)
 800833e:	481e      	ldr	r0, [pc, #120]	@ (80083b8 <__pow5mult+0xb0>)
 8008340:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008344:	f000 fbea 	bl	8008b1c <__assert_func>
 8008348:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800834c:	6004      	str	r4, [r0, #0]
 800834e:	60c4      	str	r4, [r0, #12]
 8008350:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008354:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008358:	b94c      	cbnz	r4, 800836e <__pow5mult+0x66>
 800835a:	f240 2171 	movw	r1, #625	@ 0x271
 800835e:	4638      	mov	r0, r7
 8008360:	f7ff ff12 	bl	8008188 <__i2b>
 8008364:	2300      	movs	r3, #0
 8008366:	f8c8 0008 	str.w	r0, [r8, #8]
 800836a:	4604      	mov	r4, r0
 800836c:	6003      	str	r3, [r0, #0]
 800836e:	f04f 0900 	mov.w	r9, #0
 8008372:	07eb      	lsls	r3, r5, #31
 8008374:	d50a      	bpl.n	800838c <__pow5mult+0x84>
 8008376:	4631      	mov	r1, r6
 8008378:	4622      	mov	r2, r4
 800837a:	4638      	mov	r0, r7
 800837c:	f7ff ff1a 	bl	80081b4 <__multiply>
 8008380:	4631      	mov	r1, r6
 8008382:	4680      	mov	r8, r0
 8008384:	4638      	mov	r0, r7
 8008386:	f7ff fe4b 	bl	8008020 <_Bfree>
 800838a:	4646      	mov	r6, r8
 800838c:	106d      	asrs	r5, r5, #1
 800838e:	d00b      	beq.n	80083a8 <__pow5mult+0xa0>
 8008390:	6820      	ldr	r0, [r4, #0]
 8008392:	b938      	cbnz	r0, 80083a4 <__pow5mult+0x9c>
 8008394:	4622      	mov	r2, r4
 8008396:	4621      	mov	r1, r4
 8008398:	4638      	mov	r0, r7
 800839a:	f7ff ff0b 	bl	80081b4 <__multiply>
 800839e:	6020      	str	r0, [r4, #0]
 80083a0:	f8c0 9000 	str.w	r9, [r0]
 80083a4:	4604      	mov	r4, r0
 80083a6:	e7e4      	b.n	8008372 <__pow5mult+0x6a>
 80083a8:	4630      	mov	r0, r6
 80083aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083ae:	bf00      	nop
 80083b0:	08009324 	.word	0x08009324
 80083b4:	08009249 	.word	0x08009249
 80083b8:	080092c9 	.word	0x080092c9

080083bc <__lshift>:
 80083bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083c0:	460c      	mov	r4, r1
 80083c2:	6849      	ldr	r1, [r1, #4]
 80083c4:	6923      	ldr	r3, [r4, #16]
 80083c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80083ca:	68a3      	ldr	r3, [r4, #8]
 80083cc:	4607      	mov	r7, r0
 80083ce:	4691      	mov	r9, r2
 80083d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80083d4:	f108 0601 	add.w	r6, r8, #1
 80083d8:	42b3      	cmp	r3, r6
 80083da:	db0b      	blt.n	80083f4 <__lshift+0x38>
 80083dc:	4638      	mov	r0, r7
 80083de:	f7ff fddf 	bl	8007fa0 <_Balloc>
 80083e2:	4605      	mov	r5, r0
 80083e4:	b948      	cbnz	r0, 80083fa <__lshift+0x3e>
 80083e6:	4602      	mov	r2, r0
 80083e8:	4b28      	ldr	r3, [pc, #160]	@ (800848c <__lshift+0xd0>)
 80083ea:	4829      	ldr	r0, [pc, #164]	@ (8008490 <__lshift+0xd4>)
 80083ec:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80083f0:	f000 fb94 	bl	8008b1c <__assert_func>
 80083f4:	3101      	adds	r1, #1
 80083f6:	005b      	lsls	r3, r3, #1
 80083f8:	e7ee      	b.n	80083d8 <__lshift+0x1c>
 80083fa:	2300      	movs	r3, #0
 80083fc:	f100 0114 	add.w	r1, r0, #20
 8008400:	f100 0210 	add.w	r2, r0, #16
 8008404:	4618      	mov	r0, r3
 8008406:	4553      	cmp	r3, sl
 8008408:	db33      	blt.n	8008472 <__lshift+0xb6>
 800840a:	6920      	ldr	r0, [r4, #16]
 800840c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008410:	f104 0314 	add.w	r3, r4, #20
 8008414:	f019 091f 	ands.w	r9, r9, #31
 8008418:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800841c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008420:	d02b      	beq.n	800847a <__lshift+0xbe>
 8008422:	f1c9 0e20 	rsb	lr, r9, #32
 8008426:	468a      	mov	sl, r1
 8008428:	2200      	movs	r2, #0
 800842a:	6818      	ldr	r0, [r3, #0]
 800842c:	fa00 f009 	lsl.w	r0, r0, r9
 8008430:	4310      	orrs	r0, r2
 8008432:	f84a 0b04 	str.w	r0, [sl], #4
 8008436:	f853 2b04 	ldr.w	r2, [r3], #4
 800843a:	459c      	cmp	ip, r3
 800843c:	fa22 f20e 	lsr.w	r2, r2, lr
 8008440:	d8f3      	bhi.n	800842a <__lshift+0x6e>
 8008442:	ebac 0304 	sub.w	r3, ip, r4
 8008446:	3b15      	subs	r3, #21
 8008448:	f023 0303 	bic.w	r3, r3, #3
 800844c:	3304      	adds	r3, #4
 800844e:	f104 0015 	add.w	r0, r4, #21
 8008452:	4584      	cmp	ip, r0
 8008454:	bf38      	it	cc
 8008456:	2304      	movcc	r3, #4
 8008458:	50ca      	str	r2, [r1, r3]
 800845a:	b10a      	cbz	r2, 8008460 <__lshift+0xa4>
 800845c:	f108 0602 	add.w	r6, r8, #2
 8008460:	3e01      	subs	r6, #1
 8008462:	4638      	mov	r0, r7
 8008464:	612e      	str	r6, [r5, #16]
 8008466:	4621      	mov	r1, r4
 8008468:	f7ff fdda 	bl	8008020 <_Bfree>
 800846c:	4628      	mov	r0, r5
 800846e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008472:	f842 0f04 	str.w	r0, [r2, #4]!
 8008476:	3301      	adds	r3, #1
 8008478:	e7c5      	b.n	8008406 <__lshift+0x4a>
 800847a:	3904      	subs	r1, #4
 800847c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008480:	f841 2f04 	str.w	r2, [r1, #4]!
 8008484:	459c      	cmp	ip, r3
 8008486:	d8f9      	bhi.n	800847c <__lshift+0xc0>
 8008488:	e7ea      	b.n	8008460 <__lshift+0xa4>
 800848a:	bf00      	nop
 800848c:	080092b8 	.word	0x080092b8
 8008490:	080092c9 	.word	0x080092c9

08008494 <__mcmp>:
 8008494:	690a      	ldr	r2, [r1, #16]
 8008496:	4603      	mov	r3, r0
 8008498:	6900      	ldr	r0, [r0, #16]
 800849a:	1a80      	subs	r0, r0, r2
 800849c:	b530      	push	{r4, r5, lr}
 800849e:	d10e      	bne.n	80084be <__mcmp+0x2a>
 80084a0:	3314      	adds	r3, #20
 80084a2:	3114      	adds	r1, #20
 80084a4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80084a8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80084ac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80084b0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80084b4:	4295      	cmp	r5, r2
 80084b6:	d003      	beq.n	80084c0 <__mcmp+0x2c>
 80084b8:	d205      	bcs.n	80084c6 <__mcmp+0x32>
 80084ba:	f04f 30ff 	mov.w	r0, #4294967295
 80084be:	bd30      	pop	{r4, r5, pc}
 80084c0:	42a3      	cmp	r3, r4
 80084c2:	d3f3      	bcc.n	80084ac <__mcmp+0x18>
 80084c4:	e7fb      	b.n	80084be <__mcmp+0x2a>
 80084c6:	2001      	movs	r0, #1
 80084c8:	e7f9      	b.n	80084be <__mcmp+0x2a>
	...

080084cc <__mdiff>:
 80084cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084d0:	4689      	mov	r9, r1
 80084d2:	4606      	mov	r6, r0
 80084d4:	4611      	mov	r1, r2
 80084d6:	4648      	mov	r0, r9
 80084d8:	4614      	mov	r4, r2
 80084da:	f7ff ffdb 	bl	8008494 <__mcmp>
 80084de:	1e05      	subs	r5, r0, #0
 80084e0:	d112      	bne.n	8008508 <__mdiff+0x3c>
 80084e2:	4629      	mov	r1, r5
 80084e4:	4630      	mov	r0, r6
 80084e6:	f7ff fd5b 	bl	8007fa0 <_Balloc>
 80084ea:	4602      	mov	r2, r0
 80084ec:	b928      	cbnz	r0, 80084fa <__mdiff+0x2e>
 80084ee:	4b3f      	ldr	r3, [pc, #252]	@ (80085ec <__mdiff+0x120>)
 80084f0:	f240 2137 	movw	r1, #567	@ 0x237
 80084f4:	483e      	ldr	r0, [pc, #248]	@ (80085f0 <__mdiff+0x124>)
 80084f6:	f000 fb11 	bl	8008b1c <__assert_func>
 80084fa:	2301      	movs	r3, #1
 80084fc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008500:	4610      	mov	r0, r2
 8008502:	b003      	add	sp, #12
 8008504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008508:	bfbc      	itt	lt
 800850a:	464b      	movlt	r3, r9
 800850c:	46a1      	movlt	r9, r4
 800850e:	4630      	mov	r0, r6
 8008510:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008514:	bfba      	itte	lt
 8008516:	461c      	movlt	r4, r3
 8008518:	2501      	movlt	r5, #1
 800851a:	2500      	movge	r5, #0
 800851c:	f7ff fd40 	bl	8007fa0 <_Balloc>
 8008520:	4602      	mov	r2, r0
 8008522:	b918      	cbnz	r0, 800852c <__mdiff+0x60>
 8008524:	4b31      	ldr	r3, [pc, #196]	@ (80085ec <__mdiff+0x120>)
 8008526:	f240 2145 	movw	r1, #581	@ 0x245
 800852a:	e7e3      	b.n	80084f4 <__mdiff+0x28>
 800852c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008530:	6926      	ldr	r6, [r4, #16]
 8008532:	60c5      	str	r5, [r0, #12]
 8008534:	f109 0310 	add.w	r3, r9, #16
 8008538:	f109 0514 	add.w	r5, r9, #20
 800853c:	f104 0e14 	add.w	lr, r4, #20
 8008540:	f100 0b14 	add.w	fp, r0, #20
 8008544:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008548:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800854c:	9301      	str	r3, [sp, #4]
 800854e:	46d9      	mov	r9, fp
 8008550:	f04f 0c00 	mov.w	ip, #0
 8008554:	9b01      	ldr	r3, [sp, #4]
 8008556:	f85e 0b04 	ldr.w	r0, [lr], #4
 800855a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800855e:	9301      	str	r3, [sp, #4]
 8008560:	fa1f f38a 	uxth.w	r3, sl
 8008564:	4619      	mov	r1, r3
 8008566:	b283      	uxth	r3, r0
 8008568:	1acb      	subs	r3, r1, r3
 800856a:	0c00      	lsrs	r0, r0, #16
 800856c:	4463      	add	r3, ip
 800856e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008572:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008576:	b29b      	uxth	r3, r3
 8008578:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800857c:	4576      	cmp	r6, lr
 800857e:	f849 3b04 	str.w	r3, [r9], #4
 8008582:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008586:	d8e5      	bhi.n	8008554 <__mdiff+0x88>
 8008588:	1b33      	subs	r3, r6, r4
 800858a:	3b15      	subs	r3, #21
 800858c:	f023 0303 	bic.w	r3, r3, #3
 8008590:	3415      	adds	r4, #21
 8008592:	3304      	adds	r3, #4
 8008594:	42a6      	cmp	r6, r4
 8008596:	bf38      	it	cc
 8008598:	2304      	movcc	r3, #4
 800859a:	441d      	add	r5, r3
 800859c:	445b      	add	r3, fp
 800859e:	461e      	mov	r6, r3
 80085a0:	462c      	mov	r4, r5
 80085a2:	4544      	cmp	r4, r8
 80085a4:	d30e      	bcc.n	80085c4 <__mdiff+0xf8>
 80085a6:	f108 0103 	add.w	r1, r8, #3
 80085aa:	1b49      	subs	r1, r1, r5
 80085ac:	f021 0103 	bic.w	r1, r1, #3
 80085b0:	3d03      	subs	r5, #3
 80085b2:	45a8      	cmp	r8, r5
 80085b4:	bf38      	it	cc
 80085b6:	2100      	movcc	r1, #0
 80085b8:	440b      	add	r3, r1
 80085ba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80085be:	b191      	cbz	r1, 80085e6 <__mdiff+0x11a>
 80085c0:	6117      	str	r7, [r2, #16]
 80085c2:	e79d      	b.n	8008500 <__mdiff+0x34>
 80085c4:	f854 1b04 	ldr.w	r1, [r4], #4
 80085c8:	46e6      	mov	lr, ip
 80085ca:	0c08      	lsrs	r0, r1, #16
 80085cc:	fa1c fc81 	uxtah	ip, ip, r1
 80085d0:	4471      	add	r1, lr
 80085d2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80085d6:	b289      	uxth	r1, r1
 80085d8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80085dc:	f846 1b04 	str.w	r1, [r6], #4
 80085e0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80085e4:	e7dd      	b.n	80085a2 <__mdiff+0xd6>
 80085e6:	3f01      	subs	r7, #1
 80085e8:	e7e7      	b.n	80085ba <__mdiff+0xee>
 80085ea:	bf00      	nop
 80085ec:	080092b8 	.word	0x080092b8
 80085f0:	080092c9 	.word	0x080092c9

080085f4 <__d2b>:
 80085f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80085f8:	460f      	mov	r7, r1
 80085fa:	2101      	movs	r1, #1
 80085fc:	ec59 8b10 	vmov	r8, r9, d0
 8008600:	4616      	mov	r6, r2
 8008602:	f7ff fccd 	bl	8007fa0 <_Balloc>
 8008606:	4604      	mov	r4, r0
 8008608:	b930      	cbnz	r0, 8008618 <__d2b+0x24>
 800860a:	4602      	mov	r2, r0
 800860c:	4b23      	ldr	r3, [pc, #140]	@ (800869c <__d2b+0xa8>)
 800860e:	4824      	ldr	r0, [pc, #144]	@ (80086a0 <__d2b+0xac>)
 8008610:	f240 310f 	movw	r1, #783	@ 0x30f
 8008614:	f000 fa82 	bl	8008b1c <__assert_func>
 8008618:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800861c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008620:	b10d      	cbz	r5, 8008626 <__d2b+0x32>
 8008622:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008626:	9301      	str	r3, [sp, #4]
 8008628:	f1b8 0300 	subs.w	r3, r8, #0
 800862c:	d023      	beq.n	8008676 <__d2b+0x82>
 800862e:	4668      	mov	r0, sp
 8008630:	9300      	str	r3, [sp, #0]
 8008632:	f7ff fd7c 	bl	800812e <__lo0bits>
 8008636:	e9dd 1200 	ldrd	r1, r2, [sp]
 800863a:	b1d0      	cbz	r0, 8008672 <__d2b+0x7e>
 800863c:	f1c0 0320 	rsb	r3, r0, #32
 8008640:	fa02 f303 	lsl.w	r3, r2, r3
 8008644:	430b      	orrs	r3, r1
 8008646:	40c2      	lsrs	r2, r0
 8008648:	6163      	str	r3, [r4, #20]
 800864a:	9201      	str	r2, [sp, #4]
 800864c:	9b01      	ldr	r3, [sp, #4]
 800864e:	61a3      	str	r3, [r4, #24]
 8008650:	2b00      	cmp	r3, #0
 8008652:	bf0c      	ite	eq
 8008654:	2201      	moveq	r2, #1
 8008656:	2202      	movne	r2, #2
 8008658:	6122      	str	r2, [r4, #16]
 800865a:	b1a5      	cbz	r5, 8008686 <__d2b+0x92>
 800865c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008660:	4405      	add	r5, r0
 8008662:	603d      	str	r5, [r7, #0]
 8008664:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008668:	6030      	str	r0, [r6, #0]
 800866a:	4620      	mov	r0, r4
 800866c:	b003      	add	sp, #12
 800866e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008672:	6161      	str	r1, [r4, #20]
 8008674:	e7ea      	b.n	800864c <__d2b+0x58>
 8008676:	a801      	add	r0, sp, #4
 8008678:	f7ff fd59 	bl	800812e <__lo0bits>
 800867c:	9b01      	ldr	r3, [sp, #4]
 800867e:	6163      	str	r3, [r4, #20]
 8008680:	3020      	adds	r0, #32
 8008682:	2201      	movs	r2, #1
 8008684:	e7e8      	b.n	8008658 <__d2b+0x64>
 8008686:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800868a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800868e:	6038      	str	r0, [r7, #0]
 8008690:	6918      	ldr	r0, [r3, #16]
 8008692:	f7ff fd2d 	bl	80080f0 <__hi0bits>
 8008696:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800869a:	e7e5      	b.n	8008668 <__d2b+0x74>
 800869c:	080092b8 	.word	0x080092b8
 80086a0:	080092c9 	.word	0x080092c9

080086a4 <__ssputs_r>:
 80086a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086a8:	688e      	ldr	r6, [r1, #8]
 80086aa:	461f      	mov	r7, r3
 80086ac:	42be      	cmp	r6, r7
 80086ae:	680b      	ldr	r3, [r1, #0]
 80086b0:	4682      	mov	sl, r0
 80086b2:	460c      	mov	r4, r1
 80086b4:	4690      	mov	r8, r2
 80086b6:	d82d      	bhi.n	8008714 <__ssputs_r+0x70>
 80086b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80086bc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80086c0:	d026      	beq.n	8008710 <__ssputs_r+0x6c>
 80086c2:	6965      	ldr	r5, [r4, #20]
 80086c4:	6909      	ldr	r1, [r1, #16]
 80086c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80086ca:	eba3 0901 	sub.w	r9, r3, r1
 80086ce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80086d2:	1c7b      	adds	r3, r7, #1
 80086d4:	444b      	add	r3, r9
 80086d6:	106d      	asrs	r5, r5, #1
 80086d8:	429d      	cmp	r5, r3
 80086da:	bf38      	it	cc
 80086dc:	461d      	movcc	r5, r3
 80086de:	0553      	lsls	r3, r2, #21
 80086e0:	d527      	bpl.n	8008732 <__ssputs_r+0x8e>
 80086e2:	4629      	mov	r1, r5
 80086e4:	f7ff fbd0 	bl	8007e88 <_malloc_r>
 80086e8:	4606      	mov	r6, r0
 80086ea:	b360      	cbz	r0, 8008746 <__ssputs_r+0xa2>
 80086ec:	6921      	ldr	r1, [r4, #16]
 80086ee:	464a      	mov	r2, r9
 80086f0:	f000 fa06 	bl	8008b00 <memcpy>
 80086f4:	89a3      	ldrh	r3, [r4, #12]
 80086f6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80086fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80086fe:	81a3      	strh	r3, [r4, #12]
 8008700:	6126      	str	r6, [r4, #16]
 8008702:	6165      	str	r5, [r4, #20]
 8008704:	444e      	add	r6, r9
 8008706:	eba5 0509 	sub.w	r5, r5, r9
 800870a:	6026      	str	r6, [r4, #0]
 800870c:	60a5      	str	r5, [r4, #8]
 800870e:	463e      	mov	r6, r7
 8008710:	42be      	cmp	r6, r7
 8008712:	d900      	bls.n	8008716 <__ssputs_r+0x72>
 8008714:	463e      	mov	r6, r7
 8008716:	6820      	ldr	r0, [r4, #0]
 8008718:	4632      	mov	r2, r6
 800871a:	4641      	mov	r1, r8
 800871c:	f000 f9c6 	bl	8008aac <memmove>
 8008720:	68a3      	ldr	r3, [r4, #8]
 8008722:	1b9b      	subs	r3, r3, r6
 8008724:	60a3      	str	r3, [r4, #8]
 8008726:	6823      	ldr	r3, [r4, #0]
 8008728:	4433      	add	r3, r6
 800872a:	6023      	str	r3, [r4, #0]
 800872c:	2000      	movs	r0, #0
 800872e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008732:	462a      	mov	r2, r5
 8008734:	f000 fa36 	bl	8008ba4 <_realloc_r>
 8008738:	4606      	mov	r6, r0
 800873a:	2800      	cmp	r0, #0
 800873c:	d1e0      	bne.n	8008700 <__ssputs_r+0x5c>
 800873e:	6921      	ldr	r1, [r4, #16]
 8008740:	4650      	mov	r0, sl
 8008742:	f7ff fb2d 	bl	8007da0 <_free_r>
 8008746:	230c      	movs	r3, #12
 8008748:	f8ca 3000 	str.w	r3, [sl]
 800874c:	89a3      	ldrh	r3, [r4, #12]
 800874e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008752:	81a3      	strh	r3, [r4, #12]
 8008754:	f04f 30ff 	mov.w	r0, #4294967295
 8008758:	e7e9      	b.n	800872e <__ssputs_r+0x8a>
	...

0800875c <_svfiprintf_r>:
 800875c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008760:	4698      	mov	r8, r3
 8008762:	898b      	ldrh	r3, [r1, #12]
 8008764:	061b      	lsls	r3, r3, #24
 8008766:	b09d      	sub	sp, #116	@ 0x74
 8008768:	4607      	mov	r7, r0
 800876a:	460d      	mov	r5, r1
 800876c:	4614      	mov	r4, r2
 800876e:	d510      	bpl.n	8008792 <_svfiprintf_r+0x36>
 8008770:	690b      	ldr	r3, [r1, #16]
 8008772:	b973      	cbnz	r3, 8008792 <_svfiprintf_r+0x36>
 8008774:	2140      	movs	r1, #64	@ 0x40
 8008776:	f7ff fb87 	bl	8007e88 <_malloc_r>
 800877a:	6028      	str	r0, [r5, #0]
 800877c:	6128      	str	r0, [r5, #16]
 800877e:	b930      	cbnz	r0, 800878e <_svfiprintf_r+0x32>
 8008780:	230c      	movs	r3, #12
 8008782:	603b      	str	r3, [r7, #0]
 8008784:	f04f 30ff 	mov.w	r0, #4294967295
 8008788:	b01d      	add	sp, #116	@ 0x74
 800878a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800878e:	2340      	movs	r3, #64	@ 0x40
 8008790:	616b      	str	r3, [r5, #20]
 8008792:	2300      	movs	r3, #0
 8008794:	9309      	str	r3, [sp, #36]	@ 0x24
 8008796:	2320      	movs	r3, #32
 8008798:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800879c:	f8cd 800c 	str.w	r8, [sp, #12]
 80087a0:	2330      	movs	r3, #48	@ 0x30
 80087a2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008940 <_svfiprintf_r+0x1e4>
 80087a6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80087aa:	f04f 0901 	mov.w	r9, #1
 80087ae:	4623      	mov	r3, r4
 80087b0:	469a      	mov	sl, r3
 80087b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087b6:	b10a      	cbz	r2, 80087bc <_svfiprintf_r+0x60>
 80087b8:	2a25      	cmp	r2, #37	@ 0x25
 80087ba:	d1f9      	bne.n	80087b0 <_svfiprintf_r+0x54>
 80087bc:	ebba 0b04 	subs.w	fp, sl, r4
 80087c0:	d00b      	beq.n	80087da <_svfiprintf_r+0x7e>
 80087c2:	465b      	mov	r3, fp
 80087c4:	4622      	mov	r2, r4
 80087c6:	4629      	mov	r1, r5
 80087c8:	4638      	mov	r0, r7
 80087ca:	f7ff ff6b 	bl	80086a4 <__ssputs_r>
 80087ce:	3001      	adds	r0, #1
 80087d0:	f000 80a7 	beq.w	8008922 <_svfiprintf_r+0x1c6>
 80087d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80087d6:	445a      	add	r2, fp
 80087d8:	9209      	str	r2, [sp, #36]	@ 0x24
 80087da:	f89a 3000 	ldrb.w	r3, [sl]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	f000 809f 	beq.w	8008922 <_svfiprintf_r+0x1c6>
 80087e4:	2300      	movs	r3, #0
 80087e6:	f04f 32ff 	mov.w	r2, #4294967295
 80087ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80087ee:	f10a 0a01 	add.w	sl, sl, #1
 80087f2:	9304      	str	r3, [sp, #16]
 80087f4:	9307      	str	r3, [sp, #28]
 80087f6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80087fa:	931a      	str	r3, [sp, #104]	@ 0x68
 80087fc:	4654      	mov	r4, sl
 80087fe:	2205      	movs	r2, #5
 8008800:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008804:	484e      	ldr	r0, [pc, #312]	@ (8008940 <_svfiprintf_r+0x1e4>)
 8008806:	f7f7 fd13 	bl	8000230 <memchr>
 800880a:	9a04      	ldr	r2, [sp, #16]
 800880c:	b9d8      	cbnz	r0, 8008846 <_svfiprintf_r+0xea>
 800880e:	06d0      	lsls	r0, r2, #27
 8008810:	bf44      	itt	mi
 8008812:	2320      	movmi	r3, #32
 8008814:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008818:	0711      	lsls	r1, r2, #28
 800881a:	bf44      	itt	mi
 800881c:	232b      	movmi	r3, #43	@ 0x2b
 800881e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008822:	f89a 3000 	ldrb.w	r3, [sl]
 8008826:	2b2a      	cmp	r3, #42	@ 0x2a
 8008828:	d015      	beq.n	8008856 <_svfiprintf_r+0xfa>
 800882a:	9a07      	ldr	r2, [sp, #28]
 800882c:	4654      	mov	r4, sl
 800882e:	2000      	movs	r0, #0
 8008830:	f04f 0c0a 	mov.w	ip, #10
 8008834:	4621      	mov	r1, r4
 8008836:	f811 3b01 	ldrb.w	r3, [r1], #1
 800883a:	3b30      	subs	r3, #48	@ 0x30
 800883c:	2b09      	cmp	r3, #9
 800883e:	d94b      	bls.n	80088d8 <_svfiprintf_r+0x17c>
 8008840:	b1b0      	cbz	r0, 8008870 <_svfiprintf_r+0x114>
 8008842:	9207      	str	r2, [sp, #28]
 8008844:	e014      	b.n	8008870 <_svfiprintf_r+0x114>
 8008846:	eba0 0308 	sub.w	r3, r0, r8
 800884a:	fa09 f303 	lsl.w	r3, r9, r3
 800884e:	4313      	orrs	r3, r2
 8008850:	9304      	str	r3, [sp, #16]
 8008852:	46a2      	mov	sl, r4
 8008854:	e7d2      	b.n	80087fc <_svfiprintf_r+0xa0>
 8008856:	9b03      	ldr	r3, [sp, #12]
 8008858:	1d19      	adds	r1, r3, #4
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	9103      	str	r1, [sp, #12]
 800885e:	2b00      	cmp	r3, #0
 8008860:	bfbb      	ittet	lt
 8008862:	425b      	neglt	r3, r3
 8008864:	f042 0202 	orrlt.w	r2, r2, #2
 8008868:	9307      	strge	r3, [sp, #28]
 800886a:	9307      	strlt	r3, [sp, #28]
 800886c:	bfb8      	it	lt
 800886e:	9204      	strlt	r2, [sp, #16]
 8008870:	7823      	ldrb	r3, [r4, #0]
 8008872:	2b2e      	cmp	r3, #46	@ 0x2e
 8008874:	d10a      	bne.n	800888c <_svfiprintf_r+0x130>
 8008876:	7863      	ldrb	r3, [r4, #1]
 8008878:	2b2a      	cmp	r3, #42	@ 0x2a
 800887a:	d132      	bne.n	80088e2 <_svfiprintf_r+0x186>
 800887c:	9b03      	ldr	r3, [sp, #12]
 800887e:	1d1a      	adds	r2, r3, #4
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	9203      	str	r2, [sp, #12]
 8008884:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008888:	3402      	adds	r4, #2
 800888a:	9305      	str	r3, [sp, #20]
 800888c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008950 <_svfiprintf_r+0x1f4>
 8008890:	7821      	ldrb	r1, [r4, #0]
 8008892:	2203      	movs	r2, #3
 8008894:	4650      	mov	r0, sl
 8008896:	f7f7 fccb 	bl	8000230 <memchr>
 800889a:	b138      	cbz	r0, 80088ac <_svfiprintf_r+0x150>
 800889c:	9b04      	ldr	r3, [sp, #16]
 800889e:	eba0 000a 	sub.w	r0, r0, sl
 80088a2:	2240      	movs	r2, #64	@ 0x40
 80088a4:	4082      	lsls	r2, r0
 80088a6:	4313      	orrs	r3, r2
 80088a8:	3401      	adds	r4, #1
 80088aa:	9304      	str	r3, [sp, #16]
 80088ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088b0:	4824      	ldr	r0, [pc, #144]	@ (8008944 <_svfiprintf_r+0x1e8>)
 80088b2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80088b6:	2206      	movs	r2, #6
 80088b8:	f7f7 fcba 	bl	8000230 <memchr>
 80088bc:	2800      	cmp	r0, #0
 80088be:	d036      	beq.n	800892e <_svfiprintf_r+0x1d2>
 80088c0:	4b21      	ldr	r3, [pc, #132]	@ (8008948 <_svfiprintf_r+0x1ec>)
 80088c2:	bb1b      	cbnz	r3, 800890c <_svfiprintf_r+0x1b0>
 80088c4:	9b03      	ldr	r3, [sp, #12]
 80088c6:	3307      	adds	r3, #7
 80088c8:	f023 0307 	bic.w	r3, r3, #7
 80088cc:	3308      	adds	r3, #8
 80088ce:	9303      	str	r3, [sp, #12]
 80088d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088d2:	4433      	add	r3, r6
 80088d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80088d6:	e76a      	b.n	80087ae <_svfiprintf_r+0x52>
 80088d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80088dc:	460c      	mov	r4, r1
 80088de:	2001      	movs	r0, #1
 80088e0:	e7a8      	b.n	8008834 <_svfiprintf_r+0xd8>
 80088e2:	2300      	movs	r3, #0
 80088e4:	3401      	adds	r4, #1
 80088e6:	9305      	str	r3, [sp, #20]
 80088e8:	4619      	mov	r1, r3
 80088ea:	f04f 0c0a 	mov.w	ip, #10
 80088ee:	4620      	mov	r0, r4
 80088f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80088f4:	3a30      	subs	r2, #48	@ 0x30
 80088f6:	2a09      	cmp	r2, #9
 80088f8:	d903      	bls.n	8008902 <_svfiprintf_r+0x1a6>
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d0c6      	beq.n	800888c <_svfiprintf_r+0x130>
 80088fe:	9105      	str	r1, [sp, #20]
 8008900:	e7c4      	b.n	800888c <_svfiprintf_r+0x130>
 8008902:	fb0c 2101 	mla	r1, ip, r1, r2
 8008906:	4604      	mov	r4, r0
 8008908:	2301      	movs	r3, #1
 800890a:	e7f0      	b.n	80088ee <_svfiprintf_r+0x192>
 800890c:	ab03      	add	r3, sp, #12
 800890e:	9300      	str	r3, [sp, #0]
 8008910:	462a      	mov	r2, r5
 8008912:	4b0e      	ldr	r3, [pc, #56]	@ (800894c <_svfiprintf_r+0x1f0>)
 8008914:	a904      	add	r1, sp, #16
 8008916:	4638      	mov	r0, r7
 8008918:	f7fd fe98 	bl	800664c <_printf_float>
 800891c:	1c42      	adds	r2, r0, #1
 800891e:	4606      	mov	r6, r0
 8008920:	d1d6      	bne.n	80088d0 <_svfiprintf_r+0x174>
 8008922:	89ab      	ldrh	r3, [r5, #12]
 8008924:	065b      	lsls	r3, r3, #25
 8008926:	f53f af2d 	bmi.w	8008784 <_svfiprintf_r+0x28>
 800892a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800892c:	e72c      	b.n	8008788 <_svfiprintf_r+0x2c>
 800892e:	ab03      	add	r3, sp, #12
 8008930:	9300      	str	r3, [sp, #0]
 8008932:	462a      	mov	r2, r5
 8008934:	4b05      	ldr	r3, [pc, #20]	@ (800894c <_svfiprintf_r+0x1f0>)
 8008936:	a904      	add	r1, sp, #16
 8008938:	4638      	mov	r0, r7
 800893a:	f7fe f91f 	bl	8006b7c <_printf_i>
 800893e:	e7ed      	b.n	800891c <_svfiprintf_r+0x1c0>
 8008940:	08009420 	.word	0x08009420
 8008944:	0800942a 	.word	0x0800942a
 8008948:	0800664d 	.word	0x0800664d
 800894c:	080086a5 	.word	0x080086a5
 8008950:	08009426 	.word	0x08009426

08008954 <__sflush_r>:
 8008954:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800895c:	0716      	lsls	r6, r2, #28
 800895e:	4605      	mov	r5, r0
 8008960:	460c      	mov	r4, r1
 8008962:	d454      	bmi.n	8008a0e <__sflush_r+0xba>
 8008964:	684b      	ldr	r3, [r1, #4]
 8008966:	2b00      	cmp	r3, #0
 8008968:	dc02      	bgt.n	8008970 <__sflush_r+0x1c>
 800896a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800896c:	2b00      	cmp	r3, #0
 800896e:	dd48      	ble.n	8008a02 <__sflush_r+0xae>
 8008970:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008972:	2e00      	cmp	r6, #0
 8008974:	d045      	beq.n	8008a02 <__sflush_r+0xae>
 8008976:	2300      	movs	r3, #0
 8008978:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800897c:	682f      	ldr	r7, [r5, #0]
 800897e:	6a21      	ldr	r1, [r4, #32]
 8008980:	602b      	str	r3, [r5, #0]
 8008982:	d030      	beq.n	80089e6 <__sflush_r+0x92>
 8008984:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008986:	89a3      	ldrh	r3, [r4, #12]
 8008988:	0759      	lsls	r1, r3, #29
 800898a:	d505      	bpl.n	8008998 <__sflush_r+0x44>
 800898c:	6863      	ldr	r3, [r4, #4]
 800898e:	1ad2      	subs	r2, r2, r3
 8008990:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008992:	b10b      	cbz	r3, 8008998 <__sflush_r+0x44>
 8008994:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008996:	1ad2      	subs	r2, r2, r3
 8008998:	2300      	movs	r3, #0
 800899a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800899c:	6a21      	ldr	r1, [r4, #32]
 800899e:	4628      	mov	r0, r5
 80089a0:	47b0      	blx	r6
 80089a2:	1c43      	adds	r3, r0, #1
 80089a4:	89a3      	ldrh	r3, [r4, #12]
 80089a6:	d106      	bne.n	80089b6 <__sflush_r+0x62>
 80089a8:	6829      	ldr	r1, [r5, #0]
 80089aa:	291d      	cmp	r1, #29
 80089ac:	d82b      	bhi.n	8008a06 <__sflush_r+0xb2>
 80089ae:	4a2a      	ldr	r2, [pc, #168]	@ (8008a58 <__sflush_r+0x104>)
 80089b0:	410a      	asrs	r2, r1
 80089b2:	07d6      	lsls	r6, r2, #31
 80089b4:	d427      	bmi.n	8008a06 <__sflush_r+0xb2>
 80089b6:	2200      	movs	r2, #0
 80089b8:	6062      	str	r2, [r4, #4]
 80089ba:	04d9      	lsls	r1, r3, #19
 80089bc:	6922      	ldr	r2, [r4, #16]
 80089be:	6022      	str	r2, [r4, #0]
 80089c0:	d504      	bpl.n	80089cc <__sflush_r+0x78>
 80089c2:	1c42      	adds	r2, r0, #1
 80089c4:	d101      	bne.n	80089ca <__sflush_r+0x76>
 80089c6:	682b      	ldr	r3, [r5, #0]
 80089c8:	b903      	cbnz	r3, 80089cc <__sflush_r+0x78>
 80089ca:	6560      	str	r0, [r4, #84]	@ 0x54
 80089cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80089ce:	602f      	str	r7, [r5, #0]
 80089d0:	b1b9      	cbz	r1, 8008a02 <__sflush_r+0xae>
 80089d2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80089d6:	4299      	cmp	r1, r3
 80089d8:	d002      	beq.n	80089e0 <__sflush_r+0x8c>
 80089da:	4628      	mov	r0, r5
 80089dc:	f7ff f9e0 	bl	8007da0 <_free_r>
 80089e0:	2300      	movs	r3, #0
 80089e2:	6363      	str	r3, [r4, #52]	@ 0x34
 80089e4:	e00d      	b.n	8008a02 <__sflush_r+0xae>
 80089e6:	2301      	movs	r3, #1
 80089e8:	4628      	mov	r0, r5
 80089ea:	47b0      	blx	r6
 80089ec:	4602      	mov	r2, r0
 80089ee:	1c50      	adds	r0, r2, #1
 80089f0:	d1c9      	bne.n	8008986 <__sflush_r+0x32>
 80089f2:	682b      	ldr	r3, [r5, #0]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d0c6      	beq.n	8008986 <__sflush_r+0x32>
 80089f8:	2b1d      	cmp	r3, #29
 80089fa:	d001      	beq.n	8008a00 <__sflush_r+0xac>
 80089fc:	2b16      	cmp	r3, #22
 80089fe:	d11e      	bne.n	8008a3e <__sflush_r+0xea>
 8008a00:	602f      	str	r7, [r5, #0]
 8008a02:	2000      	movs	r0, #0
 8008a04:	e022      	b.n	8008a4c <__sflush_r+0xf8>
 8008a06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a0a:	b21b      	sxth	r3, r3
 8008a0c:	e01b      	b.n	8008a46 <__sflush_r+0xf2>
 8008a0e:	690f      	ldr	r7, [r1, #16]
 8008a10:	2f00      	cmp	r7, #0
 8008a12:	d0f6      	beq.n	8008a02 <__sflush_r+0xae>
 8008a14:	0793      	lsls	r3, r2, #30
 8008a16:	680e      	ldr	r6, [r1, #0]
 8008a18:	bf08      	it	eq
 8008a1a:	694b      	ldreq	r3, [r1, #20]
 8008a1c:	600f      	str	r7, [r1, #0]
 8008a1e:	bf18      	it	ne
 8008a20:	2300      	movne	r3, #0
 8008a22:	eba6 0807 	sub.w	r8, r6, r7
 8008a26:	608b      	str	r3, [r1, #8]
 8008a28:	f1b8 0f00 	cmp.w	r8, #0
 8008a2c:	dde9      	ble.n	8008a02 <__sflush_r+0xae>
 8008a2e:	6a21      	ldr	r1, [r4, #32]
 8008a30:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008a32:	4643      	mov	r3, r8
 8008a34:	463a      	mov	r2, r7
 8008a36:	4628      	mov	r0, r5
 8008a38:	47b0      	blx	r6
 8008a3a:	2800      	cmp	r0, #0
 8008a3c:	dc08      	bgt.n	8008a50 <__sflush_r+0xfc>
 8008a3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a46:	81a3      	strh	r3, [r4, #12]
 8008a48:	f04f 30ff 	mov.w	r0, #4294967295
 8008a4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a50:	4407      	add	r7, r0
 8008a52:	eba8 0800 	sub.w	r8, r8, r0
 8008a56:	e7e7      	b.n	8008a28 <__sflush_r+0xd4>
 8008a58:	dfbffffe 	.word	0xdfbffffe

08008a5c <_fflush_r>:
 8008a5c:	b538      	push	{r3, r4, r5, lr}
 8008a5e:	690b      	ldr	r3, [r1, #16]
 8008a60:	4605      	mov	r5, r0
 8008a62:	460c      	mov	r4, r1
 8008a64:	b913      	cbnz	r3, 8008a6c <_fflush_r+0x10>
 8008a66:	2500      	movs	r5, #0
 8008a68:	4628      	mov	r0, r5
 8008a6a:	bd38      	pop	{r3, r4, r5, pc}
 8008a6c:	b118      	cbz	r0, 8008a76 <_fflush_r+0x1a>
 8008a6e:	6a03      	ldr	r3, [r0, #32]
 8008a70:	b90b      	cbnz	r3, 8008a76 <_fflush_r+0x1a>
 8008a72:	f7fe fa2f 	bl	8006ed4 <__sinit>
 8008a76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d0f3      	beq.n	8008a66 <_fflush_r+0xa>
 8008a7e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008a80:	07d0      	lsls	r0, r2, #31
 8008a82:	d404      	bmi.n	8008a8e <_fflush_r+0x32>
 8008a84:	0599      	lsls	r1, r3, #22
 8008a86:	d402      	bmi.n	8008a8e <_fflush_r+0x32>
 8008a88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008a8a:	f7fe fb3a 	bl	8007102 <__retarget_lock_acquire_recursive>
 8008a8e:	4628      	mov	r0, r5
 8008a90:	4621      	mov	r1, r4
 8008a92:	f7ff ff5f 	bl	8008954 <__sflush_r>
 8008a96:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008a98:	07da      	lsls	r2, r3, #31
 8008a9a:	4605      	mov	r5, r0
 8008a9c:	d4e4      	bmi.n	8008a68 <_fflush_r+0xc>
 8008a9e:	89a3      	ldrh	r3, [r4, #12]
 8008aa0:	059b      	lsls	r3, r3, #22
 8008aa2:	d4e1      	bmi.n	8008a68 <_fflush_r+0xc>
 8008aa4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008aa6:	f7fe fb2d 	bl	8007104 <__retarget_lock_release_recursive>
 8008aaa:	e7dd      	b.n	8008a68 <_fflush_r+0xc>

08008aac <memmove>:
 8008aac:	4288      	cmp	r0, r1
 8008aae:	b510      	push	{r4, lr}
 8008ab0:	eb01 0402 	add.w	r4, r1, r2
 8008ab4:	d902      	bls.n	8008abc <memmove+0x10>
 8008ab6:	4284      	cmp	r4, r0
 8008ab8:	4623      	mov	r3, r4
 8008aba:	d807      	bhi.n	8008acc <memmove+0x20>
 8008abc:	1e43      	subs	r3, r0, #1
 8008abe:	42a1      	cmp	r1, r4
 8008ac0:	d008      	beq.n	8008ad4 <memmove+0x28>
 8008ac2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008ac6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008aca:	e7f8      	b.n	8008abe <memmove+0x12>
 8008acc:	4402      	add	r2, r0
 8008ace:	4601      	mov	r1, r0
 8008ad0:	428a      	cmp	r2, r1
 8008ad2:	d100      	bne.n	8008ad6 <memmove+0x2a>
 8008ad4:	bd10      	pop	{r4, pc}
 8008ad6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008ada:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008ade:	e7f7      	b.n	8008ad0 <memmove+0x24>

08008ae0 <_sbrk_r>:
 8008ae0:	b538      	push	{r3, r4, r5, lr}
 8008ae2:	4d06      	ldr	r5, [pc, #24]	@ (8008afc <_sbrk_r+0x1c>)
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	4604      	mov	r4, r0
 8008ae8:	4608      	mov	r0, r1
 8008aea:	602b      	str	r3, [r5, #0]
 8008aec:	f7f9 fd70 	bl	80025d0 <_sbrk>
 8008af0:	1c43      	adds	r3, r0, #1
 8008af2:	d102      	bne.n	8008afa <_sbrk_r+0x1a>
 8008af4:	682b      	ldr	r3, [r5, #0]
 8008af6:	b103      	cbz	r3, 8008afa <_sbrk_r+0x1a>
 8008af8:	6023      	str	r3, [r4, #0]
 8008afa:	bd38      	pop	{r3, r4, r5, pc}
 8008afc:	20000520 	.word	0x20000520

08008b00 <memcpy>:
 8008b00:	440a      	add	r2, r1
 8008b02:	4291      	cmp	r1, r2
 8008b04:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b08:	d100      	bne.n	8008b0c <memcpy+0xc>
 8008b0a:	4770      	bx	lr
 8008b0c:	b510      	push	{r4, lr}
 8008b0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b12:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b16:	4291      	cmp	r1, r2
 8008b18:	d1f9      	bne.n	8008b0e <memcpy+0xe>
 8008b1a:	bd10      	pop	{r4, pc}

08008b1c <__assert_func>:
 8008b1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008b1e:	4614      	mov	r4, r2
 8008b20:	461a      	mov	r2, r3
 8008b22:	4b09      	ldr	r3, [pc, #36]	@ (8008b48 <__assert_func+0x2c>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	4605      	mov	r5, r0
 8008b28:	68d8      	ldr	r0, [r3, #12]
 8008b2a:	b954      	cbnz	r4, 8008b42 <__assert_func+0x26>
 8008b2c:	4b07      	ldr	r3, [pc, #28]	@ (8008b4c <__assert_func+0x30>)
 8008b2e:	461c      	mov	r4, r3
 8008b30:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008b34:	9100      	str	r1, [sp, #0]
 8008b36:	462b      	mov	r3, r5
 8008b38:	4905      	ldr	r1, [pc, #20]	@ (8008b50 <__assert_func+0x34>)
 8008b3a:	f000 f86f 	bl	8008c1c <fiprintf>
 8008b3e:	f000 f87f 	bl	8008c40 <abort>
 8008b42:	4b04      	ldr	r3, [pc, #16]	@ (8008b54 <__assert_func+0x38>)
 8008b44:	e7f4      	b.n	8008b30 <__assert_func+0x14>
 8008b46:	bf00      	nop
 8008b48:	20000018 	.word	0x20000018
 8008b4c:	08009476 	.word	0x08009476
 8008b50:	08009448 	.word	0x08009448
 8008b54:	0800943b 	.word	0x0800943b

08008b58 <_calloc_r>:
 8008b58:	b570      	push	{r4, r5, r6, lr}
 8008b5a:	fba1 5402 	umull	r5, r4, r1, r2
 8008b5e:	b93c      	cbnz	r4, 8008b70 <_calloc_r+0x18>
 8008b60:	4629      	mov	r1, r5
 8008b62:	f7ff f991 	bl	8007e88 <_malloc_r>
 8008b66:	4606      	mov	r6, r0
 8008b68:	b928      	cbnz	r0, 8008b76 <_calloc_r+0x1e>
 8008b6a:	2600      	movs	r6, #0
 8008b6c:	4630      	mov	r0, r6
 8008b6e:	bd70      	pop	{r4, r5, r6, pc}
 8008b70:	220c      	movs	r2, #12
 8008b72:	6002      	str	r2, [r0, #0]
 8008b74:	e7f9      	b.n	8008b6a <_calloc_r+0x12>
 8008b76:	462a      	mov	r2, r5
 8008b78:	4621      	mov	r1, r4
 8008b7a:	f7fe fa44 	bl	8007006 <memset>
 8008b7e:	e7f5      	b.n	8008b6c <_calloc_r+0x14>

08008b80 <__ascii_mbtowc>:
 8008b80:	b082      	sub	sp, #8
 8008b82:	b901      	cbnz	r1, 8008b86 <__ascii_mbtowc+0x6>
 8008b84:	a901      	add	r1, sp, #4
 8008b86:	b142      	cbz	r2, 8008b9a <__ascii_mbtowc+0x1a>
 8008b88:	b14b      	cbz	r3, 8008b9e <__ascii_mbtowc+0x1e>
 8008b8a:	7813      	ldrb	r3, [r2, #0]
 8008b8c:	600b      	str	r3, [r1, #0]
 8008b8e:	7812      	ldrb	r2, [r2, #0]
 8008b90:	1e10      	subs	r0, r2, #0
 8008b92:	bf18      	it	ne
 8008b94:	2001      	movne	r0, #1
 8008b96:	b002      	add	sp, #8
 8008b98:	4770      	bx	lr
 8008b9a:	4610      	mov	r0, r2
 8008b9c:	e7fb      	b.n	8008b96 <__ascii_mbtowc+0x16>
 8008b9e:	f06f 0001 	mvn.w	r0, #1
 8008ba2:	e7f8      	b.n	8008b96 <__ascii_mbtowc+0x16>

08008ba4 <_realloc_r>:
 8008ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ba8:	4680      	mov	r8, r0
 8008baa:	4615      	mov	r5, r2
 8008bac:	460c      	mov	r4, r1
 8008bae:	b921      	cbnz	r1, 8008bba <_realloc_r+0x16>
 8008bb0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008bb4:	4611      	mov	r1, r2
 8008bb6:	f7ff b967 	b.w	8007e88 <_malloc_r>
 8008bba:	b92a      	cbnz	r2, 8008bc8 <_realloc_r+0x24>
 8008bbc:	f7ff f8f0 	bl	8007da0 <_free_r>
 8008bc0:	2400      	movs	r4, #0
 8008bc2:	4620      	mov	r0, r4
 8008bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bc8:	f000 f841 	bl	8008c4e <_malloc_usable_size_r>
 8008bcc:	4285      	cmp	r5, r0
 8008bce:	4606      	mov	r6, r0
 8008bd0:	d802      	bhi.n	8008bd8 <_realloc_r+0x34>
 8008bd2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008bd6:	d8f4      	bhi.n	8008bc2 <_realloc_r+0x1e>
 8008bd8:	4629      	mov	r1, r5
 8008bda:	4640      	mov	r0, r8
 8008bdc:	f7ff f954 	bl	8007e88 <_malloc_r>
 8008be0:	4607      	mov	r7, r0
 8008be2:	2800      	cmp	r0, #0
 8008be4:	d0ec      	beq.n	8008bc0 <_realloc_r+0x1c>
 8008be6:	42b5      	cmp	r5, r6
 8008be8:	462a      	mov	r2, r5
 8008bea:	4621      	mov	r1, r4
 8008bec:	bf28      	it	cs
 8008bee:	4632      	movcs	r2, r6
 8008bf0:	f7ff ff86 	bl	8008b00 <memcpy>
 8008bf4:	4621      	mov	r1, r4
 8008bf6:	4640      	mov	r0, r8
 8008bf8:	f7ff f8d2 	bl	8007da0 <_free_r>
 8008bfc:	463c      	mov	r4, r7
 8008bfe:	e7e0      	b.n	8008bc2 <_realloc_r+0x1e>

08008c00 <__ascii_wctomb>:
 8008c00:	4603      	mov	r3, r0
 8008c02:	4608      	mov	r0, r1
 8008c04:	b141      	cbz	r1, 8008c18 <__ascii_wctomb+0x18>
 8008c06:	2aff      	cmp	r2, #255	@ 0xff
 8008c08:	d904      	bls.n	8008c14 <__ascii_wctomb+0x14>
 8008c0a:	228a      	movs	r2, #138	@ 0x8a
 8008c0c:	601a      	str	r2, [r3, #0]
 8008c0e:	f04f 30ff 	mov.w	r0, #4294967295
 8008c12:	4770      	bx	lr
 8008c14:	700a      	strb	r2, [r1, #0]
 8008c16:	2001      	movs	r0, #1
 8008c18:	4770      	bx	lr
	...

08008c1c <fiprintf>:
 8008c1c:	b40e      	push	{r1, r2, r3}
 8008c1e:	b503      	push	{r0, r1, lr}
 8008c20:	4601      	mov	r1, r0
 8008c22:	ab03      	add	r3, sp, #12
 8008c24:	4805      	ldr	r0, [pc, #20]	@ (8008c3c <fiprintf+0x20>)
 8008c26:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c2a:	6800      	ldr	r0, [r0, #0]
 8008c2c:	9301      	str	r3, [sp, #4]
 8008c2e:	f000 f83f 	bl	8008cb0 <_vfiprintf_r>
 8008c32:	b002      	add	sp, #8
 8008c34:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c38:	b003      	add	sp, #12
 8008c3a:	4770      	bx	lr
 8008c3c:	20000018 	.word	0x20000018

08008c40 <abort>:
 8008c40:	b508      	push	{r3, lr}
 8008c42:	2006      	movs	r0, #6
 8008c44:	f000 fa08 	bl	8009058 <raise>
 8008c48:	2001      	movs	r0, #1
 8008c4a:	f7f9 fc49 	bl	80024e0 <_exit>

08008c4e <_malloc_usable_size_r>:
 8008c4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c52:	1f18      	subs	r0, r3, #4
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	bfbc      	itt	lt
 8008c58:	580b      	ldrlt	r3, [r1, r0]
 8008c5a:	18c0      	addlt	r0, r0, r3
 8008c5c:	4770      	bx	lr

08008c5e <__sfputc_r>:
 8008c5e:	6893      	ldr	r3, [r2, #8]
 8008c60:	3b01      	subs	r3, #1
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	b410      	push	{r4}
 8008c66:	6093      	str	r3, [r2, #8]
 8008c68:	da08      	bge.n	8008c7c <__sfputc_r+0x1e>
 8008c6a:	6994      	ldr	r4, [r2, #24]
 8008c6c:	42a3      	cmp	r3, r4
 8008c6e:	db01      	blt.n	8008c74 <__sfputc_r+0x16>
 8008c70:	290a      	cmp	r1, #10
 8008c72:	d103      	bne.n	8008c7c <__sfputc_r+0x1e>
 8008c74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c78:	f000 b932 	b.w	8008ee0 <__swbuf_r>
 8008c7c:	6813      	ldr	r3, [r2, #0]
 8008c7e:	1c58      	adds	r0, r3, #1
 8008c80:	6010      	str	r0, [r2, #0]
 8008c82:	7019      	strb	r1, [r3, #0]
 8008c84:	4608      	mov	r0, r1
 8008c86:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c8a:	4770      	bx	lr

08008c8c <__sfputs_r>:
 8008c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c8e:	4606      	mov	r6, r0
 8008c90:	460f      	mov	r7, r1
 8008c92:	4614      	mov	r4, r2
 8008c94:	18d5      	adds	r5, r2, r3
 8008c96:	42ac      	cmp	r4, r5
 8008c98:	d101      	bne.n	8008c9e <__sfputs_r+0x12>
 8008c9a:	2000      	movs	r0, #0
 8008c9c:	e007      	b.n	8008cae <__sfputs_r+0x22>
 8008c9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ca2:	463a      	mov	r2, r7
 8008ca4:	4630      	mov	r0, r6
 8008ca6:	f7ff ffda 	bl	8008c5e <__sfputc_r>
 8008caa:	1c43      	adds	r3, r0, #1
 8008cac:	d1f3      	bne.n	8008c96 <__sfputs_r+0xa>
 8008cae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008cb0 <_vfiprintf_r>:
 8008cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cb4:	460d      	mov	r5, r1
 8008cb6:	b09d      	sub	sp, #116	@ 0x74
 8008cb8:	4614      	mov	r4, r2
 8008cba:	4698      	mov	r8, r3
 8008cbc:	4606      	mov	r6, r0
 8008cbe:	b118      	cbz	r0, 8008cc8 <_vfiprintf_r+0x18>
 8008cc0:	6a03      	ldr	r3, [r0, #32]
 8008cc2:	b90b      	cbnz	r3, 8008cc8 <_vfiprintf_r+0x18>
 8008cc4:	f7fe f906 	bl	8006ed4 <__sinit>
 8008cc8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008cca:	07d9      	lsls	r1, r3, #31
 8008ccc:	d405      	bmi.n	8008cda <_vfiprintf_r+0x2a>
 8008cce:	89ab      	ldrh	r3, [r5, #12]
 8008cd0:	059a      	lsls	r2, r3, #22
 8008cd2:	d402      	bmi.n	8008cda <_vfiprintf_r+0x2a>
 8008cd4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008cd6:	f7fe fa14 	bl	8007102 <__retarget_lock_acquire_recursive>
 8008cda:	89ab      	ldrh	r3, [r5, #12]
 8008cdc:	071b      	lsls	r3, r3, #28
 8008cde:	d501      	bpl.n	8008ce4 <_vfiprintf_r+0x34>
 8008ce0:	692b      	ldr	r3, [r5, #16]
 8008ce2:	b99b      	cbnz	r3, 8008d0c <_vfiprintf_r+0x5c>
 8008ce4:	4629      	mov	r1, r5
 8008ce6:	4630      	mov	r0, r6
 8008ce8:	f000 f938 	bl	8008f5c <__swsetup_r>
 8008cec:	b170      	cbz	r0, 8008d0c <_vfiprintf_r+0x5c>
 8008cee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008cf0:	07dc      	lsls	r4, r3, #31
 8008cf2:	d504      	bpl.n	8008cfe <_vfiprintf_r+0x4e>
 8008cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8008cf8:	b01d      	add	sp, #116	@ 0x74
 8008cfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cfe:	89ab      	ldrh	r3, [r5, #12]
 8008d00:	0598      	lsls	r0, r3, #22
 8008d02:	d4f7      	bmi.n	8008cf4 <_vfiprintf_r+0x44>
 8008d04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008d06:	f7fe f9fd 	bl	8007104 <__retarget_lock_release_recursive>
 8008d0a:	e7f3      	b.n	8008cf4 <_vfiprintf_r+0x44>
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d10:	2320      	movs	r3, #32
 8008d12:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008d16:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d1a:	2330      	movs	r3, #48	@ 0x30
 8008d1c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008ecc <_vfiprintf_r+0x21c>
 8008d20:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008d24:	f04f 0901 	mov.w	r9, #1
 8008d28:	4623      	mov	r3, r4
 8008d2a:	469a      	mov	sl, r3
 8008d2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d30:	b10a      	cbz	r2, 8008d36 <_vfiprintf_r+0x86>
 8008d32:	2a25      	cmp	r2, #37	@ 0x25
 8008d34:	d1f9      	bne.n	8008d2a <_vfiprintf_r+0x7a>
 8008d36:	ebba 0b04 	subs.w	fp, sl, r4
 8008d3a:	d00b      	beq.n	8008d54 <_vfiprintf_r+0xa4>
 8008d3c:	465b      	mov	r3, fp
 8008d3e:	4622      	mov	r2, r4
 8008d40:	4629      	mov	r1, r5
 8008d42:	4630      	mov	r0, r6
 8008d44:	f7ff ffa2 	bl	8008c8c <__sfputs_r>
 8008d48:	3001      	adds	r0, #1
 8008d4a:	f000 80a7 	beq.w	8008e9c <_vfiprintf_r+0x1ec>
 8008d4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008d50:	445a      	add	r2, fp
 8008d52:	9209      	str	r2, [sp, #36]	@ 0x24
 8008d54:	f89a 3000 	ldrb.w	r3, [sl]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	f000 809f 	beq.w	8008e9c <_vfiprintf_r+0x1ec>
 8008d5e:	2300      	movs	r3, #0
 8008d60:	f04f 32ff 	mov.w	r2, #4294967295
 8008d64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d68:	f10a 0a01 	add.w	sl, sl, #1
 8008d6c:	9304      	str	r3, [sp, #16]
 8008d6e:	9307      	str	r3, [sp, #28]
 8008d70:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008d74:	931a      	str	r3, [sp, #104]	@ 0x68
 8008d76:	4654      	mov	r4, sl
 8008d78:	2205      	movs	r2, #5
 8008d7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d7e:	4853      	ldr	r0, [pc, #332]	@ (8008ecc <_vfiprintf_r+0x21c>)
 8008d80:	f7f7 fa56 	bl	8000230 <memchr>
 8008d84:	9a04      	ldr	r2, [sp, #16]
 8008d86:	b9d8      	cbnz	r0, 8008dc0 <_vfiprintf_r+0x110>
 8008d88:	06d1      	lsls	r1, r2, #27
 8008d8a:	bf44      	itt	mi
 8008d8c:	2320      	movmi	r3, #32
 8008d8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d92:	0713      	lsls	r3, r2, #28
 8008d94:	bf44      	itt	mi
 8008d96:	232b      	movmi	r3, #43	@ 0x2b
 8008d98:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d9c:	f89a 3000 	ldrb.w	r3, [sl]
 8008da0:	2b2a      	cmp	r3, #42	@ 0x2a
 8008da2:	d015      	beq.n	8008dd0 <_vfiprintf_r+0x120>
 8008da4:	9a07      	ldr	r2, [sp, #28]
 8008da6:	4654      	mov	r4, sl
 8008da8:	2000      	movs	r0, #0
 8008daa:	f04f 0c0a 	mov.w	ip, #10
 8008dae:	4621      	mov	r1, r4
 8008db0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008db4:	3b30      	subs	r3, #48	@ 0x30
 8008db6:	2b09      	cmp	r3, #9
 8008db8:	d94b      	bls.n	8008e52 <_vfiprintf_r+0x1a2>
 8008dba:	b1b0      	cbz	r0, 8008dea <_vfiprintf_r+0x13a>
 8008dbc:	9207      	str	r2, [sp, #28]
 8008dbe:	e014      	b.n	8008dea <_vfiprintf_r+0x13a>
 8008dc0:	eba0 0308 	sub.w	r3, r0, r8
 8008dc4:	fa09 f303 	lsl.w	r3, r9, r3
 8008dc8:	4313      	orrs	r3, r2
 8008dca:	9304      	str	r3, [sp, #16]
 8008dcc:	46a2      	mov	sl, r4
 8008dce:	e7d2      	b.n	8008d76 <_vfiprintf_r+0xc6>
 8008dd0:	9b03      	ldr	r3, [sp, #12]
 8008dd2:	1d19      	adds	r1, r3, #4
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	9103      	str	r1, [sp, #12]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	bfbb      	ittet	lt
 8008ddc:	425b      	neglt	r3, r3
 8008dde:	f042 0202 	orrlt.w	r2, r2, #2
 8008de2:	9307      	strge	r3, [sp, #28]
 8008de4:	9307      	strlt	r3, [sp, #28]
 8008de6:	bfb8      	it	lt
 8008de8:	9204      	strlt	r2, [sp, #16]
 8008dea:	7823      	ldrb	r3, [r4, #0]
 8008dec:	2b2e      	cmp	r3, #46	@ 0x2e
 8008dee:	d10a      	bne.n	8008e06 <_vfiprintf_r+0x156>
 8008df0:	7863      	ldrb	r3, [r4, #1]
 8008df2:	2b2a      	cmp	r3, #42	@ 0x2a
 8008df4:	d132      	bne.n	8008e5c <_vfiprintf_r+0x1ac>
 8008df6:	9b03      	ldr	r3, [sp, #12]
 8008df8:	1d1a      	adds	r2, r3, #4
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	9203      	str	r2, [sp, #12]
 8008dfe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008e02:	3402      	adds	r4, #2
 8008e04:	9305      	str	r3, [sp, #20]
 8008e06:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008edc <_vfiprintf_r+0x22c>
 8008e0a:	7821      	ldrb	r1, [r4, #0]
 8008e0c:	2203      	movs	r2, #3
 8008e0e:	4650      	mov	r0, sl
 8008e10:	f7f7 fa0e 	bl	8000230 <memchr>
 8008e14:	b138      	cbz	r0, 8008e26 <_vfiprintf_r+0x176>
 8008e16:	9b04      	ldr	r3, [sp, #16]
 8008e18:	eba0 000a 	sub.w	r0, r0, sl
 8008e1c:	2240      	movs	r2, #64	@ 0x40
 8008e1e:	4082      	lsls	r2, r0
 8008e20:	4313      	orrs	r3, r2
 8008e22:	3401      	adds	r4, #1
 8008e24:	9304      	str	r3, [sp, #16]
 8008e26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e2a:	4829      	ldr	r0, [pc, #164]	@ (8008ed0 <_vfiprintf_r+0x220>)
 8008e2c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008e30:	2206      	movs	r2, #6
 8008e32:	f7f7 f9fd 	bl	8000230 <memchr>
 8008e36:	2800      	cmp	r0, #0
 8008e38:	d03f      	beq.n	8008eba <_vfiprintf_r+0x20a>
 8008e3a:	4b26      	ldr	r3, [pc, #152]	@ (8008ed4 <_vfiprintf_r+0x224>)
 8008e3c:	bb1b      	cbnz	r3, 8008e86 <_vfiprintf_r+0x1d6>
 8008e3e:	9b03      	ldr	r3, [sp, #12]
 8008e40:	3307      	adds	r3, #7
 8008e42:	f023 0307 	bic.w	r3, r3, #7
 8008e46:	3308      	adds	r3, #8
 8008e48:	9303      	str	r3, [sp, #12]
 8008e4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e4c:	443b      	add	r3, r7
 8008e4e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e50:	e76a      	b.n	8008d28 <_vfiprintf_r+0x78>
 8008e52:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e56:	460c      	mov	r4, r1
 8008e58:	2001      	movs	r0, #1
 8008e5a:	e7a8      	b.n	8008dae <_vfiprintf_r+0xfe>
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	3401      	adds	r4, #1
 8008e60:	9305      	str	r3, [sp, #20]
 8008e62:	4619      	mov	r1, r3
 8008e64:	f04f 0c0a 	mov.w	ip, #10
 8008e68:	4620      	mov	r0, r4
 8008e6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e6e:	3a30      	subs	r2, #48	@ 0x30
 8008e70:	2a09      	cmp	r2, #9
 8008e72:	d903      	bls.n	8008e7c <_vfiprintf_r+0x1cc>
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d0c6      	beq.n	8008e06 <_vfiprintf_r+0x156>
 8008e78:	9105      	str	r1, [sp, #20]
 8008e7a:	e7c4      	b.n	8008e06 <_vfiprintf_r+0x156>
 8008e7c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e80:	4604      	mov	r4, r0
 8008e82:	2301      	movs	r3, #1
 8008e84:	e7f0      	b.n	8008e68 <_vfiprintf_r+0x1b8>
 8008e86:	ab03      	add	r3, sp, #12
 8008e88:	9300      	str	r3, [sp, #0]
 8008e8a:	462a      	mov	r2, r5
 8008e8c:	4b12      	ldr	r3, [pc, #72]	@ (8008ed8 <_vfiprintf_r+0x228>)
 8008e8e:	a904      	add	r1, sp, #16
 8008e90:	4630      	mov	r0, r6
 8008e92:	f7fd fbdb 	bl	800664c <_printf_float>
 8008e96:	4607      	mov	r7, r0
 8008e98:	1c78      	adds	r0, r7, #1
 8008e9a:	d1d6      	bne.n	8008e4a <_vfiprintf_r+0x19a>
 8008e9c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008e9e:	07d9      	lsls	r1, r3, #31
 8008ea0:	d405      	bmi.n	8008eae <_vfiprintf_r+0x1fe>
 8008ea2:	89ab      	ldrh	r3, [r5, #12]
 8008ea4:	059a      	lsls	r2, r3, #22
 8008ea6:	d402      	bmi.n	8008eae <_vfiprintf_r+0x1fe>
 8008ea8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008eaa:	f7fe f92b 	bl	8007104 <__retarget_lock_release_recursive>
 8008eae:	89ab      	ldrh	r3, [r5, #12]
 8008eb0:	065b      	lsls	r3, r3, #25
 8008eb2:	f53f af1f 	bmi.w	8008cf4 <_vfiprintf_r+0x44>
 8008eb6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008eb8:	e71e      	b.n	8008cf8 <_vfiprintf_r+0x48>
 8008eba:	ab03      	add	r3, sp, #12
 8008ebc:	9300      	str	r3, [sp, #0]
 8008ebe:	462a      	mov	r2, r5
 8008ec0:	4b05      	ldr	r3, [pc, #20]	@ (8008ed8 <_vfiprintf_r+0x228>)
 8008ec2:	a904      	add	r1, sp, #16
 8008ec4:	4630      	mov	r0, r6
 8008ec6:	f7fd fe59 	bl	8006b7c <_printf_i>
 8008eca:	e7e4      	b.n	8008e96 <_vfiprintf_r+0x1e6>
 8008ecc:	08009420 	.word	0x08009420
 8008ed0:	0800942a 	.word	0x0800942a
 8008ed4:	0800664d 	.word	0x0800664d
 8008ed8:	08008c8d 	.word	0x08008c8d
 8008edc:	08009426 	.word	0x08009426

08008ee0 <__swbuf_r>:
 8008ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ee2:	460e      	mov	r6, r1
 8008ee4:	4614      	mov	r4, r2
 8008ee6:	4605      	mov	r5, r0
 8008ee8:	b118      	cbz	r0, 8008ef2 <__swbuf_r+0x12>
 8008eea:	6a03      	ldr	r3, [r0, #32]
 8008eec:	b90b      	cbnz	r3, 8008ef2 <__swbuf_r+0x12>
 8008eee:	f7fd fff1 	bl	8006ed4 <__sinit>
 8008ef2:	69a3      	ldr	r3, [r4, #24]
 8008ef4:	60a3      	str	r3, [r4, #8]
 8008ef6:	89a3      	ldrh	r3, [r4, #12]
 8008ef8:	071a      	lsls	r2, r3, #28
 8008efa:	d501      	bpl.n	8008f00 <__swbuf_r+0x20>
 8008efc:	6923      	ldr	r3, [r4, #16]
 8008efe:	b943      	cbnz	r3, 8008f12 <__swbuf_r+0x32>
 8008f00:	4621      	mov	r1, r4
 8008f02:	4628      	mov	r0, r5
 8008f04:	f000 f82a 	bl	8008f5c <__swsetup_r>
 8008f08:	b118      	cbz	r0, 8008f12 <__swbuf_r+0x32>
 8008f0a:	f04f 37ff 	mov.w	r7, #4294967295
 8008f0e:	4638      	mov	r0, r7
 8008f10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f12:	6823      	ldr	r3, [r4, #0]
 8008f14:	6922      	ldr	r2, [r4, #16]
 8008f16:	1a98      	subs	r0, r3, r2
 8008f18:	6963      	ldr	r3, [r4, #20]
 8008f1a:	b2f6      	uxtb	r6, r6
 8008f1c:	4283      	cmp	r3, r0
 8008f1e:	4637      	mov	r7, r6
 8008f20:	dc05      	bgt.n	8008f2e <__swbuf_r+0x4e>
 8008f22:	4621      	mov	r1, r4
 8008f24:	4628      	mov	r0, r5
 8008f26:	f7ff fd99 	bl	8008a5c <_fflush_r>
 8008f2a:	2800      	cmp	r0, #0
 8008f2c:	d1ed      	bne.n	8008f0a <__swbuf_r+0x2a>
 8008f2e:	68a3      	ldr	r3, [r4, #8]
 8008f30:	3b01      	subs	r3, #1
 8008f32:	60a3      	str	r3, [r4, #8]
 8008f34:	6823      	ldr	r3, [r4, #0]
 8008f36:	1c5a      	adds	r2, r3, #1
 8008f38:	6022      	str	r2, [r4, #0]
 8008f3a:	701e      	strb	r6, [r3, #0]
 8008f3c:	6962      	ldr	r2, [r4, #20]
 8008f3e:	1c43      	adds	r3, r0, #1
 8008f40:	429a      	cmp	r2, r3
 8008f42:	d004      	beq.n	8008f4e <__swbuf_r+0x6e>
 8008f44:	89a3      	ldrh	r3, [r4, #12]
 8008f46:	07db      	lsls	r3, r3, #31
 8008f48:	d5e1      	bpl.n	8008f0e <__swbuf_r+0x2e>
 8008f4a:	2e0a      	cmp	r6, #10
 8008f4c:	d1df      	bne.n	8008f0e <__swbuf_r+0x2e>
 8008f4e:	4621      	mov	r1, r4
 8008f50:	4628      	mov	r0, r5
 8008f52:	f7ff fd83 	bl	8008a5c <_fflush_r>
 8008f56:	2800      	cmp	r0, #0
 8008f58:	d0d9      	beq.n	8008f0e <__swbuf_r+0x2e>
 8008f5a:	e7d6      	b.n	8008f0a <__swbuf_r+0x2a>

08008f5c <__swsetup_r>:
 8008f5c:	b538      	push	{r3, r4, r5, lr}
 8008f5e:	4b29      	ldr	r3, [pc, #164]	@ (8009004 <__swsetup_r+0xa8>)
 8008f60:	4605      	mov	r5, r0
 8008f62:	6818      	ldr	r0, [r3, #0]
 8008f64:	460c      	mov	r4, r1
 8008f66:	b118      	cbz	r0, 8008f70 <__swsetup_r+0x14>
 8008f68:	6a03      	ldr	r3, [r0, #32]
 8008f6a:	b90b      	cbnz	r3, 8008f70 <__swsetup_r+0x14>
 8008f6c:	f7fd ffb2 	bl	8006ed4 <__sinit>
 8008f70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f74:	0719      	lsls	r1, r3, #28
 8008f76:	d422      	bmi.n	8008fbe <__swsetup_r+0x62>
 8008f78:	06da      	lsls	r2, r3, #27
 8008f7a:	d407      	bmi.n	8008f8c <__swsetup_r+0x30>
 8008f7c:	2209      	movs	r2, #9
 8008f7e:	602a      	str	r2, [r5, #0]
 8008f80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f84:	81a3      	strh	r3, [r4, #12]
 8008f86:	f04f 30ff 	mov.w	r0, #4294967295
 8008f8a:	e033      	b.n	8008ff4 <__swsetup_r+0x98>
 8008f8c:	0758      	lsls	r0, r3, #29
 8008f8e:	d512      	bpl.n	8008fb6 <__swsetup_r+0x5a>
 8008f90:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008f92:	b141      	cbz	r1, 8008fa6 <__swsetup_r+0x4a>
 8008f94:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008f98:	4299      	cmp	r1, r3
 8008f9a:	d002      	beq.n	8008fa2 <__swsetup_r+0x46>
 8008f9c:	4628      	mov	r0, r5
 8008f9e:	f7fe feff 	bl	8007da0 <_free_r>
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	6363      	str	r3, [r4, #52]	@ 0x34
 8008fa6:	89a3      	ldrh	r3, [r4, #12]
 8008fa8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008fac:	81a3      	strh	r3, [r4, #12]
 8008fae:	2300      	movs	r3, #0
 8008fb0:	6063      	str	r3, [r4, #4]
 8008fb2:	6923      	ldr	r3, [r4, #16]
 8008fb4:	6023      	str	r3, [r4, #0]
 8008fb6:	89a3      	ldrh	r3, [r4, #12]
 8008fb8:	f043 0308 	orr.w	r3, r3, #8
 8008fbc:	81a3      	strh	r3, [r4, #12]
 8008fbe:	6923      	ldr	r3, [r4, #16]
 8008fc0:	b94b      	cbnz	r3, 8008fd6 <__swsetup_r+0x7a>
 8008fc2:	89a3      	ldrh	r3, [r4, #12]
 8008fc4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008fc8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008fcc:	d003      	beq.n	8008fd6 <__swsetup_r+0x7a>
 8008fce:	4621      	mov	r1, r4
 8008fd0:	4628      	mov	r0, r5
 8008fd2:	f000 f883 	bl	80090dc <__smakebuf_r>
 8008fd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fda:	f013 0201 	ands.w	r2, r3, #1
 8008fde:	d00a      	beq.n	8008ff6 <__swsetup_r+0x9a>
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	60a2      	str	r2, [r4, #8]
 8008fe4:	6962      	ldr	r2, [r4, #20]
 8008fe6:	4252      	negs	r2, r2
 8008fe8:	61a2      	str	r2, [r4, #24]
 8008fea:	6922      	ldr	r2, [r4, #16]
 8008fec:	b942      	cbnz	r2, 8009000 <__swsetup_r+0xa4>
 8008fee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008ff2:	d1c5      	bne.n	8008f80 <__swsetup_r+0x24>
 8008ff4:	bd38      	pop	{r3, r4, r5, pc}
 8008ff6:	0799      	lsls	r1, r3, #30
 8008ff8:	bf58      	it	pl
 8008ffa:	6962      	ldrpl	r2, [r4, #20]
 8008ffc:	60a2      	str	r2, [r4, #8]
 8008ffe:	e7f4      	b.n	8008fea <__swsetup_r+0x8e>
 8009000:	2000      	movs	r0, #0
 8009002:	e7f7      	b.n	8008ff4 <__swsetup_r+0x98>
 8009004:	20000018 	.word	0x20000018

08009008 <_raise_r>:
 8009008:	291f      	cmp	r1, #31
 800900a:	b538      	push	{r3, r4, r5, lr}
 800900c:	4605      	mov	r5, r0
 800900e:	460c      	mov	r4, r1
 8009010:	d904      	bls.n	800901c <_raise_r+0x14>
 8009012:	2316      	movs	r3, #22
 8009014:	6003      	str	r3, [r0, #0]
 8009016:	f04f 30ff 	mov.w	r0, #4294967295
 800901a:	bd38      	pop	{r3, r4, r5, pc}
 800901c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800901e:	b112      	cbz	r2, 8009026 <_raise_r+0x1e>
 8009020:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009024:	b94b      	cbnz	r3, 800903a <_raise_r+0x32>
 8009026:	4628      	mov	r0, r5
 8009028:	f000 f830 	bl	800908c <_getpid_r>
 800902c:	4622      	mov	r2, r4
 800902e:	4601      	mov	r1, r0
 8009030:	4628      	mov	r0, r5
 8009032:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009036:	f000 b817 	b.w	8009068 <_kill_r>
 800903a:	2b01      	cmp	r3, #1
 800903c:	d00a      	beq.n	8009054 <_raise_r+0x4c>
 800903e:	1c59      	adds	r1, r3, #1
 8009040:	d103      	bne.n	800904a <_raise_r+0x42>
 8009042:	2316      	movs	r3, #22
 8009044:	6003      	str	r3, [r0, #0]
 8009046:	2001      	movs	r0, #1
 8009048:	e7e7      	b.n	800901a <_raise_r+0x12>
 800904a:	2100      	movs	r1, #0
 800904c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009050:	4620      	mov	r0, r4
 8009052:	4798      	blx	r3
 8009054:	2000      	movs	r0, #0
 8009056:	e7e0      	b.n	800901a <_raise_r+0x12>

08009058 <raise>:
 8009058:	4b02      	ldr	r3, [pc, #8]	@ (8009064 <raise+0xc>)
 800905a:	4601      	mov	r1, r0
 800905c:	6818      	ldr	r0, [r3, #0]
 800905e:	f7ff bfd3 	b.w	8009008 <_raise_r>
 8009062:	bf00      	nop
 8009064:	20000018 	.word	0x20000018

08009068 <_kill_r>:
 8009068:	b538      	push	{r3, r4, r5, lr}
 800906a:	4d07      	ldr	r5, [pc, #28]	@ (8009088 <_kill_r+0x20>)
 800906c:	2300      	movs	r3, #0
 800906e:	4604      	mov	r4, r0
 8009070:	4608      	mov	r0, r1
 8009072:	4611      	mov	r1, r2
 8009074:	602b      	str	r3, [r5, #0]
 8009076:	f7f9 fa23 	bl	80024c0 <_kill>
 800907a:	1c43      	adds	r3, r0, #1
 800907c:	d102      	bne.n	8009084 <_kill_r+0x1c>
 800907e:	682b      	ldr	r3, [r5, #0]
 8009080:	b103      	cbz	r3, 8009084 <_kill_r+0x1c>
 8009082:	6023      	str	r3, [r4, #0]
 8009084:	bd38      	pop	{r3, r4, r5, pc}
 8009086:	bf00      	nop
 8009088:	20000520 	.word	0x20000520

0800908c <_getpid_r>:
 800908c:	f7f9 ba10 	b.w	80024b0 <_getpid>

08009090 <__swhatbuf_r>:
 8009090:	b570      	push	{r4, r5, r6, lr}
 8009092:	460c      	mov	r4, r1
 8009094:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009098:	2900      	cmp	r1, #0
 800909a:	b096      	sub	sp, #88	@ 0x58
 800909c:	4615      	mov	r5, r2
 800909e:	461e      	mov	r6, r3
 80090a0:	da0d      	bge.n	80090be <__swhatbuf_r+0x2e>
 80090a2:	89a3      	ldrh	r3, [r4, #12]
 80090a4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80090a8:	f04f 0100 	mov.w	r1, #0
 80090ac:	bf14      	ite	ne
 80090ae:	2340      	movne	r3, #64	@ 0x40
 80090b0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80090b4:	2000      	movs	r0, #0
 80090b6:	6031      	str	r1, [r6, #0]
 80090b8:	602b      	str	r3, [r5, #0]
 80090ba:	b016      	add	sp, #88	@ 0x58
 80090bc:	bd70      	pop	{r4, r5, r6, pc}
 80090be:	466a      	mov	r2, sp
 80090c0:	f000 f848 	bl	8009154 <_fstat_r>
 80090c4:	2800      	cmp	r0, #0
 80090c6:	dbec      	blt.n	80090a2 <__swhatbuf_r+0x12>
 80090c8:	9901      	ldr	r1, [sp, #4]
 80090ca:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80090ce:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80090d2:	4259      	negs	r1, r3
 80090d4:	4159      	adcs	r1, r3
 80090d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80090da:	e7eb      	b.n	80090b4 <__swhatbuf_r+0x24>

080090dc <__smakebuf_r>:
 80090dc:	898b      	ldrh	r3, [r1, #12]
 80090de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80090e0:	079d      	lsls	r5, r3, #30
 80090e2:	4606      	mov	r6, r0
 80090e4:	460c      	mov	r4, r1
 80090e6:	d507      	bpl.n	80090f8 <__smakebuf_r+0x1c>
 80090e8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80090ec:	6023      	str	r3, [r4, #0]
 80090ee:	6123      	str	r3, [r4, #16]
 80090f0:	2301      	movs	r3, #1
 80090f2:	6163      	str	r3, [r4, #20]
 80090f4:	b003      	add	sp, #12
 80090f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090f8:	ab01      	add	r3, sp, #4
 80090fa:	466a      	mov	r2, sp
 80090fc:	f7ff ffc8 	bl	8009090 <__swhatbuf_r>
 8009100:	9f00      	ldr	r7, [sp, #0]
 8009102:	4605      	mov	r5, r0
 8009104:	4639      	mov	r1, r7
 8009106:	4630      	mov	r0, r6
 8009108:	f7fe febe 	bl	8007e88 <_malloc_r>
 800910c:	b948      	cbnz	r0, 8009122 <__smakebuf_r+0x46>
 800910e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009112:	059a      	lsls	r2, r3, #22
 8009114:	d4ee      	bmi.n	80090f4 <__smakebuf_r+0x18>
 8009116:	f023 0303 	bic.w	r3, r3, #3
 800911a:	f043 0302 	orr.w	r3, r3, #2
 800911e:	81a3      	strh	r3, [r4, #12]
 8009120:	e7e2      	b.n	80090e8 <__smakebuf_r+0xc>
 8009122:	89a3      	ldrh	r3, [r4, #12]
 8009124:	6020      	str	r0, [r4, #0]
 8009126:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800912a:	81a3      	strh	r3, [r4, #12]
 800912c:	9b01      	ldr	r3, [sp, #4]
 800912e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009132:	b15b      	cbz	r3, 800914c <__smakebuf_r+0x70>
 8009134:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009138:	4630      	mov	r0, r6
 800913a:	f000 f81d 	bl	8009178 <_isatty_r>
 800913e:	b128      	cbz	r0, 800914c <__smakebuf_r+0x70>
 8009140:	89a3      	ldrh	r3, [r4, #12]
 8009142:	f023 0303 	bic.w	r3, r3, #3
 8009146:	f043 0301 	orr.w	r3, r3, #1
 800914a:	81a3      	strh	r3, [r4, #12]
 800914c:	89a3      	ldrh	r3, [r4, #12]
 800914e:	431d      	orrs	r5, r3
 8009150:	81a5      	strh	r5, [r4, #12]
 8009152:	e7cf      	b.n	80090f4 <__smakebuf_r+0x18>

08009154 <_fstat_r>:
 8009154:	b538      	push	{r3, r4, r5, lr}
 8009156:	4d07      	ldr	r5, [pc, #28]	@ (8009174 <_fstat_r+0x20>)
 8009158:	2300      	movs	r3, #0
 800915a:	4604      	mov	r4, r0
 800915c:	4608      	mov	r0, r1
 800915e:	4611      	mov	r1, r2
 8009160:	602b      	str	r3, [r5, #0]
 8009162:	f7f9 fa0d 	bl	8002580 <_fstat>
 8009166:	1c43      	adds	r3, r0, #1
 8009168:	d102      	bne.n	8009170 <_fstat_r+0x1c>
 800916a:	682b      	ldr	r3, [r5, #0]
 800916c:	b103      	cbz	r3, 8009170 <_fstat_r+0x1c>
 800916e:	6023      	str	r3, [r4, #0]
 8009170:	bd38      	pop	{r3, r4, r5, pc}
 8009172:	bf00      	nop
 8009174:	20000520 	.word	0x20000520

08009178 <_isatty_r>:
 8009178:	b538      	push	{r3, r4, r5, lr}
 800917a:	4d06      	ldr	r5, [pc, #24]	@ (8009194 <_isatty_r+0x1c>)
 800917c:	2300      	movs	r3, #0
 800917e:	4604      	mov	r4, r0
 8009180:	4608      	mov	r0, r1
 8009182:	602b      	str	r3, [r5, #0]
 8009184:	f7f9 fa0c 	bl	80025a0 <_isatty>
 8009188:	1c43      	adds	r3, r0, #1
 800918a:	d102      	bne.n	8009192 <_isatty_r+0x1a>
 800918c:	682b      	ldr	r3, [r5, #0]
 800918e:	b103      	cbz	r3, 8009192 <_isatty_r+0x1a>
 8009190:	6023      	str	r3, [r4, #0]
 8009192:	bd38      	pop	{r3, r4, r5, pc}
 8009194:	20000520 	.word	0x20000520

08009198 <_init>:
 8009198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800919a:	bf00      	nop
 800919c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800919e:	bc08      	pop	{r3}
 80091a0:	469e      	mov	lr, r3
 80091a2:	4770      	bx	lr

080091a4 <_fini>:
 80091a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091a6:	bf00      	nop
 80091a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091aa:	bc08      	pop	{r3}
 80091ac:	469e      	mov	lr, r3
 80091ae:	4770      	bx	lr
